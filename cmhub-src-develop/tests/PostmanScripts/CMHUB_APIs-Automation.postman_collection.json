{
	"info": {
		"_postman_id": "32a9c640-b0d1-4f27-ba00-13208f4bd08e",
		"name": "CMHUB_APIs-Automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "SBX API - OTA 2007B",
			"item": [
				{
					"name": "PIng",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n  <soap:Body>\n  \t\n\t<ota:OTA_PingRQ EchoToken=\"123\" Version=\"1.0\" TimeStamp=\"2016-05-26T11:11:50-04:00\" xmlns=\"http://www.opentravel.org/OTA/2003/05\">\n      <ota:EchoData>Are you there?</ota:EchoData>\n\t</ota:OTA_PingRQ>\n\t\n  </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Rooms(HotelAvailRQ)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5da26ced-ce04-42da-8990-85b91cfa04e2",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "15600f50-796a-478d-bd1e-7dc0e31a8009",
								"exec": [
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"var hotelcode = \"76876876\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"var hotelcode = \"00142835\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"var hotelcode = \"00019091\"; ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelAvailRQ>\n\t\t<ota:AvailRequestSegments>\n\t\t\t<ota:AvailRequestSegment AvailReqType = \"Room\">\n\t\t\t\t<ota:HotelSearchCriteria>\n\t\t\t\t\t<ota:Criterion>\n\t\t\t\t\t\t<ota:HotelRef HotelCode=\"{{HotelCode}}\" />\n\t\t\t\t\t</ota:Criterion>\n\t\t\t\t</ota:HotelSearchCriteria>\n\t\t\t</ota:AvailRequestSegment>\n\t\t</ota:AvailRequestSegments>\n\t</ota:OTA_HotelAvailRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Rooms(HotelAvailRQ) - No Partner code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5da26ced-ce04-42da-8990-85b91cfa04e2",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fb455bef-70c1-4a8e-a5dd-631066eb8e9f",
								"exec": [
									"var hotelcode = \"7687687\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelAvailRQ EchoToken=\"abc\" TimeStamp=\"2019-11-06T15:31:45+0000\" Version=\"1.0\">\n\t\t<ota:AvailRequestSegments>\n\t\t\t<ota:AvailRequestSegment AvailReqType = \"Room\">\n\t\t\t\t<ota:HotelSearchCriteria>\n\t\t\t\t\t<ota:Criterion>\n\t\t\t\t\t\t<ota:HotelRef HotelCode=\"{{HotelCode}}\" />\n\t\t\t\t\t</ota:Criterion>\n\t\t\t\t</ota:HotelSearchCriteria>\n\t\t\t</ota:AvailRequestSegment>\n\t\t</ota:AvailRequestSegments>\n\t</ota:OTA_HotelAvailRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Rooms(HotelAvailRQ) - Wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5da26ced-ce04-42da-8990-85b91cfa04e2",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1b1d6073-225b-4b22-8ee5-8fa023460ad3",
								"exec": [
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var password = \"qa1\";",
									"var hotelcode = \"76876876\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var password = \"qa1\";",
									"var hotelcode = \"00142835\";",
									"}",
									"else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var password = \"qa1\";",
									"var hotelcode = \"00019091\";     ",
									"}else if(pm.environment.name ==\"LOCAL\")",
									"{",
									"var password = \"qa1\";",
									"var hotelcode = \"00019091\";     ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelAvailRQ EchoToken=\"abc\" TimeStamp=\"2019-11-06T15:31:45+0000\" Version=\"1.0\">\n\t\t<ota:AvailRequestSegments>\n\t\t\t<ota:AvailRequestSegment AvailReqType = \"Room\">\n\t\t\t\t<ota:HotelSearchCriteria>\n\t\t\t\t\t<ota:Criterion>\n\t\t\t\t\t\t<ota:HotelRef HotelCode=\"{{HotelCode}}\" />\n\t\t\t\t\t</ota:Criterion>\n\t\t\t\t</ota:HotelSearchCriteria>\n\t\t\t</ota:AvailRequestSegment>\n\t\t</ota:AvailRequestSegments>\n\t</ota:OTA_HotelAvailRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Rooms(HotelAvailRQ) - InvalidUsername",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5da26ced-ce04-42da-8990-85b91cfa04e2",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "60a9c3a6-682d-4e51-bb85-7c3f0780a239",
								"exec": [
									"var username = \"001428\";",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var password = \"qa\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var password = \"password\";",
									"}",
									"else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var password = \"password\";    ",
									"}",
									"else if(pm.environment.name ==\"LOCAL\")",
									"{",
									"var password = \"password\";    ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelAvailRQ EchoToken=\"abc\" TimeStamp=\"2019-11-06T15:31:45+0000\" Version=\"1.0\">\n\t\t<ota:AvailRequestSegments>\n\t\t\t<ota:AvailRequestSegment AvailReqType = \"Room\">\n\t\t\t\t<ota:HotelSearchCriteria>\n\t\t\t\t\t<ota:Criterion>\n\t\t\t\t\t\t<ota:HotelRef HotelCode=\"{{HotelCode}}\" />\n\t\t\t\t\t</ota:Criterion>\n\t\t\t\t</ota:HotelSearchCriteria>\n\t\t\t</ota:AvailRequestSegment>\n\t\t</ota:AvailRequestSegments>\n\t</ota:OTA_HotelAvailRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Room Rates(HotelRateAmountNotif)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e771bb7a-5f41-4fd2-a1ad-a96e97ed44b8",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "effb7fac-8a81-4954-923a-9b41a5d78ebe",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"var month = date2.getMonth() + 1;",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 71);",
									"var month = date3.getMonth() + 1;",
									"var startdate2 = date3.getFullYear() + \"-\" + month + \"-\" + date3.getDate();",
									"",
									"var date4 = new Date();",
									"date4.setDate(date4.getDate() + 90);",
									"var month = date4.getMonth() + 1;",
									"var enddate2 = date4.getFullYear() + \"-\" + month + \"-\" + date4.getDate();",
									"",
									"var Price1 = \"120\";",
									"var Price2 = \"130\";",
									"var Price3 = \"90\";",
									"var Price4 = \"95\";",
									"postman.setEnvironmentVariable(\"Price1\", Price1);",
									"postman.setEnvironmentVariable(\"Price2\", Price2);",
									"postman.setEnvironmentVariable(\"Price3\", Price3);",
									"postman.setEnvironmentVariable(\"Price4\", Price4);",
									"postman.setEnvironmentVariable(\"StartDate1\",startdate1);",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate1);",
									"postman.setEnvironmentVariable(\"StartDate2\",startdate2);",
									"postman.setEnvironmentVariable(\"EndDate2\",enddate2);",
									"",
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"var hotelcode = \"76876876\";",
									"var RoomTypeCode1 = \"09836\";",
									"var RoomTypeCode2 = \"09868\";",
									"} ",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"var hotelcode = \"00142835\";",
									"var RoomTypeCode1 = \"321942\";",
									"var RoomTypeCode2 = \"283023\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"var hotelcode = \"00019091\"; ",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"393333\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n         <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelRateAmountNotifRQ>\n\t  <ota:RateAmountMessages HotelCode = \"{{HotelCode}}\">\n\t    <ota:RateAmountMessage>\n\t      <ota:StatusApplicationControl RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode1}}\" IsRoom = \"true\"/>\n\t      <ota:Rates>\n\t        <ota:Rate Start = \"{{StartDate1}}\" End = \"{{EndDate1}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"{{Price1}}\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t        <ota:Rate Start = \"{{StartDate2}}\" End = \"{{EndDate2}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"{{Price2}}\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t      </ota:Rates>\n\t    </ota:RateAmountMessage>\n\t    <ota:RateAmountMessage>\n\t      <ota:StatusApplicationControl RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode2}}\" IsRoom = \"true\"/>\n\t      <ota:Rates>\n\t        <ota:Rate Start = \"{{StartDate1}}\" End = \"{{EndDate1}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"{{Price3}}\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t        <ota:Rate Start = \"{{StartDate2}}\" End = \"{{EndDate2}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"{{Price4}}\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t      </ota:Rates>\n\t    </ota:RateAmountMessage>\n\t  </ota:RateAmountMessages>\n\t</ota:OTA_HotelRateAmountNotifRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Update rates for a room"
					},
					"response": []
				},
				{
					"name": "Update Room Rates(HotelRateAmountNotif) - StartDate > EndDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e771bb7a-5f41-4fd2-a1ad-a96e97ed44b8",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 400 - Bad request\", function () {",
									"var contains = false;",
									"var expected = \"400\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "52a28a38-88be-498d-929e-edd7b2f3e74f",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 40);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate1\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate );"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n         <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelRateAmountNotifRQ EchoToken=\"abc\" TimeStamp=\"2019-11-06T15:31:45+0000\" Version=\"1.0\">\n\t  <ota:RateAmountMessages HotelCode = \"{{HotelCode}}\">\n\t    <ota:RateAmountMessage>\n\t      <ota:StatusApplicationControl RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode1}}\" IsRoom = \"true\"/>\n\t      <ota:Rates>\n\t        <ota:Rate Start = \"{{StartDate1}}\" End = \"{{EndDate1}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"140\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t        <ota:Rate Start = \"{{StartDate2}}\" End = \"{{EndDate2}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"145\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t      </ota:Rates>\n\t    </ota:RateAmountMessage>\n\t    <ota:RateAmountMessage>\n\t      <ota:StatusApplicationControl RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode2}}\" IsRoom = \"true\"/>\n\t      <ota:Rates>\n\t        <ota:Rate Start = \"{{StartDate1}}\" End = \"{{EndDate1}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"90\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t        <ota:Rate Start = \"{{StartDate2}}\" End = \"{{EndDate2}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"95\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t      </ota:Rates>\n\t    </ota:RateAmountMessage>\n\t  </ota:RateAmountMessages>\n\t</ota:OTA_HotelRateAmountNotifRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Update rates for a room"
					},
					"response": []
				},
				{
					"name": "Update Room Rates(HotelRateAmountNotif) - Wrong Product Code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9d84219b-849d-4142-a2a0-3118007f9c01",
								"exec": [
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"var month = date2.getMonth() + 1;",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate1);",
									"",
									"var RoomTypeCode1 = \"0986\";",
									"postman.setEnvironmentVariable('RoomTypeCode1',RoomTypeCode1);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d825e1cd-9002-44ec-ab3b-7ba68f998f1e",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 400 - Bad request\", function () {",
									"var contains = false;",
									"var expected = \"400\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n         <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelRateAmountNotifRQ EchoToken=\"abc\" TimeStamp=\"2019-11-06T15:31:45+0000\" Version=\"1.0\">\n\t  <ota:RateAmountMessages HotelCode = \"{{HotelCode}}\">\n\t    <ota:RateAmountMessage>\n\t      <ota:StatusApplicationControl RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode1}}\" IsRoom = \"true\"/>\n\t      <ota:Rates>\n\t        <ota:Rate Start = \"{{StartDate1}}\" End = \"{{EndDate1}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"140\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t        <ota:Rate Start = \"{{StartDate2}}\" End = \"{{EndDate2}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"145\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t      </ota:Rates>\n\t    </ota:RateAmountMessage>\n\t    <ota:RateAmountMessage>\n\t      <ota:StatusApplicationControl RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode2}}\" IsRoom = \"true\"/>\n\t      <ota:Rates>\n\t        <ota:Rate Start = \"{{StartDate1}}\" End = \"{{EndDate1}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"90\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t        <ota:Rate Start = \"{{StartDate2}}\" End = \"{{EndDate2}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"95\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t      </ota:Rates>\n\t    </ota:RateAmountMessage>\n\t  </ota:RateAmountMessages>\n\t</ota:OTA_HotelRateAmountNotifRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Update rates for a room"
					},
					"response": []
				},
				{
					"name": "Update Room Rates(HotelRateAmountNotif) - No Partner Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e771bb7a-5f41-4fd2-a1ad-a96e97ed44b8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4f1d9e39-8b78-486f-8a7b-a79981c2f941",
								"exec": [
									"",
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var RoomTypeCode1 = \"09836\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var RoomTypeCode1 = \"321942\";",
									"}",
									"else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var RoomTypeCode1 = \"235854\";    ",
									"}",
									"var hotelcode = \"\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable('RoomTypeCode1',RoomTypeCode1);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n         <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelRateAmountNotifRQ EchoToken=\"abc\" TimeStamp=\"2019-11-06T15:31:45+0000\" Version=\"1.0\">\n\t  <ota:RateAmountMessages HotelCode = \"{{HotelCode}}\">\n\t    <ota:RateAmountMessage>\n\t      <ota:StatusApplicationControl RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode1}}\" IsRoom = \"true\"/>\n\t      <ota:Rates>\n\t        <ota:Rate Start = \"{{StartDate1}}\" End = \"{{EndDate1}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"140\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t        <ota:Rate Start = \"{{StartDate2}}\" End = \"{{EndDate2}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"145\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t      </ota:Rates>\n\t    </ota:RateAmountMessage>\n\t    <ota:RateAmountMessage>\n\t      <ota:StatusApplicationControl RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode2}}\" IsRoom = \"true\"/>\n\t      <ota:Rates>\n\t        <ota:Rate Start = \"{{StartDate1}}\" End = \"{{EndDate1}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"90\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t        <ota:Rate Start = \"{{StartDate2}}\" End = \"{{EndDate2}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"95\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t      </ota:Rates>\n\t    </ota:RateAmountMessage>\n\t  </ota:RateAmountMessages>\n\t</ota:OTA_HotelRateAmountNotifRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Update rates for a room"
					},
					"response": []
				},
				{
					"name": "Update Room Rates(HotelRateAmountNotif) - Wrong password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cb8c6c57-8c32-42d9-929b-f32d49cd24b3",
								"exec": [
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"76876876\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00142835\";",
									"}",
									"else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var hotelcode = \"00019091\";    ",
									"}",
									"",
									"var password = \"qa1\";",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "df5c140e-cee8-4c54-ba85-40c16cd63aa2",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n         <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelRateAmountNotifRQ EchoToken=\"abc\" TimeStamp=\"2019-11-06T15:31:45+0000\" Version=\"1.0\">\n\t  <ota:RateAmountMessages HotelCode = \"{{HotelCode}}\">\n\t    <ota:RateAmountMessage>\n\t      <ota:StatusApplicationControl RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode1}}\" IsRoom = \"true\"/>\n\t      <ota:Rates>\n\t        <ota:Rate Start = \"{{StartDate1}}\" End = \"{{EndDate1}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"140\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t        <ota:Rate Start = \"{{StartDate2}}\" End = \"{{EndDate2}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"145\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t      </ota:Rates>\n\t    </ota:RateAmountMessage>\n\t    <ota:RateAmountMessage>\n\t      <ota:StatusApplicationControl RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode2}}\" IsRoom = \"true\"/>\n\t      <ota:Rates>\n\t        <ota:Rate Start = \"{{StartDate1}}\" End = \"{{EndDate1}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"90\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t        <ota:Rate Start = \"{{StartDate2}}\" End = \"{{EndDate2}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"95\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t      </ota:Rates>\n\t    </ota:RateAmountMessage>\n\t  </ota:RateAmountMessages>\n\t</ota:OTA_HotelRateAmountNotifRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Update rates for a room"
					},
					"response": []
				},
				{
					"name": "Update Room Rates(HotelRateAmountNotif) - Invalid username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e771bb7a-5f41-4fd2-a1ad-a96e97ed44b8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fed35243-ae38-4b9c-af98-4ba07d0a74df",
								"exec": [
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"qanew\";",
									"var password = \"qa\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"001428\";",
									"var password = \"qa\";",
									"",
									"}",
									"else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"yieldpl\";",
									"var password = \"qa\";    ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n         <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelRateAmountNotifRQ EchoToken=\"abc\" TimeStamp=\"2019-11-06T15:31:45+0000\" Version=\"1.0\">\n\t  <ota:RateAmountMessages HotelCode = \"{{HotelCode}}\">\n\t    <ota:RateAmountMessage>\n\t      <ota:StatusApplicationControl RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode1}}\" IsRoom = \"true\"/>\n\t      <ota:Rates>\n\t        <ota:Rate Start = \"{{StartDate1}}\" End = \"{{EndDate1}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"140\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t        <ota:Rate Start = \"{{StartDate2}}\" End = \"{{EndDate2}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"145\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t      </ota:Rates>\n\t    </ota:RateAmountMessage>\n\t    <ota:RateAmountMessage>\n\t      <ota:StatusApplicationControl RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode2}}\" IsRoom = \"true\"/>\n\t      <ota:Rates>\n\t        <ota:Rate Start = \"{{StartDate1}}\" End = \"{{EndDate1}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"90\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t        <ota:Rate Start = \"{{StartDate2}}\" End = \"{{EndDate2}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"95\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t      </ota:Rates>\n\t    </ota:RateAmountMessage>\n\t  </ota:RateAmountMessages>\n\t</ota:OTA_HotelRateAmountNotifRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Update rates for a room"
					},
					"response": []
				},
				{
					"name": "Read Room Rates(HotelRatePlanRQ)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9766c4eb-37d2-4cbb-b655-a27072593f93",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 90);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"var hotelcode = \"76876876\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"var hotelcode = \"00142835\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"var hotelcode = \"00019091\"; ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6675d827-404e-4838-8dae-2ad642239f65",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var price1 = postman.getEnvironmentVariable('Price1');",
									"var price2 = postman.getEnvironmentVariable('Price2');",
									"var price3 = postman.getEnvironmentVariable('Price3');",
									"var price4 = postman.getEnvironmentVariable('Price4');",
									"",
									"var roomtype1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['0']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['40']['$']['InvTypeCode'];",
									"var getprice1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['0']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax'];",
									"var getprice2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['20']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax'];",
									"var getprice3 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['40']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax'];",
									"var getprice4 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['60']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains first Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode1;",
									"pm.expect(roomtype1).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains second Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode2;",
									"pm.expect(roomtype2).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read room rates for first Roomtypecode - Same for first 20 consecutive days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=0;i<20; i++)",
									"{",
									"if(getprice1 == price1 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read room rates for first Roomtypecode - Same for 21 to 40 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=20;i<40; i++)",
									"{",
									"if(getprice2 == price2 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read room rates for second Roomtypecode - Same for first 20 consecutive days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=40;i<60; i++)",
									"{",
									"if(getprice3 == price3 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read room rates for second Roomtypecode - Same for 21 to 40 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=60;i<80; i++)",
									"{",
									"if(getprice4 == price4 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelRatePlanRQ EchoToken=\"abc\" TimeStamp=\"{{Date}}\" Version=\"1.0\"> \n\t\t<ota:RatePlans>\n\t\t\t<ota:RatePlan>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\"/>\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/> \n\t\t\t\t<ota:RatePlanCandidates>\n\t\t\t\t\t<ota:RatePlanCandidate RatePlanCode = \"SBX\"/> \n\t\t\t\t</ota:RatePlanCandidates>\n\t\t\t</ota:RatePlan>\n\t\t</ota:RatePlans>\n\t</ota:OTA_HotelRatePlanRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get rates for the given partner between a start and end date"
					},
					"response": []
				},
				{
					"name": "Read Room Rates(HotelRatePlanRQ) - StartDate > EndDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c16313e6-8443-4d5c-821c-2294e9ac541c",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 400 - Bad request\", function () {",
									"var contains = false;",
									"var expected = \"400\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "293bc75e-02bc-4ec2-8155-5e4361c6cb2b",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 40);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelRatePlanRQ EchoToken=\"abc\" TimeStamp=\"{{Date}}\" Version=\"1.0\"> \n\t\t<ota:RatePlans>\n\t\t\t<ota:RatePlan>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\"/>\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/> \n\t\t\t\t<ota:RatePlanCandidates>\n\t\t\t\t\t<ota:RatePlanCandidate RatePlanCode = \"SBX\"/> \n\t\t\t\t</ota:RatePlanCandidates>\n\t\t\t</ota:RatePlan>\n\t\t</ota:RatePlans>\n\t</ota:OTA_HotelRatePlanRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get rates for the given partner between a start and end date"
					},
					"response": []
				},
				{
					"name": "Read Room Rates(HotelRatePlanRQ) - No Partner code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c16313e6-8443-4d5c-821c-2294e9ac541c",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1665622f-3dc2-487f-8c2b-448cdbdf8de6",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var hotelcode = \"7687687\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelRatePlanRQ EchoToken=\"abc\" TimeStamp=\"{{Date}}\" Version=\"1.0\"> \n\t\t<ota:RatePlans>\n\t\t\t<ota:RatePlan>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\"/>\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/> \n\t\t\t\t<ota:RatePlanCandidates>\n\t\t\t\t\t<ota:RatePlanCandidate RatePlanCode = \"SBX\"/> \n\t\t\t\t</ota:RatePlanCandidates>\n\t\t\t</ota:RatePlan>\n\t\t</ota:RatePlans>\n\t</ota:OTA_HotelRatePlanRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get rates for the given partner between a start and end date"
					},
					"response": []
				},
				{
					"name": "Read Room Rates(HotelRatePlanRQ) - Wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c16313e6-8443-4d5c-821c-2294e9ac541c",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2444341e-ed87-4b6d-bfdc-f33e79854f95",
								"exec": [
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"76876876\";",
									"var password = \"qa1\";",
									"postman.setEnvironmentVariable(\"password\", password);",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00142835\";",
									"var password = \"qa1\";",
									"}",
									"else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var hotelcode = \"00019091\";   ",
									"var password = \"qa1\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelRatePlanRQ EchoToken=\"abc\" TimeStamp=\"{{Date}}\" Version=\"1.0\"> \n\t\t<ota:RatePlans>\n\t\t\t<ota:RatePlan>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\"/>\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/> \n\t\t\t\t<ota:RatePlanCandidates>\n\t\t\t\t\t<ota:RatePlanCandidate RatePlanCode = \"SBX\"/> \n\t\t\t\t</ota:RatePlanCandidates>\n\t\t\t</ota:RatePlan>\n\t\t</ota:RatePlans>\n\t</ota:OTA_HotelRatePlanRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get rates for the given partner between a start and end date"
					},
					"response": []
				},
				{
					"name": "Read Room Rates(HotelRatePlanRQ) - Invalid username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c16313e6-8443-4d5c-821c-2294e9ac541c",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9ab736b8-db77-45ba-85b3-675139d54ac6",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"qanew\";",
									"var password = \"qa\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"001428\";",
									"var password = \"password\";",
									"}",
									"else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"001428\";",
									"var password = \"password\";   ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelRatePlanRQ EchoToken=\"abc\" TimeStamp=\"{{Date}}\" Version=\"1.0\"> \n\t\t<ota:RatePlans>\n\t\t\t<ota:RatePlan>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\"/>\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/> \n\t\t\t\t<ota:RatePlanCandidates>\n\t\t\t\t\t<ota:RatePlanCandidate RatePlanCode = \"SBX\"/> \n\t\t\t\t</ota:RatePlanCandidates>\n\t\t\t</ota:RatePlan>\n\t\t</ota:RatePlans>\n\t</ota:OTA_HotelRatePlanRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get rates for the given partner between a start and end date"
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelInvCountNotif",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99da692b-ca4a-43da-ac4f-68a244d563f3",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var responseTime = pm.response.responseTime;",
									"console.log(\"Response time: \",responseTime )",
									"postman.setEnvironmentVariable(\"ResponseTime\", responseTime);",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8e968c46-a238-4ef9-a89b-4c87c9760aa6",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									"",
									"if(pm.environment.name==\"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"var hotelcode = \"76876876\";",
									"var RoomTypeCode1 = \"09836\";",
									"var RoomTypeCode2 = \"09868\";",
									"var count1 = 5;",
									"var count2 = 10;",
									"",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"var hotelcode = \"00142835\";",
									"var RoomTypeCode1 = \"321942\";",
									"var RoomTypeCode2 = \"283023\";",
									"var count1 = 5;",
									"var count2 = 10",
									"    ",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"var hotelcode = \"00019091\";",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"393333\";",
									"var count1 = 5;",
									"var count2 = 10;",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"count1\", count1);",
									"postman.setEnvironmentVariable(\"count2\", count2);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\",RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n          <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n<soap:Body>\n\n<ota:OTA_HotelInvCountNotifRQ EchoToken=\"abc\" TimeStamp=\"{{Date}}\" Version=\"1.0\">\n  <ota:Inventories HotelCode = \"{{HotelCode}}\">\n  \n    <ota:Inventory>\n      <ota:StatusApplicationControl Start = \"{{StartDate}}\" End = \"{{EndDate}}\" RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode1}}\" IsRoom = \"true\"/>\n      <ota:InvCounts>\n        <ota:InvCount CountType = \"2\" Count = \"{{count1}}\"/>\n      </ota:InvCounts>\n    </ota:Inventory>\n    \n    <ota:Inventory>\n      <ota:StatusApplicationControl Start = \"{{StartDate}}\" End = \"{{EndDate}}\" RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode2}}\" IsRoom = \"true\"/>\n      <ota:InvCounts>\n        <ota:InvCount CountType = \"2\" Count = \"{{count2}}\"/>\n      </ota:InvCounts>\n    </ota:Inventory>\n    \n  </ota:Inventories>\n</ota:OTA_HotelInvCountNotifRQ>\n\n</soap:Body>\n</soap:Envelope>\n"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Update availability"
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelInvCountNotif) - Wrong Date format",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99da692b-ca4a-43da-ac4f-68a244d563f3",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error: 400\", function () {",
									"var expected = \"400\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error message as expected to enter correct date format 'Y-m-d'\", function () {",
									"var expected = \"Wrong date format. Expected format is `Y-m-d`\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8e968c46-a238-4ef9-a89b-4c87c9760aa6",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var startdate = new Date();",
									"startdate.setDate(startdate.getDate() + 119);",
									"postman.setEnvironmentVariable(\"StartDate\",startdate)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n          <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n<soap:Body>\n\n<ota:OTA_HotelInvCountNotifRQ EchoToken=\"abc\" TimeStamp=\"{{Date}}\" Version=\"1.0\">\n  <ota:Inventories HotelCode = \"{{HotelCode}}\">\n  \n    <ota:Inventory>\n      <ota:StatusApplicationControl Start = \"{{StartDate}}\" End = \"{{EndDate}}\" RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode1}}\" IsRoom = \"true\"/>\n      <ota:InvCounts>\n        <ota:InvCount CountType = \"2\" Count = \"{{count1}}\"/>\n      </ota:InvCounts>\n    </ota:Inventory>\n    \n    <ota:Inventory>\n      <ota:StatusApplicationControl Start = \"{{StartDate}}\" End = \"{{EndDate}}\" RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode2}}\" IsRoom = \"true\"/>\n      <ota:InvCounts>\n        <ota:InvCount CountType = \"2\" Count = \"{{count2}}\"/>\n      </ota:InvCounts>\n    </ota:Inventory>\n    \n  </ota:Inventories>\n</ota:OTA_HotelInvCountNotifRQ>\n\n</soap:Body>\n</soap:Envelope>\n"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Update availability"
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelInvCountNotif) - StartDate > EndDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99da692b-ca4a-43da-ac4f-68a244d563f3",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 400 - Bad request\", function () {",
									"var contains = false;",
									"var expected = \"400\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6d6cea1b-7092-40a6-be11-c050d79a3021",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 71);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n          <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n<soap:Body>\n\n<ota:OTA_HotelInvCountNotifRQ EchoToken=\"abc\" TimeStamp=\"{{Date}}\" Version=\"1.0\">\n  <ota:Inventories HotelCode = \"{{HotelCode}}\">\n  \n    <ota:Inventory>\n      <ota:StatusApplicationControl Start = \"{{StartDate}}\" End = \"{{EndDate}}\" RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode1}}\" IsRoom = \"true\"/>\n      <ota:InvCounts>\n        <ota:InvCount CountType = \"2\" Count = \"9\"/>\n      </ota:InvCounts>\n    </ota:Inventory>\n    \n    <ota:Inventory>\n      <ota:StatusApplicationControl Start = \"{{StartDate}}\" End = \"{{EndDate}}\" RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode2}}\" IsRoom = \"true\"/>\n      <ota:InvCounts>\n        <ota:InvCount CountType = \"2\" Count = \"9\"/>\n      </ota:InvCounts>\n    </ota:Inventory>\n    \n  </ota:Inventories>\n</ota:OTA_HotelInvCountNotifRQ>\n\n</soap:Body>\n</soap:Envelope>\n"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Update availability"
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelInvCountNotif) - Wrong Product Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99da692b-ca4a-43da-ac4f-68a244d563f3",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a51d3fd5-a737-4048-94c6-4680740eeb29",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"",
									"var count2 = 15;",
									"postman.setEnvironmentVariable(\"count2\", count2);",
									"",
									"var RoomTypeCode1 = \"0986\";",
									"postman.setEnvironmentVariable('RoomTypeCode1',RoomTypeCode1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n          <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n<soap:Body>\n\n<ota:OTA_HotelInvCountNotifRQ EchoToken=\"abc\" TimeStamp=\"{{Date}}\" Version=\"1.0\">\n  <ota:Inventories HotelCode = \"{{HotelCode}}\">\n  \n    <ota:Inventory>\n      <ota:StatusApplicationControl Start = \"{{StartDate}}\" End = \"{{EndDate}}\" RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode1}}\" IsRoom = \"true\"/>\n      <ota:InvCounts>\n        <ota:InvCount CountType = \"2\" Count = \"{{count1}}\"/>\n      </ota:InvCounts>\n    </ota:Inventory>\n    \n    <ota:Inventory>\n      <ota:StatusApplicationControl Start = \"{{StartDate}}\" End = \"{{EndDate}}\" RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode2}}\" IsRoom = \"true\"/>\n      <ota:InvCounts>\n        <ota:InvCount CountType = \"2\" Count = \"{{count2}}\"/>\n      </ota:InvCounts>\n    </ota:Inventory>\n    \n  </ota:Inventories>\n</ota:OTA_HotelInvCountNotifRQ>\n\n</soap:Body>\n</soap:Envelope>\n"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Update availability"
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelInvCountNotif) - No Partner code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99da692b-ca4a-43da-ac4f-68a244d563f3",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9ad6bd27-fc35-421b-9161-1fc3ff832054",
								"exec": [
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var RoomTypeCode1 = \"09836\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var RoomTypeCode1 = \"321942\";",
									"}",
									"else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var RoomTypeCode1 = \"235854\";    ",
									"}",
									"var hotelcode = \"\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable('RoomTypeCode1',RoomTypeCode1);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n          <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n<soap:Body>\n\n<ota:OTA_HotelInvCountNotifRQ EchoToken=\"abc\" TimeStamp=\"{{Date}}\" Version=\"1.0\">\n  <ota:Inventories HotelCode = \"{{HotelCode}}\">\n  \n    <ota:Inventory>\n      <ota:StatusApplicationControl Start = \"{{StartDate}}\" End = \"{{EndDate}}\" RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode1}}\" IsRoom = \"true\"/>\n      <ota:InvCounts>\n        <ota:InvCount CountType = \"2\" Count = \"9\"/>\n      </ota:InvCounts>\n    </ota:Inventory>\n    \n    <ota:Inventory>\n      <ota:StatusApplicationControl Start = \"{{StartDate}}\" End = \"{{EndDate}}\" RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode2}}\" IsRoom = \"true\"/>\n      <ota:InvCounts>\n        <ota:InvCount CountType = \"2\" Count = \"9\"/>\n      </ota:InvCounts>\n    </ota:Inventory>\n    \n  </ota:Inventories>\n</ota:OTA_HotelInvCountNotifRQ>\n\n</soap:Body>\n</soap:Envelope>\n"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Update availability"
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelInvCountNotif) - Wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99da692b-ca4a-43da-ac4f-68a244d563f3",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "43330b6a-9833-4eb0-bb23-47a5703b8f31",
								"exec": [
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"76876876\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00142835\";",
									"}",
									"else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var hotelcode = \"00019091\";    ",
									"}",
									"",
									"var password = \"qa1\";",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n          <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n<soap:Body>\n\n<ota:OTA_HotelInvCountNotifRQ EchoToken=\"abc\" TimeStamp=\"{{Date}}\" Version=\"1.0\">\n  <ota:Inventories HotelCode = \"{{HotelCode}}\">\n  \n    <ota:Inventory>\n      <ota:StatusApplicationControl Start = \"{{StartDate}}\" End = \"{{EndDate}}\" RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode1}}\" IsRoom = \"true\"/>\n      <ota:InvCounts>\n        <ota:InvCount CountType = \"2\" Count = \"9\"/>\n      </ota:InvCounts>\n    </ota:Inventory>\n    \n    <ota:Inventory>\n      <ota:StatusApplicationControl Start = \"{{StartDate}}\" End = \"{{EndDate}}\" RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode2}}\" IsRoom = \"true\"/>\n      <ota:InvCounts>\n        <ota:InvCount CountType = \"2\" Count = \"9\"/>\n      </ota:InvCounts>\n    </ota:Inventory>\n    \n  </ota:Inventories>\n</ota:OTA_HotelInvCountNotifRQ>\n\n</soap:Body>\n</soap:Envelope>\n"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Update availability"
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelInvCountNotif) - Invalid username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99da692b-ca4a-43da-ac4f-68a244d563f3",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dd3efe23-2b01-4468-aff8-8616aca43b76",
								"exec": [
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"qanew\";",
									"var password = \"qa\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"001428\";",
									"var password = \"password\";",
									"}",
									"else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"001428\";",
									"var password = \"password\";   ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n          <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n<soap:Body>\n\n<ota:OTA_HotelInvCountNotifRQ EchoToken=\"abc\" TimeStamp=\"{{Date}}\" Version=\"1.0\">\n  <ota:Inventories HotelCode = \"{{HotelCode}}\">\n  \n    <ota:Inventory>\n      <ota:StatusApplicationControl Start = \"{{StartDate}}\" End = \"{{EndDate}}\" RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode1}}\" IsRoom = \"true\"/>\n      <ota:InvCounts>\n        <ota:InvCount CountType = \"2\" Count = \"9\"/>\n      </ota:InvCounts>\n    </ota:Inventory>\n    \n    <ota:Inventory>\n      <ota:StatusApplicationControl Start = \"{{StartDate}}\" End = \"{{EndDate}}\" RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode2}}\" IsRoom = \"true\"/>\n      <ota:InvCounts>\n        <ota:InvCount CountType = \"2\" Count = \"9\"/>\n      </ota:InvCounts>\n    </ota:Inventory>\n    \n  </ota:Inventories>\n</ota:OTA_HotelInvCountNotifRQ>\n\n</soap:Body>\n</soap:Envelope>\n"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Update availability"
					},
					"response": []
				},
				{
					"name": "Get Availabilities(HotelInvCountRQ)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "598c606d-c9c5-436a-b8c5-40ddeae1a1b4",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									"",
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"var hotelcode = \"76876876\";",
									"var RoomTypeCode1 = \"09836\";",
									"var RoomTypeCode2 = \"09868\";",
									"} ",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"var hotelcode = \"00142835\";",
									"var RoomTypeCode1 = \"321942\";",
									"var RoomTypeCode2 = \"283023\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"var hotelcode = \"00019091\"; ",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"393333\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c5ee397-460b-4d7e-b249-02f3a250410a",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var count1 = postman.getEnvironmentVariable('count1');",
									"var count2 = postman.getEnvironmentVariable('count2');",
									"",
									"var roomtype1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var getcount1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"var getcount2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains first Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode1;",
									"pm.expect(roomtype1).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains second Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode2;",
									"pm.expect(roomtype2).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties for first Roomtypecode - Available for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=0;i<20; i++)",
									"{",
									"if(getcount1 == count1 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties for second Roomtypecode - Available for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=20;i<40; i++)",
									"{",
									"if(getcount2 == count2 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelInvCountRQ EchoToken=\"abc\" TimeStamp=\"{{Date}}\" Version=\"1.0\">\n\t\t<ota:HotelInvCountRequests>\n\t\t\t<ota:HotelInvCountRequest>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\" />\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/>\n\t\t\t\t<ota:RoomTypeCandidates>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode1}}\"/>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode2}}\"/>\n\t\t\t\t</ota:RoomTypeCandidates>\n\t\t\t</ota:HotelInvCountRequest>\n\t\t</ota:HotelInvCountRequests>\n\t</ota:OTA_HotelInvCountRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get availability data for a given partner and rooms between start and end date."
					},
					"response": []
				},
				{
					"name": "Get Availabilities(HotelInvCountRQ) - Wrong Date format",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ce81182-f631-4a5d-9853-8557bf348262",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error: 400\", function () {",
									"var expected = \"400\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error message as expected to enter correct date format 'Y-m-d'\", function () {",
									"var expected = \"Wrong date format. Expected format is `Y-m-d`\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "07c1dcd7-db9b-4b8b-92c5-b66126d48e06",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var startdate = new Date();",
									"startdate.setDate(startdate.getDate() + 119);",
									"postman.setEnvironmentVariable(\"StartDate\",startdate)",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelInvCountRQ EchoToken=\"abc\" TimeStamp=\"{{Date}}\" Version=\"1.0\">\n\t\t<ota:HotelInvCountRequests>\n\t\t\t<ota:HotelInvCountRequest>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\" />\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/>\n\t\t\t\t<ota:RoomTypeCandidates>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode1}}\"/>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode2}}\"/>\n\t\t\t\t</ota:RoomTypeCandidates>\n\t\t\t</ota:HotelInvCountRequest>\n\t\t</ota:HotelInvCountRequests>\n\t</ota:OTA_HotelInvCountRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get availability data for a given partner and rooms between start and end date."
					},
					"response": []
				},
				{
					"name": "Get Availabilities(HotelInvCountRQ) - StartDate > EndDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ce81182-f631-4a5d-9853-8557bf348262",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 400 - Bad request\", function () {",
									"var contains = false;",
									"var expected = \"400\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a67467f1-7b13-4504-ae05-700962ab2921",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 40);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelInvCountRQ EchoToken=\"abc\" TimeStamp=\"{{Date}}\" Version=\"1.0\">\n\t\t<ota:HotelInvCountRequests>\n\t\t\t<ota:HotelInvCountRequest>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\" />\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/>\n\t\t\t\t<ota:RoomTypeCandidates>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode1}}\"/>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode2}}\"/>\n\t\t\t\t</ota:RoomTypeCandidates>\n\t\t\t</ota:HotelInvCountRequest>\n\t\t</ota:HotelInvCountRequests>\n\t</ota:OTA_HotelInvCountRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get availability data for a given partner and rooms between start and end date."
					},
					"response": []
				},
				{
					"name": "Get Availabilities(HotelInvCountRQ) - No Partner code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ce81182-f631-4a5d-9853-8557bf348262",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a9b7b69a-2d21-4d44-ad81-c9b298feac29",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									"",
									"var hotelcode = \"\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelInvCountRQ EchoToken=\"abc\" TimeStamp=\"{{Date}}\" Version=\"1.0\">\n\t\t<ota:HotelInvCountRequests>\n\t\t\t<ota:HotelInvCountRequest>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\" />\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/>\n\t\t\t\t<ota:RoomTypeCandidates>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode1}}\"/>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode2}}\"/>\n\t\t\t\t</ota:RoomTypeCandidates>\n\t\t\t</ota:HotelInvCountRequest>\n\t\t</ota:HotelInvCountRequests>\n\t</ota:OTA_HotelInvCountRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get availability data for a given partner and rooms between start and end date."
					},
					"response": []
				},
				{
					"name": "Get Availabilities(HotelInvCountRQ) - Wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ce81182-f631-4a5d-9853-8557bf348262",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7b4a8d18-620b-41d2-ad41-f9132894cb7b",
								"exec": [
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"76876876\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00142835\";",
									"}",
									"else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var hotelcode = \"00019091\";    ",
									"}",
									"",
									"var password = \"qa1\";",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelInvCountRQ EchoToken=\"abc\" TimeStamp=\"{{Date}}\" Version=\"1.0\">\n\t\t<ota:HotelInvCountRequests>\n\t\t\t<ota:HotelInvCountRequest>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\" />\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/>\n\t\t\t\t<ota:RoomTypeCandidates>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode1}}\"/>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode2}}\"/>\n\t\t\t\t</ota:RoomTypeCandidates>\n\t\t\t</ota:HotelInvCountRequest>\n\t\t</ota:HotelInvCountRequests>\n\t</ota:OTA_HotelInvCountRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get availability data for a given partner and rooms between start and end date."
					},
					"response": []
				},
				{
					"name": "Get Availabilities(HotelInvCountRQ) - Invalid username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ce81182-f631-4a5d-9853-8557bf348262",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "20d98347-f468-4615-885a-5b50942b1c87",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"qanew\";",
									"var password = \"qa\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"001428\";",
									"var password = \"password\";",
									"}",
									"else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"001428\";",
									"var password = \"password\";   ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelInvCountRQ EchoToken=\"abc\" TimeStamp=\"{{Date}}\" Version=\"1.0\">\n\t\t<ota:HotelInvCountRequests>\n\t\t\t<ota:HotelInvCountRequest>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\" />\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/>\n\t\t\t\t<ota:RoomTypeCandidates>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode1}}\"/>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode2}}\"/>\n\t\t\t\t</ota:RoomTypeCandidates>\n\t\t\t</ota:HotelInvCountRequest>\n\t\t</ota:HotelInvCountRequests>\n\t</ota:OTA_HotelInvCountRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get availability data for a given partner and rooms between start and end date."
					},
					"response": []
				},
				{
					"name": "Get Bookings(ReadRQ)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7ea307fd-7489-456b-8a6b-5695d844d39b",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() - 5);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 3);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"var hotelcode = \"76876876\";",
									"",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"var hotelcode = \"00142835\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"var hotelcode = \"00019091\"; ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate);",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7cfeb2b9-a8a7-4af8-8978-250b1dcb3a73",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Success\", function () {",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: ReservationsList\", function () {",
									"var expected = \"ReservationsList\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_ReadRQ EchoToken=\"abc\" TimeStamp=\"{{Date}}\" Version=\"1.0\">\n\t\t<ota:ReadRequests>\n\t\t\t<ota:HotelReadRequest HotelCode = \"{{HotelCode}}\">\n\t\t\t\t<ota:SelectionCriteria Start = \"{{StartDate}}\" End = \"{{EndDate}}\" DateType = \"LastUpdateDate\"/>\n\t\t\t</ota:HotelReadRequest>\n\t\t</ota:ReadRequests>\n\t</ota:OTA_ReadRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get booking data for a given partner between start & end date."
					},
					"response": []
				},
				{
					"name": "Get Bookings(ReadRQ) - StartDate > EndDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "240dc66d-4e6c-4965-adbe-7e14cf184e2c",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 400 - Bad request\", function () {",
									"var contains = false;",
									"var expected = \"400\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "09e6023d-3140-4521-9da3-9d2745d75fca",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 40);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_ReadRQ EchoToken=\"abc\" TimeStamp=\"{{Date}}\" Version=\"1.0\">\n\t\t<ota:ReadRequests>\n\t\t\t<ota:HotelReadRequest HotelCode = \"{{HotelCode}}\">\n\t\t\t\t<ota:SelectionCriteria Start = \"{{StartDate}}\" End = \"2019-05-30T23:49:12Z\" DateType = \"LastUpdateDate\"/>\n\t\t\t</ota:HotelReadRequest>\n\t\t</ota:ReadRequests>\n\t</ota:OTA_ReadRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get booking data for a given partner between start & end date."
					},
					"response": []
				},
				{
					"name": "Get Bookings(ReadRQ) - No Partner Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "240dc66d-4e6c-4965-adbe-7e14cf184e2c",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b3bd11d2-43cc-4ab2-baa7-ed03337023d8",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									"",
									"var hotelcode = \"\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_ReadRQ EchoToken=\"abc\" TimeStamp=\"{{Date}}\" Version=\"1.0\">\n\t\t<ota:ReadRequests>\n\t\t\t<ota:HotelReadRequest HotelCode = \"{{HotelCode}}\">\n\t\t\t\t<ota:SelectionCriteria Start = \"2019-04-01T05:49:12Z\" End = \"2019-12-06T23:49:12Z\" DateType = \"LastUpdateDate\"/>\n\t\t\t</ota:HotelReadRequest>\n\t\t</ota:ReadRequests>\n\t</ota:OTA_ReadRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get booking data for a given partner between start & end date."
					},
					"response": []
				},
				{
					"name": "Get Bookings(ReadRQ) - Wrong Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "240dc66d-4e6c-4965-adbe-7e14cf184e2c",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "87e32e77-33d5-42f9-b473-af8d9dd380ac",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"76876876\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00142835\";",
									"}",
									"else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var hotelcode = \"00019091\";    ",
									"}",
									"",
									"var password = \"qa1\";",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_ReadRQ EchoToken=\"abc\" TimeStamp=\"{{Date}}\" Version=\"1.0\">\n\t\t<ota:ReadRequests>\n\t\t\t<ota:HotelReadRequest HotelCode = \"{{HotelCode}}\">\n\t\t\t\t<ota:SelectionCriteria Start = \"2019-04-01T05:49:12Z\" End = \"2019-12-06T23:49:12Z\" DateType = \"LastUpdateDate\"/>\n\t\t\t</ota:HotelReadRequest>\n\t\t</ota:ReadRequests>\n\t</ota:OTA_ReadRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get booking data for a given partner between start & end date."
					},
					"response": []
				},
				{
					"name": "Get Bookings(ReadRQ) - Invalid Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "240dc66d-4e6c-4965-adbe-7e14cf184e2c",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "988970fa-3227-4750-9161-fc8bc656edc3",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"qanew\";",
									"var password = \"qa\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"001428\";",
									"var password = \"password\";",
									"}",
									"else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"001428\";",
									"var password = \"password\";   ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_ReadRQ EchoToken=\"abc\" TimeStamp=\"{{Date}}\" Version=\"1.0\">\n\t\t<ota:ReadRequests>\n\t\t\t<ota:HotelReadRequest HotelCode = \"{{HotelCode}}\">\n\t\t\t\t<ota:SelectionCriteria Start = \"2019-04-01T05:49:12Z\" End = \"2019-12-06T23:49:12Z\" DateType = \"LastUpdateDate\"/>\n\t\t\t</ota:HotelReadRequest>\n\t\t</ota:ReadRequests>\n\t</ota:OTA_ReadRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get booking data for a given partner between start & end date."
					},
					"response": []
				}
			]
		},
		{
			"name": "Simple Booking - SBX API",
			"item": [
				{
					"name": "PIng",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n  <soap:Body>\n  \t\n\t<ota:OTA_PingRQ EchoToken=\"123\" Version=\"1.0\" TimeStamp=\"2016-05-26T11:11:50-04:00\" xmlns=\"http://www.opentravel.org/OTA/2003/05\">\n      <ota:EchoData>Are you there?</ota:EchoData>\n\t</ota:OTA_PingRQ>\n\t\n  </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Rooms(HotelAvailRQ)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5da26ced-ce04-42da-8990-85b91cfa04e2",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "15600f50-796a-478d-bd1e-7dc0e31a8009",
								"exec": [
									"if (pm.environment.name == \"SANDBOX_ENV\") {",
									"    var username = \"simplebooking\";",
									"    var password = \"WkttRyMk77bYyFvy\";",
									"    var hotelcode = \"6532123\";",
									"} else if (pm.environment.name == \"PREPROD\") {",
									"    var username = \"00142835\";",
									"    var password = \"password\";",
									"    var hotelcode = \"00142835\";",
									"} else if (pm.environment.name == \"DEVINT\",\"LOCAL\") {",
									"    var username = \"yieldplanet\";",
									"    var password = \"password\";",
									"    var hotelcode = \"00019091\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelAvailRQ>\n\t\t<ota:AvailRequestSegments>\n\t\t\t<ota:AvailRequestSegment AvailReqType = \"Room\">\n\t\t\t\t<ota:HotelSearchCriteria>\n\t\t\t\t\t<ota:Criterion>\n\t\t\t\t\t\t<ota:HotelRef HotelCode=\"{{HotelCode}}\" />\n\t\t\t\t\t</ota:Criterion>\n\t\t\t\t</ota:HotelSearchCriteria>\n\t\t\t</ota:AvailRequestSegment>\n\t\t</ota:AvailRequestSegments>\n\t</ota:OTA_HotelAvailRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Room Rates(HotelRateAmountNotif) - Wrong request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e771bb7a-5f41-4fd2-a1ad-a96e97ed44b8",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains Error: 400\", function () {",
									"var expected = \"400\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string description: InvTypeCode\", function () {",
									"var expected = \"InvTypeCode\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "effb7fac-8a81-4954-923a-9b41a5d78ebe",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"var month = date2.getMonth() + 1;",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 71);",
									"var month = date3.getMonth() + 1;",
									"var startdate2 = date3.getFullYear() + \"-\" + month + \"-\" + date3.getDate();",
									"",
									"var date4 = new Date();",
									"date4.setDate(date4.getDate() + 90);",
									"var month = date4.getMonth() + 1;",
									"var enddate2 = date4.getFullYear() + \"-\" + month + \"-\" + date4.getDate();",
									"",
									"var Price1 = \"120\";",
									"var Price2 = \"130\";",
									"var Price3 = \"90\";",
									"var Price4 = \"95\";",
									"postman.setEnvironmentVariable(\"Price1\", Price1);",
									"postman.setEnvironmentVariable(\"Price2\", Price2);",
									"postman.setEnvironmentVariable(\"Price3\", Price3);",
									"postman.setEnvironmentVariable(\"Price4\", Price4);",
									"postman.setEnvironmentVariable(\"StartDate1\",startdate1);",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate1);",
									"postman.setEnvironmentVariable(\"StartDate2\",startdate2);",
									"postman.setEnvironmentVariable(\"EndDate2\",enddate2);",
									"",
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var username = \"simplebooking\";",
									"var password = \"WkttRyMk77bYyFvy\";",
									"var hotelcode = \"6532123\";",
									"var RoomTypeCode1 = \"541322\";",
									"var RoomTypeCode2 = \"541323\";",
									"} ",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"var hotelcode = \"00142835\";",
									"var RoomTypeCode1 = \"321942\";",
									"var RoomTypeCode2 = \"283023\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"var hotelcode = \"00019091\"; ",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"393333\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n    <soap:Header>\n        <wss:Security soap:mustUnderstand = \"1\">\n            <wss:UsernameToken>\n                <wss:Username>{{username}}</wss:Username>\n                <wss:Password>{{password}}</wss:Password>\n            </wss:UsernameToken>\n        </wss:Security>\n    </soap:Header>\n    <soap:Body>\n        <ota:OTA_HotelRateAmountNotifRQ>\n            <ota:RateAmountMessages HotelCode = \"{{HotelCode}}\">\n                <ota:RateAmountMessage>\n                    <ota:StatusApplicationControl RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode1}}\" IsRoom = \"true\"/>\n                    <ota:Rates>\n                        <ota:Rate Start = \"{{StartDate1}}\" End = \"{{EndDate1}}\" CurrencyCode = \"EUR\">\n                            <ota:BaseByGuestAmts>\n                                <ota:BaseByGuestAmt AmountAfterTax = \"{{Price1}}\"/>\n                            </ota:BaseByGuestAmts>\n                        </ota:Rate>\n                        <ota:Rate Start = \"{{StartDate2}}\" End = \"{{EndDate2}}\" CurrencyCode = \"EUR\">\n                            <ota:BaseByGuestAmts>\n                                <ota:BaseByGuestAmt AmountAfterTax = \"{{Price2}}\"/>\n                            </ota:BaseByGuestAmts>\n                        </ota:Rate>\n                    </ota:Rates>\n                    <ota:StatusApplicationControl RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode2}}\" IsRoom = \"true\"/>\n                    <ota:Rates>\n                        <ota:Rate Start = \"{{StartDate1}}\" End = \"{{EndDate1}}\" CurrencyCode = \"EUR\">\n                            <ota:BaseByGuestAmts>\n                                <ota:BaseByGuestAmt AmountAfterTax = \"{{Price3}}\"/>\n                            </ota:BaseByGuestAmts>\n                        </ota:Rate>\n                        <ota:Rate Start = \"{{StartDate2}}\" End = \"{{EndDate2}}\" CurrencyCode = \"EUR\">\n                            <ota:BaseByGuestAmts>\n                                <ota:BaseByGuestAmt AmountAfterTax = \"{{Price4}}\"/>\n                            </ota:BaseByGuestAmts>\n                        </ota:Rate>\n                    </ota:Rates>\n                </ota:RateAmountMessage>\n            </ota:RateAmountMessages>\n        </ota:OTA_HotelRateAmountNotifRQ>\n    </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Update rates for a room"
					},
					"response": []
				},
				{
					"name": "Update Room Rates(HotelRateAmountNotif)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e771bb7a-5f41-4fd2-a1ad-a96e97ed44b8",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "effb7fac-8a81-4954-923a-9b41a5d78ebe",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"var month = date2.getMonth() + 1;",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 71);",
									"var month = date3.getMonth() + 1;",
									"var startdate2 = date3.getFullYear() + \"-\" + month + \"-\" + date3.getDate();",
									"",
									"var date4 = new Date();",
									"date4.setDate(date4.getDate() + 90);",
									"var month = date4.getMonth() + 1;",
									"var enddate2 = date4.getFullYear() + \"-\" + month + \"-\" + date4.getDate();",
									"",
									"var Price1 = \"120\";",
									"var Price2 = \"130\";",
									"var Price3 = \"90\";",
									"var Price4 = \"95\";",
									"postman.setEnvironmentVariable(\"Price1\", Price1);",
									"postman.setEnvironmentVariable(\"Price2\", Price2);",
									"postman.setEnvironmentVariable(\"Price3\", Price3);",
									"postman.setEnvironmentVariable(\"Price4\", Price4);",
									"postman.setEnvironmentVariable(\"StartDate1\",startdate1);",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate1);",
									"postman.setEnvironmentVariable(\"StartDate2\",startdate2);",
									"postman.setEnvironmentVariable(\"EndDate2\",enddate2);",
									"",
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var username = \"simplebooking\";",
									"var password = \"WkttRyMk77bYyFvy\";",
									"var hotelcode = \"6532123\";",
									"var RoomTypeCode1 = \"541322\";",
									"var RoomTypeCode2 = \"541323\";",
									"} ",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"var hotelcode = \"00142835\";",
									"var RoomTypeCode1 = \"321942\";",
									"var RoomTypeCode2 = \"283023\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"var hotelcode = \"00019091\"; ",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"393333\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n    <soap:Header>\n        <wss:Security soap:mustUnderstand = \"1\">\n            <wss:UsernameToken>\n                <wss:Username>{{username}}</wss:Username>\n                <wss:Password>{{password}}</wss:Password>\n            </wss:UsernameToken>\n        </wss:Security>\n    </soap:Header>\n    <soap:Body>\n        <ota:OTA_HotelRateAmountNotifRQ>\n            <ota:RateAmountMessages HotelCode = \"{{HotelCode}}\">\n                <ota:RateAmountMessage>\n                    <ota:StatusApplicationControl RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode1}}\" IsRoom = \"true\"/>\n                    <ota:Rates>\n                        <ota:Rate Start = \"{{StartDate1}}\" End = \"{{EndDate1}}\" CurrencyCode = \"EUR\">\n                            <ota:BaseByGuestAmts>\n                                <ota:BaseByGuestAmt AmountAfterTax = \"{{Price1}}\"/>\n                            </ota:BaseByGuestAmts>\n                        </ota:Rate>\n                        <ota:Rate Start = \"{{StartDate2}}\" End = \"{{EndDate2}}\" CurrencyCode = \"EUR\">\n                            <ota:BaseByGuestAmts>\n                                <ota:BaseByGuestAmt AmountAfterTax = \"{{Price2}}\"/>\n                            </ota:BaseByGuestAmts>\n                        </ota:Rate>\n                    </ota:Rates>\n                    </ota:RateAmountMessage>\n                    <ota:RateAmountMessage>\n                    <ota:StatusApplicationControl RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode2}}\" IsRoom = \"true\"/>\n                    <ota:Rates>\n                        <ota:Rate Start = \"{{StartDate1}}\" End = \"{{EndDate1}}\" CurrencyCode = \"EUR\">\n                            <ota:BaseByGuestAmts>\n                                <ota:BaseByGuestAmt AmountAfterTax = \"{{Price3}}\"/>\n                            </ota:BaseByGuestAmts>\n                        </ota:Rate>\n                        <ota:Rate Start = \"{{StartDate2}}\" End = \"{{EndDate2}}\" CurrencyCode = \"EUR\">\n                            <ota:BaseByGuestAmts>\n                                <ota:BaseByGuestAmt AmountAfterTax = \"{{Price4}}\"/>\n                            </ota:BaseByGuestAmts>\n                        </ota:Rate>\n                    </ota:Rates>\n                </ota:RateAmountMessage>\n            </ota:RateAmountMessages>\n        </ota:OTA_HotelRateAmountNotifRQ>\n    </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Update rates for a room"
					},
					"response": []
				},
				{
					"name": "Read Room Rates(HotelRatePlanRQ)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9766c4eb-37d2-4cbb-b655-a27072593f93",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 90);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"simplebooking\";",
									"var password = \"WkttRyMk77bYyFvy\";",
									"var hotelcode = \"6532123\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"var hotelcode = \"00142835\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"var hotelcode = \"00019091\"; ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6675d827-404e-4838-8dae-2ad642239f65",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var price1 = postman.getEnvironmentVariable('Price1');",
									"var price2 = postman.getEnvironmentVariable('Price2');",
									"var price3 = postman.getEnvironmentVariable('Price3');",
									"var price4 = postman.getEnvironmentVariable('Price4');",
									"",
									"var roomtype1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['0']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['40']['$']['InvTypeCode'];",
									"var getprice1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['0']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax'];",
									"var getprice2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['20']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax'];",
									"var getprice3 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['40']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax'];",
									"var getprice4 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['60']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains first Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode1;",
									"pm.expect(roomtype1).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains second Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode2;",
									"pm.expect(roomtype2).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read room rates for first Roomtypecode - Same for first 20 consecutive days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=0;i<20; i++)",
									"{",
									"if(getprice1 == price1 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read room rates for first Roomtypecode - Same for 21 to 40 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=20;i<40; i++)",
									"{",
									"if(getprice2 == price2 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read room rates for second Roomtypecode - Same for first 20 consecutive days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=40;i<60; i++)",
									"{",
									"if(getprice3 == price3 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read room rates for second Roomtypecode - Same for 21 to 40 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=60;i<80; i++)",
									"{",
									"if(getprice4 == price4 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelRatePlanRQ EchoToken=\"echo\"> \n\t\t<ota:RatePlans>\n\t\t\t<ota:RatePlan>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\"/>\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/> \n\t\t\t\t<ota:RatePlanCandidates>\n\t\t\t\t\t<ota:RatePlanCandidate RatePlanCode = \"SBX\"/> \n\t\t\t\t</ota:RatePlanCandidates>\n\t\t\t</ota:RatePlan>\n\t\t</ota:RatePlans>\n\t</ota:OTA_HotelRatePlanRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get rates for the given partner between a start and end date"
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelInvCountNotif)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99da692b-ca4a-43da-ac4f-68a244d563f3",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8e968c46-a238-4ef9-a89b-4c87c9760aa6",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									"",
									"if(pm.environment.name==\"SANDBOX_ENV\")",
									"{",
									"var username = \"simplebooking\";",
									"var password = \"WkttRyMk77bYyFvy\";",
									"var hotelcode = \"6532123\";",
									"var RoomTypeCode1 = \"541322\";",
									"var RoomTypeCode2 = \"541323\";",
									"var count1 = 5;",
									"var count2 = 10",
									"",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"var hotelcode = \"00142835\";",
									"var RoomTypeCode1 = \"321942\";",
									"var RoomTypeCode2 = \"283023\";",
									"var count1 = 5;",
									"var count2 = 10",
									"    ",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"var hotelcode = \"00019091\";",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"393333\";",
									"var count1 = 5;",
									"var count2 = 10;",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"count1\", count1);",
									"postman.setEnvironmentVariable(\"count2\", count2);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\",RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n    <soap:Header>\n        <wss:Security soap:mustUnderstand = \"1\">\n            <wss:UsernameToken>\n                <wss:Username>{{username}}</wss:Username>\n                <wss:Password>{{password}}</wss:Password>\n            </wss:UsernameToken>\n        </wss:Security>\n    </soap:Header>\n    <soap:Body>\n        <ota:OTA_HotelInvCountNotifRQ>\n            <ota:Inventories HotelCode = \"{{HotelCode}}\">\n                <ota:Inventory>\n                    <ota:StatusApplicationControl Start = \"{{StartDate}}\" End = \"{{EndDate}}\" RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode1}}\" IsRoom = \"true\"/>\n                    <ota:InvCounts>\n                        <ota:InvCount CountType = \"2\" Count = \"{{count1}}\"/>\n                    </ota:InvCounts>\n                </ota:Inventory>\n                <ota:Inventory>\n                    <ota:StatusApplicationControl Start = \"{{StartDate}}\" End = \"{{EndDate}}\" RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode2}}\" IsRoom = \"true\"/>\n                    <ota:InvCounts>\n                        <ota:InvCount CountType = \"2\" Count = \"{{count2}}\"/>\n                    </ota:InvCounts>\n                </ota:Inventory>\n            </ota:Inventories>\n        </ota:OTA_HotelInvCountNotifRQ>\n    </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Update availability"
					},
					"response": []
				},
				{
					"name": "Get Availabilities(HotelInvCountRQ)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "598c606d-c9c5-436a-b8c5-40ddeae1a1b4",
								"exec": [
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									"",
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var username = \"simplebooking\";",
									"var password = \"WkttRyMk77bYyFvy\";",
									"var hotelcode = \"6532123\";",
									"var RoomTypeCode1 = \"541322\";",
									"var RoomTypeCode2 = \"541323\";",
									"} ",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"var hotelcode = \"00142835\";",
									"var RoomTypeCode1 = \"321942\";",
									"var RoomTypeCode2 = \"283023\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"var hotelcode = \"00019091\"; ",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"393333\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c5ee397-460b-4d7e-b249-02f3a250410a",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var count1 = postman.getEnvironmentVariable('count1');",
									"var count2 = postman.getEnvironmentVariable('count2');",
									"",
									"var roomtype1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var getcount1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"var getcount2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains HoteCode value\", function () {",
									"expected = HotelCode;",
									"  pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains first Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode1;",
									"pm.expect(roomtype1).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains second Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode2;",
									"pm.expect(roomtype2).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties for first Roomtypecode - Available for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=0;i<20; i++)",
									"{",
									"if(getcount1 == count1 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties for second Roomtypecode - Available for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=20;i<40; i++)",
									"{",
									"if(getcount2 == count2 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelInvCountRQ>\n\t\t<ota:HotelInvCountRequests>\n\t\t\t<ota:HotelInvCountRequest>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\" />\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/>\n\t\t\t\t<ota:RoomTypeCandidates>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode1}}\"/>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode2}}\"/>\n\t\t\t\t</ota:RoomTypeCandidates>\n\t\t\t</ota:HotelInvCountRequest>\n\t\t</ota:HotelInvCountRequests>\n\t</ota:OTA_HotelInvCountRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get availability data for a given partner and rooms between start and end date."
					},
					"response": []
				},
				{
					"name": "Push booking - Commit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "240dc66d-4e6c-4965-adbe-7e14cf184e2c",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains status : success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Doesn't contain validation info error message\", function () {",
									"var expected = \"This form should not contain extra fields.\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									"",
									"pm.test(\"Doesn't contain date info error message\", function () {",
									"var expected = \"This value is not valid.\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "82015cff-f2e8-4851-99e5-26675f90be51",
								"exec": [
									"var randomId1 = Math.floor(Math.random() * 200000000);",
									"postman.setEnvironmentVariable(\"randomId1\", randomId1)",
									"",
									"var voucherNumber1 = Math.floor(Math.random() * 20000000);",
									"postman.setEnvironmentVariable(\"voucherNumber1\", voucherNumber1)",
									"",
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 53);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 54);",
									"var month = date3.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date3.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date3.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date3.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date3.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate1 = date3.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate);",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate1);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"TTDNpD3ujbxVSpycMLy3bgJGcPrXCZTRdmcZzmK4\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"wjrhqYajKs6M5ug7ygFDymnLwxc5f97ryhmq9FE7\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"QexP2eYZRwPcyB5x5LjpnqzNw2U4mWDPzat5Fds7\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\",username);",
									"postman.setEnvironmentVariable(\"password\",password);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "QexP2eYZRwPcyB5x5LjpnqzNw2U4mWDPzat5Fds7",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"booking\":{\n      \"partnerCode\":\"{{HotelCode}}\",\n      \"status\":\"Commit\",\n      \"reservationId\":\"RESA-{{randomId1}}\",\n      \"voucherNumber\": \"{{voucherNumber1}}\",\n      \"experienceId\":\"{{ExperienceId}}\",\n      \"createDate\":\"{{Date}}\",\n      \"lastModifyDate\":\"{{Date}}\",\n      \"dateStart\":\"{{StartDate}}\",\n      \"dateEnd\":\"{{EndDate1}}\",\n      \"totalAmount\":200,\n      \"currency\":\"EUR\",\n      \"requests\":\"Something i want to request\",\n      \"comments\":\"Something i need to comment about me and disabilities\",\n      \"roomTypes\":[\n         {\n            \"roomTypeCode\":\"{{RoomTypeCode1}}\",\n            \"totalAmount\":200,\n            \"currency\":\"EUR\",\n            \"rates\":[\n               {\n                  \"date\":\"{{StartDate}}\",\n                  \"amount\":0,\n                  \"currency\":\"EUR\"\n               },\n               {\n                  \"date\":\"{{EndDate}}\",\n                  \"amount\":100,\n                  \"currency\":\"EUR\"\n               }\n            ],\n            \"guests\":[\n               {\n                  \"isMain\":true,\n                  \"age\":23,\n                  \"name\":\"Carles\",\n                  \"surname\":\"Puigdemont\",\n                  \"email\":\"carles.puigdemont@brussels.com\",\n                  \"phone\":\"454325454\",\n                  \"address\":\"Brussels\",\n                  \"city\":\"Brussels\",\n                  \"zip\":\"R9R6+QX\",\n                  \"state\":\"Brussels\",\n                  \"country\":\"be\",\n                  \"countryCode\":\"Belgium\"\n               },\n               {\n                  \"isMain\":false,\n                  \"age\":36,\n                  \"name\":\"Pepito\",\n                  \"surname\":\"Palotes\",\n                  \"email\":\"pepito.palotes@brussels.com\",\n                  \"phone\":\"454325454\",\n                  \"address\":\"Brussels\",\n                  \"city\":\"Brussels\",\n                  \"zip\":\"R9R6+QX\",\n                  \"state\":\"Brussels\",\n                  \"country\":\"be\",\n                  \"countryCode\":\"Belgium\"\n               }\n            ]\n         }\n      ]\n   }\n}"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/PushBookings",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"PushBookings"
							]
						},
						"description": "Get booking data for a given partner between start & end date."
					},
					"response": []
				},
				{
					"name": "Get Bookings(ReadRQ)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "240dc66d-4e6c-4965-adbe-7e14cf184e2c",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Success\", function () {",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: ReservationsList\", function () {",
									"var expected = \"ReservationsList\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "82015cff-f2e8-4851-99e5-26675f90be51",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() - 3);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\"+01:00\";",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 1);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\"+01:00\";",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"simplebooking\";",
									"var password = \"WkttRyMk77bYyFvy\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_ReadRQ>\n\t\t<ota:ReadRequests>\n\t\t\t<ota:HotelReadRequest HotelCode = \"{{HotelCode}}\">\n\t\t\t\t<ota:SelectionCriteria Start = \"{{StartDate}}\" End = \"{{EndDate}}\" DateType = \"LastUpdateDate\"/>\n\t\t\t</ota:HotelReadRequest>\n\t\t</ota:ReadRequests>\n\t</ota:OTA_ReadRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get booking data for a given partner between start & end date."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2ef27077-f184-4366-bc12-988ab4b3390f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fc09f0af-f134-4aae-aa94-61631e8d9304",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "SmartHotel - OTA 2016A",
			"item": [
				{
					"name": "Update Availabilities(HotelInvCountNotif)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f54da45c-39bd-42e5-a147-73a2f90d36b5",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 79);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 98);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"a61ce1a0-cfe9-46cb-948d-cbc8f3f63d00\";",
									"var password = \"Sma180119!\";",
									"var hotelcode = \"12345666\";",
									"var RoomTypeCode2 = \"232457\";",
									"var RoomTypeCode1 = \"232456\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"a61ce1a0-cfe9-46cb-948d-cbc8f3f63d00\";",
									"var password = \"Sma180119!\";",
									"var hotelcode = \"00543681\";",
									"var RoomTypeCode1 = \"974181\";",
									"var RoomTypeCode2 = \"974178\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"smarthotel\";",
									"var password = \"password\";",
									"var hotelcode = \"00019157\";",
									"var RoomTypeCode1 = \"252039\";",
									"var RoomTypeCode2 = \"207902\";  ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "303427c2-df3a-47d0-aaa5-d563b661947f",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains message Success\", function () {",
									"var contains = false;",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test.skip(\"Contains attribute UniqueID\", function () {",
									"var contains = false;",
									"var expected = \"UniqueID\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test.skip(\"Contains attribute Type\", function () {",
									"var contains = false;",
									"var expected = \"Type\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelInvCountNotifRQ EchoToken=\"Example123\" PrimaryLangID=\"eng\" Target=\"Production\" TimeStamp=\"2018-07-29T07:38:54.729Z\" Version=\"1.0\">\n   <POS>\n      <Source>\n          <RequestorID ID=\"{{username}}\" MessagePassword=\"{{password}}\" />\n      </Source>\n   </POS>\n   <Inventories HotelCode=\"{{HotelCode}}\">\n      <Inventory>\n         <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode1}}\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\" Mon=\"true\" Tue=\"true\" Weds=\"true\" />\n         <InvCounts>\n            <InvCount Count=\"5\" CountType=\"1\" />\n         </InvCounts>\n      </Inventory>\n      <Inventory>\n         <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode2}}\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\" Mon=\"true\" Fri=\"true\" />\n         <InvCounts>\n            <InvCount Count=\"5\" CountType=\"1\" />\n         </InvCounts>\n      </Inventory>\n   </Inventories>\n</OTA_HotelInvCountNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/smarthotel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"smarthotel"
							]
						},
						"description": "Update Availability"
					},
					"response": []
				},
				{
					"name": "Update Availabilities - Stop sale(Close)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f54da45c-39bd-42e5-a147-73a2f90d36b5",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 79);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 98);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"a61ce1a0-cfe9-46cb-948d-cbc8f3f63d00\";",
									"var password = \"Sma180119!\";",
									"var hotelcode = \"12345666\";",
									"var RoomTypeCode2 = \"232457\";",
									"var RoomTypeCode1 = \"232456\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"a61ce1a0-cfe9-46cb-948d-cbc8f3f63d00\";",
									"var password = \"Sma180119!\";",
									"var hotelcode = \"00543681\";",
									"var RoomTypeCode1 = \"974181\";",
									"var RoomTypeCode2 = \"974178\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"smarthotel\";",
									"var password = \"password\";",
									"var hotelcode = \"00019157\";",
									"var RoomTypeCode1 = \"252039\";",
									"var RoomTypeCode2 = \"207902\";  ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "303427c2-df3a-47d0-aaa5-d563b661947f",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains message Success\", function () {",
									"var contains = false;",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test.skip(\"Contains attribute UniqueID\", function () {",
									"var contains = false;",
									"var expected = \"UniqueID\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test.skip(\"Contains attribute Type\", function () {",
									"var contains = false;",
									"var expected = \"Type\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelBookingRuleNotifRQ EchoToken=\"Example123\" PrimaryLangID=\"eng\" Target=\"Production\" TimeStamp=\"2018-07-29T07:38:54.729Z\" Version=\"1.0\">\n<POS>\n  <Source>\n    <RequestorID ID=\"{{username}}\" MessagePassword=\"{{password}}\"></RequestorID>\n  </Source>\n</POS>\n  <RuleMessages HotelCode=\"{{HotelCode}}\">\n    <RuleMessage>\n      <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode1}}\"\nRatePlanCode=\"1\" RateTier=\"1\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\" Mon=\"true\" Fri=\"true\" />\n      <BookingRules>\n        <BookingRule>\n          <RestrictionStatus Restriction=\"Master\" Status=\"Close\" />\n        </BookingRule>\n      </BookingRules>\n    </RuleMessage>\n  </RuleMessages>\n</OTA_HotelBookingRuleNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/smarthotel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"smarthotel"
							]
						},
						"description": "Update Availability - Stop sale"
					},
					"response": []
				},
				{
					"name": "Update Availabilities - Stop sale(Open) ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f54da45c-39bd-42e5-a147-73a2f90d36b5",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 79);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 98);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"a61ce1a0-cfe9-46cb-948d-cbc8f3f63d00\";",
									"var password = \"Sma180119!\";",
									"var hotelcode = \"12345666\";",
									"var RoomTypeCode2 = \"232457\";",
									"var RoomTypeCode1 = \"232456\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"a61ce1a0-cfe9-46cb-948d-cbc8f3f63d00\";",
									"var password = \"Sma180119!\";",
									"var hotelcode = \"00543681\";",
									"var RoomTypeCode1 = \"974181\";",
									"var RoomTypeCode2 = \"974178\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"smarthotel\";",
									"var password = \"password\";",
									"var hotelcode = \"00019157\";",
									"var RoomTypeCode1 = \"252039\";",
									"var RoomTypeCode2 = \"207902\";  ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "303427c2-df3a-47d0-aaa5-d563b661947f",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains message Success\", function () {",
									"var contains = false;",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test.skip(\"Contains attribute UniqueID\", function () {",
									"var contains = false;",
									"var expected = \"UniqueID\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test.skip(\"Contains attribute Type\", function () {",
									"var contains = false;",
									"var expected = \"Type\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelBookingRuleNotifRQ EchoToken=\"Example123\" PrimaryLangID=\"eng\" Target=\"Production\" TimeStamp=\"2018-07-29T07:38:54.729Z\" Version=\"1.0\">\n<POS>\n  <Source>\n    <RequestorID ID=\"{{username}}\" MessagePassword=\"{{password}}\"></RequestorID>\n  </Source>\n</POS>\n  <RuleMessages HotelCode=\"{{HotelCode}}\">\n    <RuleMessage>\n      <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode1}}\"\nRatePlanCode=\"1\" RateTier=\"1\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\" Mon=\"true\" Fri=\"true\" />\n      <BookingRules>\n        <BookingRule>\n          <RestrictionStatus Restriction=\"Master\" Status=\"Open\" />\n        </BookingRule>\n      </BookingRules>\n    </RuleMessage>\n  </RuleMessages>\n</OTA_HotelBookingRuleNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/smarthotel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"smarthotel"
							]
						},
						"description": "Update Availability - Stop sale "
					},
					"response": []
				},
				{
					"name": "Update Availabilities(HotelInvCountNotif) - Wrong credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f54da45c-39bd-42e5-a147-73a2f90d36b5",
								"exec": [
									"",
									"var password = \"Sma18011\";",
									"",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f036b40a-e414-4edc-bafb-3b0a8a26594f",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelInvCountNotifRQ EchoToken=\"Example123\" PrimaryLangID=\"eng\" Target=\"Production\" TimeStamp=\"2018-07-29T07:38:54.729Z\" Version=\"1.0\">\n   <POS>\n      <Source>\n          <RequestorID ID=\"{{username}}\" MessagePassword=\"{{password}}\" />\n      </Source>\n   </POS>\n   <Inventories HotelCode=\"{{HotelCode}}\">\n      <Inventory>\n         <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode1}}\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\" Mon=\"true\" Fri=\"true\" />\n         <InvCounts>\n            <InvCount Count=\"5\" CountType=\"1\" />\n         </InvCounts>\n      </Inventory>\n   </Inventories>\n</OTA_HotelInvCountNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/smarthotel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"smarthotel"
							]
						},
						"description": "Update Availability"
					},
					"response": []
				},
				{
					"name": "Update Availabilities(HotelInvCountNotif) - No Partner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f54da45c-39bd-42e5-a147-73a2f90d36b5",
								"exec": [
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var password = \"Sma180119!\";",
									"var hotelcode = \"56456546\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var password = \"Sma180119!\";",
									"var hotelcode = \"000306\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var password = \"password\";",
									"var hotelcode = \"09090\"; ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f5b2fa28-0ed9-46db-acd2-02eac6454501",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelInvCountNotifRQ EchoToken=\"Example123\" PrimaryLangID=\"eng\" Target=\"Production\" TimeStamp=\"2018-07-29T07:38:54.729Z\" Version=\"1.0\">\n   <POS>\n      <Source>\n          <RequestorID ID=\"{{username}}\" MessagePassword=\"{{password}}\" />\n      </Source>\n   </POS>\n   <Inventories HotelCode=\"{{HotelCode}}\">\n      <Inventory>\n         <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode1}}\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\" Mon=\"true\" Fri=\"true\" />\n         <InvCounts>\n            <InvCount Count=\"5\" CountType=\"1\" />\n         </InvCounts>\n      </Inventory>\n   </Inventories>\n</OTA_HotelInvCountNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/smarthotel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"smarthotel"
							]
						},
						"description": "Update Availability"
					},
					"response": []
				},
				{
					"name": "Update Availabilities(HotelInvCountNotif) - Wrong Product code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f54da45c-39bd-42e5-a147-73a2f90d36b5",
								"exec": [
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"12345666\";",
									"var RoomTypeCode1 = \"23245\";",
									"",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00543681\";",
									"var RoomTypeCode1 = \"97418\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var hotelcode = \"00019157\";",
									"var RoomTypeCode1 = \"31214\"; ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "709a0f20-b451-4f45-9cc8-64912abe1f41",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains message Success\", function () {",
									"var contains = false;",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test.skip(\"Contains attribute UniqueID\", function () {",
									"var contains = false;",
									"var expected = \"UniqueID\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test.skip(\"Contains attribute Type\", function () {",
									"var contains = false;",
									"var expected = \"Type\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelInvCountNotifRQ EchoToken=\"Example123\" PrimaryLangID=\"eng\" Target=\"Production\" TimeStamp=\"2018-07-29T07:38:54.729Z\" Version=\"1.0\">\n   <POS>\n      <Source>\n          <RequestorID ID=\"{{username}}\" MessagePassword=\"{{password}}\" />\n      </Source>\n   </POS>\n   <Inventories HotelCode=\"{{HotelCode}}\">\n      <Inventory>\n         <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode1}}\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\" Mon=\"true\" Fri=\"true\" />\n         <InvCounts>\n            <InvCount Count=\"5\" CountType=\"1\" />\n         </InvCounts>\n      </Inventory>\n      \n   </Inventories>\n</OTA_HotelInvCountNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/smarthotel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"smarthotel"
							]
						},
						"description": "Update Availability"
					},
					"response": []
				},
				{
					"name": "Update Availabilities(HotelInvCountNotif) - StartDate > EndDate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f54da45c-39bd-42e5-a147-73a2f90d36b5",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 145);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var RoomTypeCode1 = \"232456\";",
									"",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var RoomTypeCode1 = \"974181\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var RoomTypeCode1 = \"252039\"; ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2748bf90-e427-4176-9710-b7782ffd777e",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error description : Start date cannot be greater than end date\", function () {",
									"var contains = false;",
									"var expected = \"Start date cannot be greater than end date\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelInvCountNotifRQ EchoToken=\"Example123\" PrimaryLangID=\"eng\" Target=\"Production\" TimeStamp=\"2018-07-29T07:38:54.729Z\" Version=\"1.0\">\n   <POS>\n      <Source>\n          <RequestorID ID=\"{{username}}\" MessagePassword=\"{{password}}\" />\n      </Source>\n   </POS>\n   <Inventories HotelCode=\"{{HotelCode}}\">\n      <Inventory>\n         <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode1}}\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\" Mon=\"true\" Fri=\"true\" />\n         <InvCounts>\n            <InvCount Count=\"5\" CountType=\"1\" />\n         </InvCounts>\n      </Inventory>\n   </Inventories>\n</OTA_HotelInvCountNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/smarthotel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"smarthotel"
							]
						},
						"description": "Update Availability"
					},
					"response": []
				},
				{
					"name": "Update Availabilities(HotelInvCountNotif) - Wrong Date format",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f54da45c-39bd-42e5-a147-73a2f90d36b5",
								"exec": [
									"var startdate = new Date();",
									"startdate.setDate(startdate.getDate() + 119);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2748bf90-e427-4176-9710-b7782ffd777e",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error description : Wrong date format. Expected format is `Y-m-d`\", function () {",
									"var contains = false;",
									"var expected = \"Wrong date format. Expected format is `Y-m-d`\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelInvCountNotifRQ EchoToken=\"Example123\" PrimaryLangID=\"eng\" Target=\"Production\" TimeStamp=\"2018-07-29T07:38:54.729Z\" Version=\"1.0\">\n   <POS>\n      <Source>\n          <RequestorID ID=\"{{username}}\" MessagePassword=\"{{password}}\" />\n      </Source>\n   </POS>\n   <Inventories HotelCode=\"{{HotelCode}}\">\n      <Inventory>\n         <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode1}}\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\" Mon=\"true\" Fri=\"true\" />\n         <InvCounts>\n            <InvCount Count=\"5\" CountType=\"1\" />\n         </InvCounts>\n      </Inventory>\n   </Inventories>\n</OTA_HotelInvCountNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/smarthotel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"smarthotel"
							]
						},
						"description": "Update Availability"
					},
					"response": []
				},
				{
					"name": "Get Hotel Info(HotelDescriptiveInfo)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4155da40-dcc5-4624-879e-45906ea5b957",
								"exec": [
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"a61ce1a0-cfe9-46cb-948d-cbc8f3f63d00\";",
									"var password = \"Sma180119!\";",
									"var hotelcode = \"12345666\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"a61ce1a0-cfe9-46cb-948d-cbc8f3f63d00\";",
									"var password = \"Sma180119!\";",
									"var hotelcode = \"00543681\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"smarthotel\";",
									"var password = \"password\";",
									"var hotelcode = \"00019157\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a2409fcf-434f-4d1b-9c79-710465b9283c",
								"exec": [
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains Room 1 in response body\", function () {",
									"var contains = false;",
									"var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains Room 2 in response body\", function () {",
									"var contains = false;",
									"var expected = RoomTypeCode2;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelDescriptiveInfoRQ PrimaryLangID=\"eng\" Target=\"Production\" TimeStamp=\"2018-07-29T07:38:54.729Z\" Version=\"1.0\">\n   <POS>\n      <Source>\n         <RequestorID ID=\"{{username}}\" MessagePassword=\"{{password}}\" />\n      </Source>\n   </POS>\n   <HotelDescriptiveInfos>\n      <HotelDescriptiveInfo HotelCode=\"{{HotelCode}}\">\n         <FacilityInfo SendGuestRooms=\"True\" />\n      </HotelDescriptiveInfo>\n   </HotelDescriptiveInfos>\n</OTA_HotelDescriptiveInfoRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/smarthotel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"smarthotel"
							]
						},
						"description": "Get hotel info"
					},
					"response": []
				},
				{
					"name": "Get Hotel Info(HotelDescriptiveInfo) - SendGuestRooms False",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5f71cdd-6716-459a-9774-30e2a883d99c",
								"exec": [
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"if(pm.environment.name == \"PREPROD\")",
									"{",
									"pm.test(\"Doesn't contain Room 1 in response body\", function () {",
									"var contains = false;",
									"var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									"",
									"pm.test(\"Doesn't contain Room 2 in response body\", function () {",
									"var contains = false;",
									"var expected = RoomTypeCode2;",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									"} else if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"pm.test(\"Doesn't contain Room 1 in response body\", function () {",
									"var contains = false;",
									"var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									"",
									"pm.test(\"Doesn't contain Room 2 in response body\", function () {",
									"var contains = false;",
									"var expected = RoomTypeCode2;",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelDescriptiveInfoRQ PrimaryLangID=\"eng\" Target=\"Production\" TimeStamp=\"2018-07-29T07:38:54.729Z\" Version=\"1.0\">\n   <POS>\n      <Source>\n         <RequestorID ID=\"{{username}}\" MessagePassword=\"{{password}}\" />\n      </Source>\n   </POS>\n   <HotelDescriptiveInfos>\n      <HotelDescriptiveInfo HotelCode=\"{{HotelCode}}\">\n         <FacilityInfo SendGuestRooms=\"False\" />\n      </HotelDescriptiveInfo>\n   </HotelDescriptiveInfos>\n</OTA_HotelDescriptiveInfoRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/smarthotel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"smarthotel"
							]
						},
						"description": "Get hotel info"
					},
					"response": []
				},
				{
					"name": "Get Hotel Info(HotelDescriptiveInfo) - No Partner Code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4155da40-dcc5-4624-879e-45906ea5b957",
								"exec": [
									"",
									"",
									"var hotelcode = \"1234566\";",
									"",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a2409fcf-434f-4d1b-9c79-710465b9283c",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelDescriptiveInfoRQ PrimaryLangID=\"eng\" EchoToken=\"abc\" Target=\"Production\" TimeStamp=\"2018-07-29T07:38:54.729Z\" Version=\"1.0\">\n   <POS>\n      <Source>\n         <RequestorID ID=\"{{username}}\" MessagePassword=\"{{password}}\" />\n      </Source>\n   </POS>\n   <HotelDescriptiveInfos>\n      <HotelDescriptiveInfo HotelCode=\"{{HotelCode}}\">\n         <FacilityInfo SendGuestRooms=\"True\" />\n      </HotelDescriptiveInfo>\n   </HotelDescriptiveInfos>\n</OTA_HotelDescriptiveInfoRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/smarthotel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"smarthotel"
							]
						},
						"description": "Get hotel info"
					},
					"response": []
				},
				{
					"name": "Get Hotel Info(HotelDescriptiveInfo) - Wrong credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "be8b54f6-40de-49e9-b666-3d2db32c5c57",
								"exec": [
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var password = \"Sma180119ii\";",
									"var hotelcode = \"12345666\";",
									"",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var password = \"passwor\";",
									"var hotelcode = \"00543681\"",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var password = \"smarthote\";",
									"var hotelcode = \"00019157\"; ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8641f257-b18f-4aa6-8d4c-170315d73301",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelDescriptiveInfoRQ PrimaryLangID=\"eng\" EchoToken=\"abc\" TimeStamp=\"2018-07-29T07:38:54.729Z\" Version=\"1.0\">\n   <POS>\n      <Source>\n         <RequestorID ID=\"{{username}}\" MessagePassword=\"{{password}}\" />\n      </Source>\n   </POS>\n   <HotelDescriptiveInfos>\n      <HotelDescriptiveInfo HotelCode=\"{{HotelCode}}\">\n         <FacilityInfo SendGuestRooms=\"True\" />\n      </HotelDescriptiveInfo>\n   </HotelDescriptiveInfos>\n</OTA_HotelDescriptiveInfoRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/smarthotel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"smarthotel"
							]
						},
						"description": "Get hotel info"
					},
					"response": []
				},
				{
					"name": "Update Room Rates(HotelRateAmountNotif)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ec5a117d-715c-4d62-a540-da62b77c9612",
								"exec": [
									"var date = new Date();",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 79);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 98);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"a61ce1a0-cfe9-46cb-948d-cbc8f3f63d00\";",
									"var password = \"Sma180119!\";",
									"var hotelcode = \"12345666\";",
									"var RoomTypeCode2 = \"232457\";",
									"var RoomTypeCode1 = \"232456\"",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"a61ce1a0-cfe9-46cb-948d-cbc8f3f63d00\";",
									"var password = \"Sma180119!\";",
									"var hotelcode = \"00543681\";",
									"var RoomTypeCode1 = \"974181\";",
									"var RoomTypeCode2 = \"974178\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"smarthotel\";",
									"var password = \"password\";",
									"var hotelcode = \"00019157\";",
									"var RoomTypeCode1 = \"252039\";",
									"var RoomTypeCode2 = \"207902\";   ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "80923b8b-d71c-4197-ab1e-b9088a80d68d",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains message Success\", function () {",
									"var contains = false;",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test.skip(\"Contains attribute UniqueID\", function () {",
									"var contains = false;",
									"var expected = \"UniqueID\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test.skip(\"Contains attribute Type\", function () {",
									"var contains = false;",
									"var expected = \"Type\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelRateAmountNotifRQ EchoToken=\"Example123\" PrimaryLangID=\"eng\" Target=\"Production\" TimeStamp=\"{{Date}}\" Version=\"1.0\">\n   <POS>\n      <Source>\n          <RequestorID ID=\"{{username}}\" MessagePassword=\"{{password}}\" />\n      </Source>\n   </POS>\n   <RateAmountMessages HotelCode=\"{{HotelCode}}\">\n      <RateAmountMessage>\n         <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"1\" RateTier=\"1\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\" Mon=\"true\" Fri=\"true\" />\n         <Rates>\n            <Rate>\n               <BaseByGuestAmts>\n                  <BaseByGuestAmt NumberOfGuests=\"2\" AgeQualifyingCode=\"10\" AmountAfterTax=\"130\" DecimalPlaces=\"0\" />\n               </BaseByGuestAmts>\n            </Rate>\n         </Rates>\n      </RateAmountMessage>\n      <RateAmountMessage>\n         <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"1\" RateTier=\"1\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\" Mon=\"true\" Fri=\"true\" />\n         <Rates>\n            <Rate>\n               <BaseByGuestAmts>\n                  <BaseByGuestAmt NumberOfGuests=\"2\" AgeQualifyingCode=\"9\" AmountAfterTax=\"145\" DecimalPlaces=\"2\" />\n               </BaseByGuestAmts>\n            </Rate>\n         </Rates>\n      </RateAmountMessage>\n   </RateAmountMessages>\n</OTA_HotelRateAmountNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/smarthotel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"smarthotel"
							]
						},
						"description": "Update rates"
					},
					"response": []
				},
				{
					"name": "Update Room Rates(HotelRateAmountNotif) - StartDate > EndDate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bd0df2f1-e6ae-4473-9c2a-be127aa8082d",
								"exec": [
									"var date = new Date();",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 140);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "165a7088-69a6-4c9e-8940-996722ee4f59",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error description : Start date cannot be greater than end date\", function () {",
									"var contains = false;",
									"var expected = \"Start date cannot be greater than end date\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelRateAmountNotifRQ EchoToken=\"Example123\" PrimaryLangID=\"eng\" Target=\"Production\" TimeStamp=\"{{Date}}\" Version=\"1.0\">\n   <POS>\n      <Source>\n          <RequestorID ID=\"{{username}}\" MessagePassword=\"{{password}}\" />\n      </Source>\n   </POS>\n   <RateAmountMessages HotelCode=\"{{HotelCode}}\">\n      <RateAmountMessage>\n         <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"1\" RateTier=\"1\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\" Mon=\"true\" Fri=\"true\" />\n         <Rates>\n            <Rate>\n               <BaseByGuestAmts>\n                  <BaseByGuestAmt NumberOfGuests=\"2\" AgeQualifyingCode=\"10\" AmountAfterTax=\"130\" DecimalPlaces=\"0\" />\n               </BaseByGuestAmts>\n            </Rate>\n         </Rates>\n      </RateAmountMessage>\n      <RateAmountMessage>\n         <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"1\" RateTier=\"1\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\" Mon=\"true\" Fri=\"true\" />\n         <Rates>\n            <Rate>\n               <BaseByGuestAmts>\n                  <BaseByGuestAmt NumberOfGuests=\"2\" AgeQualifyingCode=\"9\" AmountAfterTax=\"14555\" DecimalPlaces=\"2\" />\n               </BaseByGuestAmts>\n            </Rate>\n         </Rates>\n      </RateAmountMessage>\n   </RateAmountMessages>\n</OTA_HotelRateAmountNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/smarthotel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"smarthotel"
							]
						},
						"description": "Update rates"
					},
					"response": []
				},
				{
					"name": "Update Room Rates(HotelRateAmountNotif) - Wrong Date format",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bd0df2f1-e6ae-4473-9c2a-be127aa8082d",
								"exec": [
									"var date = new Date();",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var startdate = new Date();",
									"startdate.setDate(startdate.getDate() + 119);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "165a7088-69a6-4c9e-8940-996722ee4f59",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error description : Wrong date format. Expected format is `Y-m-d`\", function () {",
									"var contains = false;",
									"var expected = \"Wrong date format. Expected format is `Y-m-d`\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelRateAmountNotifRQ EchoToken=\"Example123\" PrimaryLangID=\"eng\" Target=\"Production\" TimeStamp=\"{{Date}}\" Version=\"1.0\">\n   <POS>\n      <Source>\n          <RequestorID ID=\"{{username}}\" MessagePassword=\"{{password}}\" />\n      </Source>\n   </POS>\n   <RateAmountMessages HotelCode=\"{{HotelCode}}\">\n      <RateAmountMessage>\n         <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"1\" RateTier=\"1\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\" Mon=\"true\" Fri=\"true\" />\n         <Rates>\n            <Rate>\n               <BaseByGuestAmts>\n                  <BaseByGuestAmt NumberOfGuests=\"2\" AgeQualifyingCode=\"10\" AmountAfterTax=\"130\" DecimalPlaces=\"0\" />\n               </BaseByGuestAmts>\n            </Rate>\n         </Rates>\n      </RateAmountMessage>\n      <RateAmountMessage>\n         <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"1\" RateTier=\"1\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\" Mon=\"true\" Fri=\"true\" />\n         <Rates>\n            <Rate>\n               <BaseByGuestAmts>\n                  <BaseByGuestAmt NumberOfGuests=\"2\" AgeQualifyingCode=\"9\" AmountAfterTax=\"14555\" DecimalPlaces=\"2\" />\n               </BaseByGuestAmts>\n            </Rate>\n         </Rates>\n      </RateAmountMessage>\n   </RateAmountMessages>\n</OTA_HotelRateAmountNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/smarthotel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"smarthotel"
							]
						},
						"description": "Update rates"
					},
					"response": []
				},
				{
					"name": "Update Room Rates(HotelRateAmountNotif) - Wrong credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b698da30-3e1f-4912-9e3d-0ef780776b4d",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"",
									"var password = \"Sma180119!!\";",
									"",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d9b4766b-d800-4570-b4b1-54a98ded8da5",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelRateAmountNotifRQ EchoToken=\"Example123\" PrimaryLangID=\"eng\" Target=\"Production\" TimeStamp=\"{{Date}}\" Version=\"1.0\">\n   <POS>\n      <Source>\n          <RequestorID ID=\"{{username}}\" MessagePassword=\"{{password}}\" />\n      </Source>\n   </POS>\n   <RateAmountMessages HotelCode=\"{{HotelCode}}\">\n      <RateAmountMessage>\n         <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"1\" RateTier=\"1\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\" Mon=\"true\" Fri=\"true\" />\n         <Rates>\n            <Rate>\n               <BaseByGuestAmts>\n                  <BaseByGuestAmt NumberOfGuests=\"2\" AgeQualifyingCode=\"10\" AmountAfterTax=\"130\" DecimalPlaces=\"0\" />\n               </BaseByGuestAmts>\n            </Rate>\n         </Rates>\n      </RateAmountMessage>\n      <RateAmountMessage>\n         <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"1\" RateTier=\"1\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\" Mon=\"true\" Fri=\"true\" />\n         <Rates>\n            <Rate>\n               <BaseByGuestAmts>\n                  <BaseByGuestAmt NumberOfGuests=\"2\" AgeQualifyingCode=\"9\" AmountAfterTax=\"14555\" DecimalPlaces=\"2\" />\n               </BaseByGuestAmts>\n            </Rate>\n         </Rates>\n      </RateAmountMessage>\n   </RateAmountMessages>\n</OTA_HotelRateAmountNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/smarthotel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"smarthotel"
							]
						},
						"description": "Update rates"
					},
					"response": []
				},
				{
					"name": "Update Room Rates(HotelRateAmountNotif) - No Partner",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34de1ab5-00aa-47c6-a808-98b02db2029c",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2c7051f6-ec23-41d8-ae74-451a8ec2cd5c",
								"exec": [
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var password = \"Sma180119!\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var password = \"Sma180119!\";",
									"",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var password = \"password\"; ",
									"}",
									"",
									"var hotelcode = \"3545\";",
									"",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelRateAmountNotifRQ EchoToken=\"Example123\" PrimaryLangID=\"eng\" Target=\"Production\" TimeStamp=\"{{Date}}\" Version=\"1.0\">\n   <POS>\n      <Source>\n          <RequestorID ID=\"{{username}}\" MessagePassword=\"{{password}}\" />\n      </Source>\n   </POS>\n   <RateAmountMessages HotelCode=\"{{HotelCode}}\">\n      <RateAmountMessage>\n         <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"1\" RateTier=\"1\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\" Mon=\"true\" Fri=\"true\" />\n         <Rates>\n            <Rate>\n               <BaseByGuestAmts>\n                  <BaseByGuestAmt NumberOfGuests=\"2\" AgeQualifyingCode=\"10\" AmountAfterTax=\"130\" DecimalPlaces=\"0\" />\n               </BaseByGuestAmts>\n            </Rate>\n         </Rates>\n      </RateAmountMessage>\n      <RateAmountMessage>\n         <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"1\" RateTier=\"1\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\" Mon=\"true\" Fri=\"true\" />\n         <Rates>\n            <Rate>\n               <BaseByGuestAmts>\n                  <BaseByGuestAmt NumberOfGuests=\"2\" AgeQualifyingCode=\"9\" AmountAfterTax=\"14555\" DecimalPlaces=\"2\" />\n               </BaseByGuestAmts>\n            </Rate>\n         </Rates>\n      </RateAmountMessage>\n   </RateAmountMessages>\n</OTA_HotelRateAmountNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/smarthotel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"smarthotel"
							]
						},
						"description": "Update rates"
					},
					"response": []
				},
				{
					"name": "Update Room Rates(HotelRateAmountNotif) - No Product Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34de1ab5-00aa-47c6-a808-98b02db2029c",
								"exec": [
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var hotelcode = postman.getEnvironmentVariable(\"HotelCode\");",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error string with description\", function () {",
									"var contains = false;",
									"var expected = \"The product code `\"+RoomTypeCode1+\"` for Partner `\"+hotelcode+\"` is not registered in SBX Channel Manager.\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2c7051f6-ec23-41d8-ae74-451a8ec2cd5c",
								"exec": [
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"12345666\";",
									"var RoomTypeCode1 = \"2324556\"",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00543681\";",
									"var RoomTypeCode1 = \"9741\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var hotelcode = \"00019157\";",
									"var RoomTypeCode1 = \"3121\"; ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelRateAmountNotifRQ EchoToken=\"Example123\" PrimaryLangID=\"eng\" Target=\"Production\" TimeStamp=\"{{Date}}\" Version=\"1.0\">\n   <POS>\n      <Source>\n          <RequestorID ID=\"{{username}}\" MessagePassword=\"{{password}}\" />\n      </Source>\n   </POS>\n   <RateAmountMessages HotelCode=\"{{HotelCode}}\">\n      <RateAmountMessage>\n         <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"1\" RateTier=\"1\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\" Mon=\"true\" Fri=\"true\" />\n         <Rates>\n            <Rate>\n               <BaseByGuestAmts>\n                  <BaseByGuestAmt NumberOfGuests=\"2\" AgeQualifyingCode=\"10\" AmountAfterTax=\"130\" DecimalPlaces=\"0\" />\n               </BaseByGuestAmts>\n            </Rate>\n         </Rates>\n      </RateAmountMessage>\n      <RateAmountMessage>\n         <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"1\" RateTier=\"1\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\" Mon=\"true\" Fri=\"true\" />\n         <Rates>\n            <Rate>\n               <BaseByGuestAmts>\n                  <BaseByGuestAmt NumberOfGuests=\"2\" AgeQualifyingCode=\"9\" AmountAfterTax=\"14555\" DecimalPlaces=\"2\" />\n               </BaseByGuestAmts>\n            </Rate>\n         </Rates>\n      </RateAmountMessage>\n   </RateAmountMessages>\n</OTA_HotelRateAmountNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/smarthotel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"smarthotel"
							]
						},
						"description": "Update rates"
					},
					"response": []
				},
				{
					"name": "Read Room Rates(HotelRatePlanRQ)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "397de23e-a223-451c-8469-38048a939014",
								"exec": [
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"a61ce1a0-cfe9-46cb-948d-cbc8f3f63d00\";",
									"var password = \"Sma180119!\";",
									"var hotelcode = \"12345666\";",
									"var RoomTypeCode2 = \"232457\";",
									"var RoomTypeCode1 = \"232456\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"a61ce1a0-cfe9-46cb-948d-cbc8f3f63d00\";",
									"var password = \"Sma180119!\";",
									"var hotelcode = \"00543681\";",
									"var RoomTypeCode1 = \"974181\";",
									"var RoomTypeCode2 = \"974178\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"smarthotel\";",
									"var password = \"password\";",
									"var hotelcode = \"00019157\";",
									"var RoomTypeCode1 = \"252039\";",
									"var RoomTypeCode2 = \"207902\";   ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ef6da3b0-bcab-4391-b6eb-4060be4a5f20",
								"exec": [
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains Room 1 in response body\", function () {",
									"var contains = false;",
									"var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains Room 2 in response body\", function () {",
									"var contains = false;",
									"var expected = RoomTypeCode2;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains RatePlanCode : SBX\", function () {",
									"var contains = false;",
									"var expected = \"SBX\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelRatePlanRQ EchoToken=\"Example123\" PrimaryLangID=\"eng\" Target=\"Production\" TimeStamp=\"2018-07-29T07:38:54.729Z\" Version=\"1.0\">\n   <POS>\n      <Source>\n          <RequestorID ID=\"{{username}}\" MessagePassword=\"{{password}}\" />\n      </Source>\n   </POS>\n   <RatePlans>\n      <RatePlan>\n         <HotelRef HotelCode=\"{{HotelCode}}\" />\n      </RatePlan>\n   </RatePlans>\n</OTA_HotelRatePlanRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/smarthotel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"smarthotel"
							]
						},
						"description": "Get Rate Plan - Room Code data."
					},
					"response": []
				},
				{
					"name": "Read Room Rates(HotelRatePlanRQ) - No Partner Code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f9f69ece-f6b1-454a-9aa1-95f458a9e25a",
								"exec": [
									"",
									"var hotelcode = \"12345\";",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a9719e48-b283-4c57-bcd3-a49492a3cff4",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelRatePlanRQ EchoToken=\"Example123\" PrimaryLangID=\"eng\" Target=\"Production\" TimeStamp=\"2018-07-29T07:38:54.729Z\" Version=\"1.0\">\n   <POS>\n      <Source>\n          <RequestorID ID=\"{{username}}\" MessagePassword=\"{{password}}\" />\n      </Source>\n   </POS>\n   <RatePlans>\n      <RatePlan>\n         <HotelRef HotelCode=\"{{HotelCode}}\" />\n      </RatePlan>\n   </RatePlans>\n</OTA_HotelRatePlanRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/smarthotel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"smarthotel"
							]
						},
						"description": "Get Rate Plan - Room Code data."
					},
					"response": []
				},
				{
					"name": "Read Room Rates(HotelRatePlanRQ) - Invalid credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ab4a31f-3702-492b-8c41-0410798b5fea",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "14265d94-6249-4cc7-bfb3-253dd6c19ac3",
								"exec": [
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var password = \"Sma180119ii\";",
									"var hotelcode = \"12345666\";",
									"",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var password = \"passwd\";",
									"var hotelcode = \"00543681\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var password = \"smarthol\";",
									"var hotelcode = \"00019157\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelRatePlanRQ EchoToken=\"Example123\" PrimaryLangID=\"eng\" Target=\"Production\" TimeStamp=\"2018-07-29T07:38:54.729Z\" Version=\"1.0\">\n   <POS>\n      <Source>\n          <RequestorID ID=\"{{username}}\" MessagePassword=\"{{password}}\" />\n      </Source>\n   </POS>\n   <RatePlans>\n      <RatePlan>\n         <HotelRef HotelCode=\"{{HotelCode}}\" />\n      </RatePlan>\n   </RatePlans>\n</OTA_HotelRatePlanRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/smarthotel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"smarthotel"
							]
						},
						"description": "Get Rate Plan - Room Code data."
					},
					"response": []
				},
				{
					"name": "Get Bookings(OTA_HotelResNotifRQ)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ab4a31f-3702-492b-8c41-0410798b5fea",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "14265d94-6249-4cc7-bfb3-253dd6c19ac3",
								"exec": [
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var password = \"Sma180119ii\";",
									"var hotelcode = \"12345666\";",
									"",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var password = \"passwd\";",
									"var hotelcode = \"00543681\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var password = \"smarthol\";",
									"var hotelcode = \"00019157\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelRatePlanRQ EchoToken=\"Example123\" PrimaryLangID=\"eng\" Target=\"Production\" TimeStamp=\"2018-07-29T07:38:54.729Z\" Version=\"1.0\">\n   <POS>\n      <Source>\n          <RequestorID ID=\"{{username}}\" MessagePassword=\"{{password}}\" />\n      </Source>\n   </POS>\n   <RatePlans>\n      <RatePlan>\n         <HotelRef HotelCode=\"{{HotelCode}}\" />\n      </RatePlan>\n   </RatePlans>\n</OTA_HotelRatePlanRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/smarthotel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"smarthotel"
							]
						},
						"description": "Push bookings to Smarthotel"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6abc7683-1d3e-446f-b86f-d924ed88c90f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bfbe05dc-b84d-4ba9-b15f-68f62dba71ae",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Travelclick - OTA 2015A",
			"item": [
				{
					"name": "Ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains EchoData: Are you there?\", function () {",
									"var expected = \"Are you there?\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"var string = (standalone=\"yes\");",
									"pm.test(\"Contains standalone attribute in Response body\", function () {",
									"var expected = string;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9ad9dc89-593a-475f-80bf-8b5b7a4563ce",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"tclick\";",
									"var password = \"password\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<OTA_PingRQ Version=\"1.0\"\n            TimeStamp=\"{{Date}}\"\n            xmlns=\"http://www.opentravel.org/OTA/2003/05\">\n    <EchoData>Are you there?</EchoData>\n</OTA_PingRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Rooms(HotelProductRQ)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains first Room Code: \"+RoomTypeCode1+\" in response body\" ",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains second Room Code: \"+RoomTypeCode2+\" in response body\" ",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode2;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dbd50052-c05b-427c-a94c-575be43b3506",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00011163\";",
									"var RoomTypeCode1 = \"456365\";",
									"var RoomTypeCode2 = \"434354\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00145205\";",
									"var RoomTypeCode1 = \"328383\";",
									"var RoomTypeCode2 = \"334857\";",
									"}",
									"else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00145205\";",
									"var RoomTypeCode1 = \"328383\";",
									"var RoomTypeCode2 = \"463866\";",
									"}",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelProductRQ Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\" xmlns=\"http://www.opentravel.org/OTA/2003/05\">\n    <HotelProducts>\n        <HotelProduct HotelCode=\"{{HotelCode}}\" />\n    </HotelProducts>\n</OTA_HotelProductRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Get all rooms for this hotel"
					},
					"response": []
				},
				{
					"name": "Get Rooms - Wrong Partner Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dbd50052-c05b-427c-a94c-575be43b3506",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var hotelcode = \"98435\";",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelProductRQ Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\" xmlns=\"http://www.opentravel.org/OTA/2003/05\">\n    <HotelProducts>\n        <HotelProduct HotelCode=\"{{HotelCode}}\" />\n    </HotelProducts>\n</OTA_HotelProductRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Get all rooms for this hotel"
					},
					"response": []
				},
				{
					"name": "Get Rooms - Wrong  Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"401 Unauthorized error response\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error string: Invalid credentials\", function () {",
									"var contains = false;",
									"var expected = \"Invalid credentials\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dbd50052-c05b-427c-a94c-575be43b3506",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var password = \"passwor\";",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00011163\";",
									"}else if(pm.environment.name ==\"PREPROD\",\"DEVINT\",\"LOCAL\")",
									"{",
									" var hotelcode = \"00145205\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelProductRQ Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\" xmlns=\"http://www.opentravel.org/OTA/2003/05\">\n    <HotelProducts>\n        <HotelProduct HotelCode=\"{{HotelCode}}\" />\n    </HotelProducts>\n</OTA_HotelProductRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Get all rooms for this hotel"
					},
					"response": []
				},
				{
					"name": "Get Rooms - Invalid Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"401 Unauthorized error response\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error string: Username could not be found\", function () {",
									"var contains = false;",
									"var expected = \"Username could not be found\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dbd50052-c05b-427c-a94c-575be43b3506",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var username = \"usern\";",
									"var password = \"password\";",
									"",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"username\", username);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelProductRQ Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\" xmlns=\"http://www.opentravel.org/OTA/2003/05\">\n    <HotelProducts>\n        <HotelProduct HotelCode=\"{{HotelCode}}\" />\n    </HotelProducts>\n</OTA_HotelProductRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Get all rooms for this hotel"
					},
					"response": []
				},
				{
					"name": "Restrictions(HotelAvailNotifRQ) - Master Restriction",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fe864865-4c07-4cfe-9093-25400646ab04",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"var month2 = date2.getMonth() + 1;",
									"if(month2 < 10)",
									"{",
									"month2 = \"0\" + month2;",
									"}",
									"var day2 = date2.getDate();",
									"if(day2 < 10)",
									"{",
									"    day2 = \"0\" + day2;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month2 + \"-\" + day2;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00011163\";",
									"var RoomTypeCode1 = \"456365\";",
									"var RoomTypeCode2 = \"434354\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00145205\";",
									"var RoomTypeCode1 = \"328383\";",
									"var RoomTypeCode2 = \"334857\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00145205\";",
									"var RoomTypeCode1 = \"328383\";",
									"var RoomTypeCode2 = \"463866\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelAvailNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <AvailStatusMessages HotelCode=\"{{HotelCode}}\">\n      <AvailStatusMessage>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" />\n         <LengthsOfStay ArrivalDateBased=\"true\">\n            <LengthOfStay MinMaxMessageType=\"MinLOS\" TimeUnit=\"Day\" Time=\"3\" />\n         </LengthsOfStay>\n      </AvailStatusMessage>\n        <AvailStatusMessage>\n            <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" />\n            <RestrictionStatus Restriction=\"Master\" Status=\"Close\" />\n        </AvailStatusMessage>\n      <AvailStatusMessage>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\" />\n         <RestrictionStatus Restriction=\"Master\" Status=\"Open\" />\n      </AvailStatusMessage>\n   </AvailStatusMessages>\n</OTA_HotelAvailNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Configure restrictions. It has no effect at Smartbox."
					},
					"response": []
				},
				{
					"name": "UpdateRestrictions(HotelAvailNotifRQ) - Wrong Date format",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error: 400\", function () {",
									"var expected = \"400\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error message as expected to enter correct date format 'Y-m-d'\", function () {",
									"var expected = \"Wrong date format. Expected format is `Y-m-d`\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fe864865-4c07-4cfe-9093-25400646ab04",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var startdate = new Date();",
									"startdate.setDate(startdate.getDate() + 119);",
									"postman.setEnvironmentVariable(\"StartDate\",startdate)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelAvailNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <AvailStatusMessages HotelCode=\"{{HotelCode}}\">\n      <AvailStatusMessage>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" />\n         <LengthsOfStay ArrivalDateBased=\"true\">\n            <LengthOfStay MinMaxMessageType=\"MinLOS\" TimeUnit=\"Day\" Time=\"3\" />\n         </LengthsOfStay>\n      </AvailStatusMessage>\n        <AvailStatusMessage>\n            <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" />\n            <RestrictionStatus Restriction=\"Master\" Status=\"Close\" />\n        </AvailStatusMessage>\n      <AvailStatusMessage>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\" />\n         <RestrictionStatus Restriction=\"Master\" Status=\"Open\" />\n      </AvailStatusMessage>\n   </AvailStatusMessages>\n</OTA_HotelAvailNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Configure restrictions. It has no effect at Smartbox."
					},
					"response": []
				},
				{
					"name": "UpdateRestrictions(HotelAvailNotifRQ) - StartDate > EndDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Start date cannot be greater than end date\", function () {",
									"var contains = false;",
									"var expected = \"Start date cannot be greater than end date\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fe864865-4c07-4cfe-9093-25400646ab04",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 139);",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelAvailNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <AvailStatusMessages HotelCode=\"{{HotelCode}}\">\n      <AvailStatusMessage>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" />\n         <LengthsOfStay ArrivalDateBased=\"true\">\n            <LengthOfStay MinMaxMessageType=\"MinLOS\" TimeUnit=\"Day\" Time=\"3\" />\n         </LengthsOfStay>\n      </AvailStatusMessage>\n        <AvailStatusMessage>\n            <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" />\n            <RestrictionStatus Restriction=\"Master\" Status=\"Close\" />\n        </AvailStatusMessage>\n      <AvailStatusMessage>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\" />\n         <RestrictionStatus Restriction=\"Master\" Status=\"Open\" />\n      </AvailStatusMessage>\n   </AvailStatusMessages>\n</OTA_HotelAvailNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Configure restrictions. It has no effect at Smartbox."
					},
					"response": []
				},
				{
					"name": "UpdateRestrictions(HotelAvailNotifRQ) - Wrong Product Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fe864865-4c07-4cfe-9093-25400646ab04",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"",
									"var RoomTypeCode1 = \"328\";",
									"",
									"",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelAvailNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <AvailStatusMessages HotelCode=\"{{HotelCode}}\">\n      <AvailStatusMessage>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" />\n         <LengthsOfStay ArrivalDateBased=\"true\">\n            <LengthOfStay MinMaxMessageType=\"MinLOS\" TimeUnit=\"Day\" Time=\"3\" />\n         </LengthsOfStay>\n      </AvailStatusMessage>\n        <AvailStatusMessage>\n            <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" />\n            <RestrictionStatus Restriction=\"Master\" Status=\"Close\" />\n        </AvailStatusMessage>\n      <AvailStatusMessage>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\" />\n         <RestrictionStatus Restriction=\"Master\" Status=\"Open\" />\n      </AvailStatusMessage>\n   </AvailStatusMessages>\n</OTA_HotelAvailNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Configure restrictions. It has no effect at Smartbox."
					},
					"response": []
				},
				{
					"name": "UpdateRestrictions(HotelAvailNotifRQ) - No Partner Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fe864865-4c07-4cfe-9093-25400646ab04",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var RoomTypeCode1 = \"456365\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\",\"DEVINT\",\"LOCAL\")",
									"{",
									"var RoomTypeCode1 = \"328383\";    ",
									"}",
									"",
									"var hotelcode = \"\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable('RoomTypeCode1',RoomTypeCode1);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelAvailNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <AvailStatusMessages HotelCode=\"{{HotelCode}}\">\n      <AvailStatusMessage>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" />\n         <LengthsOfStay ArrivalDateBased=\"true\">\n            <LengthOfStay MinMaxMessageType=\"MinLOS\" TimeUnit=\"Day\" Time=\"3\" />\n         </LengthsOfStay>\n      </AvailStatusMessage>\n        <AvailStatusMessage>\n            <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" />\n            <RestrictionStatus Restriction=\"Master\" Status=\"Close\" />\n        </AvailStatusMessage>\n      <AvailStatusMessage>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\" />\n         <RestrictionStatus Restriction=\"Master\" Status=\"Open\" />\n      </AvailStatusMessage>\n   </AvailStatusMessages>\n</OTA_HotelAvailNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Configure restrictions. It has no effect at Smartbox."
					},
					"response": []
				},
				{
					"name": "UpdateRestrictions(HotelAvailNotifRQ) - Wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 401 - Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Invalid credentials\", function () {",
									"var contains = false;",
									"var expected = \"Invalid credentials\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fe864865-4c07-4cfe-9093-25400646ab04",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00011163\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\",\"DEVINT\",\"LOCAL\")",
									"{",
									"var hotelcode = \"00145205\";    ",
									"}",
									"",
									"var password = \"qa1\";",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelAvailNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <AvailStatusMessages HotelCode=\"{{HotelCode}}\">\n      <AvailStatusMessage>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" />\n         <LengthsOfStay ArrivalDateBased=\"true\">\n            <LengthOfStay MinMaxMessageType=\"MinLOS\" TimeUnit=\"Day\" Time=\"3\" />\n         </LengthsOfStay>\n      </AvailStatusMessage>\n        <AvailStatusMessage>\n            <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" />\n            <RestrictionStatus Restriction=\"Master\" Status=\"Close\" />\n        </AvailStatusMessage>\n      <AvailStatusMessage>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\" />\n         <RestrictionStatus Restriction=\"Master\" Status=\"Open\" />\n      </AvailStatusMessage>\n   </AvailStatusMessages>\n</OTA_HotelAvailNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Configure restrictions. It has no effect at Smartbox."
					},
					"response": []
				},
				{
					"name": "UpdateRestrictions(HotelAvailNotifRQ) - Invalid username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 401 - Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Username could not be found\", function () {",
									"var contains = false;",
									"var expected = \"Username could not be found\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fe864865-4c07-4cfe-9093-25400646ab04",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var username = \"ghfgh\";",
									"var password = \"password\";",
									"postman.setEnvironmentVariable(\"password\", password); ",
									"postman.setEnvironmentVariable(\"username\", username);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelAvailNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <AvailStatusMessages HotelCode=\"{{HotelCode}}\">\n      <AvailStatusMessage>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" />\n         <LengthsOfStay ArrivalDateBased=\"true\">\n            <LengthOfStay MinMaxMessageType=\"MinLOS\" TimeUnit=\"Day\" Time=\"3\" />\n         </LengthsOfStay>\n      </AvailStatusMessage>\n        <AvailStatusMessage>\n            <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" />\n            <RestrictionStatus Restriction=\"Master\" Status=\"Close\" />\n        </AvailStatusMessage>\n      <AvailStatusMessage>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\" />\n         <RestrictionStatus Restriction=\"Master\" Status=\"Open\" />\n      </AvailStatusMessage>\n   </AvailStatusMessages>\n</OTA_HotelAvailNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Configure restrictions. It has no effect at Smartbox."
					},
					"response": []
				},
				{
					"name": "GetRestrictions(HotelAvailGetRQ) - Master Restriction",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"",
									"var roomtype1 = jsonData['OTA_HotelAvailGetRS']['AvailStatusMessages']['AvailStatusMessage']['0']['StatusApplicationControl']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['OTA_HotelAvailGetRS']['AvailStatusMessages']['AvailStatusMessage']['20']['StatusApplicationControl']['$']['InvTypeCode'];",
									"var getstatus1 = jsonData['OTA_HotelAvailGetRS']['AvailStatusMessages']['AvailStatusMessage']['0']['RestrictionStatus']['$']['Status'];",
									"var getstatus2 = jsonData['OTA_HotelAvailGetRS']['AvailStatusMessages']['AvailStatusMessage']['20']['RestrictionStatus']['$']['Status']",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains HotelCode: \"+HotelCode+\" in response body\";",
									"pm.test(string, function () {",
									"expected = HotelCode;",
									"  pm.expect(pm.response.text()).to.include(expected);",
									"});",
									" ",
									"var string = \"Read restrictions - Contains first Roomtypecode: \"+RoomTypeCode1+\" as expected\";",
									"pm.test(string, function () {",
									"expected = RoomTypeCode1;",
									"pm.expect(roomtype1).to.include(expected);",
									"});",
									"",
									"var string = \"Read restrictions - Contains second Roomtypecode: \"+RoomTypeCode2+\" as expected\";",
									"pm.test(string, function () {",
									"expected = RoomTypeCode2;",
									"pm.expect(roomtype2).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties status for first Roomtypecode - Closed for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=0;i<20; i++)",
									"{",
									"if(getstatus1 == \"Close\" && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties status for second Roomtypecode - Open for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=20;i<40; i++)",
									"{",
									"if(getstatus2 == \"Open\" && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3b3baba6-a3e5-4b4e-8c74-ee4f3f25b3de",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"var month2 = date2.getMonth() + 1;",
									"if(month2 < 10)",
									"{",
									"month2 = \"0\" + month2;",
									"}",
									"var day2 = date2.getDate();",
									"if(day2 < 10)",
									"{",
									"    day2 = \"0\" + day2;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month2 + \"-\" + day2;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00011163\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00145205\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00145205\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelAvailGetRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2016-05-26T11:11:50-04:00\" EchoToken=\"001-1466531393\">\n   <HotelAvailRequests>\n      <HotelAvailRequest>\n         <HotelRef HotelCode=\"{{HotelCode}}\" />\n         <DateRange Start=\"{{StartDate}}\" End=\"{{EndDate}}\" />\n         <RatePlanCandidates>\n            <RatePlanCandidate RatePlanCode=\"SBX\" />\n         </RatePlanCandidates>\n      </HotelAvailRequest>\n   </HotelAvailRequests>\n</OTA_HotelAvailGetRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "API call to Get all Restrictions on a partner\n"
					},
					"response": []
				},
				{
					"name": "GetRestrictions(HotelAvailGetRQ) - Only one room",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"",
									"var roomtype1 = jsonData['OTA_HotelAvailGetRS']['AvailStatusMessages']['AvailStatusMessage']['0']['StatusApplicationControl']['$']['InvTypeCode'];",
									"var getstatus1 = jsonData['OTA_HotelAvailGetRS']['AvailStatusMessages']['AvailStatusMessage']['0']['RestrictionStatus']['$']['Status'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains HotelCode: \"+HotelCode+\" in response body\";",
									"pm.test(string, function () {",
									"expected = HotelCode;",
									"  pm.expect(pm.response.text()).to.include(expected);",
									"});",
									" ",
									"var string = \"Read restrictions - Contains first Roomtypecode: \"+RoomTypeCode1+\" as expected\";",
									"pm.test(string, function () {",
									"expected = RoomTypeCode1;",
									"pm.expect(roomtype1).to.include(expected);",
									"});",
									"",
									"var string = \"Read restrictions - Doesn't contains second Roomtypecode: \"+RoomTypeCode2+\" as expected\";",
									"pm.test(string, function () {",
									"expected = RoomTypeCode2;",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties status for first Roomtypecode - Closed for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=0;i<20; i++)",
									"{",
									"if(getstatus1 == \"Close\" && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3b3baba6-a3e5-4b4e-8c74-ee4f3f25b3de",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"var month2 = date2.getMonth() + 1;",
									"if(month2 < 10)",
									"{",
									"month2 = \"0\" + month2;",
									"}",
									"var day2 = date2.getDate();",
									"if(day2 < 10)",
									"{",
									"    day2 = \"0\" + day2;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month2 + \"-\" + day2;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00011163\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00145205\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00145205\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelAvailGetRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2016-05-26T11:11:50-04:00\" EchoToken=\"001-1466531393\">\n   <HotelAvailRequests>\n      <HotelAvailRequest>\n         <HotelRef HotelCode=\"{{HotelCode}}\" />\n         <DateRange Start=\"{{StartDate}}\" End=\"{{EndDate}}\" />\n         <RatePlanCandidates>\n            <RatePlanCandidate RatePlanCode=\"SBX\" />\n         </RatePlanCandidates>\n         <RoomTypeCandidates>\n                <RoomTypeCandidate RoomTypeCode=\"{{RoomTypeCode1}}\" />\n            </RoomTypeCandidates>\n      </HotelAvailRequest>\n   </HotelAvailRequests>\n</OTA_HotelAvailGetRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "API call to Get all Restrictions on a partner\n"
					},
					"response": []
				},
				{
					"name": "Restrictions(HotelAvailNotifRQ) - Arrival Restriction ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fe864865-4c07-4cfe-9093-25400646ab04",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"var month2 = date2.getMonth() + 1;",
									"if(month2 < 10)",
									"{",
									"month2 = \"0\" + month2;",
									"}",
									"var day2 = date2.getDate();",
									"if(day2 < 10)",
									"{",
									"    day2 = \"0\" + day2;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month2 + \"-\" + day2;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00011163\";",
									"var RoomTypeCode1 = \"456365\";",
									"var RoomTypeCode2 = \"434354\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00145205\";",
									"var RoomTypeCode1 = \"328383\";",
									"var RoomTypeCode2 = \"334857\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00145205\";",
									"var RoomTypeCode1 = \"328383\";",
									"var RoomTypeCode2 = \"463866\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelAvailNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <AvailStatusMessages HotelCode=\"{{HotelCode}}\">\n      <AvailStatusMessage>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" />\n         <LengthsOfStay ArrivalDateBased=\"true\">\n            <LengthOfStay MinMaxMessageType=\"MinLOS\" TimeUnit=\"Day\" Time=\"3\" />\n         </LengthsOfStay>\n      </AvailStatusMessage>\n        <AvailStatusMessage>\n            <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" />\n            <RestrictionStatus Restriction=\"Arrival\" Status=\"Open\" />\n        </AvailStatusMessage>\n      <AvailStatusMessage>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\" />\n         <RestrictionStatus Restriction=\"Master\" Status=\"Open\" />\n      </AvailStatusMessage>\n   </AvailStatusMessages>\n</OTA_HotelAvailNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Configure restrictions. To check Arrival restriction is not updating stop sale"
					},
					"response": []
				},
				{
					"name": "GetRestrictions(HotelAvailGetRQ) - Arrival Restriction",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"",
									"var roomtype1 = jsonData['OTA_HotelAvailGetRS']['AvailStatusMessages']['AvailStatusMessage']['0']['StatusApplicationControl']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['OTA_HotelAvailGetRS']['AvailStatusMessages']['AvailStatusMessage']['20']['StatusApplicationControl']['$']['InvTypeCode'];",
									"var getstatus1 = jsonData['OTA_HotelAvailGetRS']['AvailStatusMessages']['AvailStatusMessage']['0']['RestrictionStatus']['$']['Status'];",
									"var getstatus2 = jsonData['OTA_HotelAvailGetRS']['AvailStatusMessages']['AvailStatusMessage']['20']['RestrictionStatus']['$']['Status']",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains HotelCode: \"+HotelCode+\" in response body\";",
									"pm.test(string, function () {",
									"expected = HotelCode;",
									"  pm.expect(pm.response.text()).to.include(expected);",
									"});",
									" ",
									"var string = \"Read restrictions - Contains first Roomtypecode: \"+RoomTypeCode1+\" as expected\";",
									"pm.test(string, function () {",
									"expected = RoomTypeCode1;",
									"pm.expect(roomtype1).to.include(expected);",
									"});",
									"",
									"var string = \"Read restrictions - Contains second Roomtypecode: \"+RoomTypeCode2+\" as expected\";",
									"pm.test(string, function () {",
									"expected = RoomTypeCode2;",
									"pm.expect(roomtype2).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties status for first Roomtypecode - Closed for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=0;i<20; i++)",
									"{",
									"if(getstatus1 == \"Close\" && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties status for second Roomtypecode - Open for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=20;i<40; i++)",
									"{",
									"if(getstatus2 == \"Open\" && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3b3baba6-a3e5-4b4e-8c74-ee4f3f25b3de",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"var month2 = date2.getMonth() + 1;",
									"if(month2 < 10)",
									"{",
									"month2 = \"0\" + month2;",
									"}",
									"var day2 = date2.getDate();",
									"if(day2 < 10)",
									"{",
									"    day2 = \"0\" + day2;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month2 + \"-\" + day2;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00011163\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00145205\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00145205\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelAvailGetRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2016-05-26T11:11:50-04:00\" EchoToken=\"001-1466531393\">\n   <HotelAvailRequests>\n      <HotelAvailRequest>\n         <HotelRef HotelCode=\"{{HotelCode}}\" />\n         <DateRange Start=\"{{StartDate}}\" End=\"{{EndDate}}\" />\n         <RatePlanCandidates>\n            <RatePlanCandidate RatePlanCode=\"SBX\" />\n         </RatePlanCandidates>\n      </HotelAvailRequest>\n   </HotelAvailRequests>\n</OTA_HotelAvailGetRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "API call to Get all Restrictions on a partner\n"
					},
					"response": []
				},
				{
					"name": "GetRestrictions(HotelAvailGetRQ) - Wrong date format",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error: 400\", function () {",
									"var expected = \"400\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error message as expected to enter correct date format 'Y-m-d'\", function () {",
									"var expected = \"Wrong date format. Expected format is `Y-m-d`\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3b3baba6-a3e5-4b4e-8c74-ee4f3f25b3de",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"var startdate = new Date();",
									"startdate.setDate(startdate.getDate() + 119);",
									"postman.setEnvironmentVariable(\"StartDate\",startdate)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelAvailGetRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2016-05-26T11:11:50-04:00\" EchoToken=\"001-1466531393\">\n   <HotelAvailRequests>\n      <HotelAvailRequest>\n         <HotelRef HotelCode=\"{{HotelCode}}\" />\n         <DateRange Start=\"{{StartDate}}\" End=\"{{EndDate}}\" />\n         <RatePlanCandidates>\n            <RatePlanCandidate RatePlanCode=\"SBX\" />\n         </RatePlanCandidates>\n      </HotelAvailRequest>\n   </HotelAvailRequests>\n</OTA_HotelAvailGetRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "API call to Get all Restrictions on a partner\n"
					},
					"response": []
				},
				{
					"name": "GetRestrictions(HotelAvailGetRQ) - Startdate > Enddate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Start date cannot be greater than end date\", function () {",
									"var contains = false;",
									"var expected = \"Start date cannot be greater than end date\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3b3baba6-a3e5-4b4e-8c74-ee4f3f25b3de",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 139);",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelAvailGetRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2016-05-26T11:11:50-04:00\" EchoToken=\"001-1466531393\">\n   <HotelAvailRequests>\n      <HotelAvailRequest>\n         <HotelRef HotelCode=\"{{HotelCode}}\" />\n         <DateRange Start=\"{{StartDate}}\" End=\"{{EndDate}}\" />\n         <RatePlanCandidates>\n            <RatePlanCandidate RatePlanCode=\"SBX\" />\n         </RatePlanCandidates>\n      </HotelAvailRequest>\n   </HotelAvailRequests>\n</OTA_HotelAvailGetRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "API call to Get all Restrictions on a partner\n"
					},
					"response": []
				},
				{
					"name": "GetRestrictions(HotelAvailGetRQ) - No Partner Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3b3baba6-a3e5-4b4e-8c74-ee4f3f25b3de",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"",
									"var hotelcode = \"\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelAvailGetRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2016-05-26T11:11:50-04:00\" EchoToken=\"001-1466531393\">\n   <HotelAvailRequests>\n      <HotelAvailRequest>\n         <HotelRef HotelCode=\"{{HotelCode}}\" />\n         <DateRange Start=\"{{StartDate}}\" End=\"{{EndDate}}\" />\n         <RatePlanCandidates>\n            <RatePlanCandidate RatePlanCode=\"SBX\" />\n         </RatePlanCandidates>\n      </HotelAvailRequest>\n   </HotelAvailRequests>\n</OTA_HotelAvailGetRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "API call to Get all Restrictions on a partner\n"
					},
					"response": []
				},
				{
					"name": "GetRestrictions(HotelAvailGetRQ) - Wrong Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 401 - Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Invalid credentials\", function () {",
									"var contains = false;",
									"var expected = \"Invalid credentials\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3b3baba6-a3e5-4b4e-8c74-ee4f3f25b3de",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00011163\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\", \"DEVINT\")",
									"{",
									"var hotelcode = \"00145205\";    ",
									"}",
									"",
									"var password = \"qa1\";",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelAvailGetRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2016-05-26T11:11:50-04:00\" EchoToken=\"001-1466531393\">\n   <HotelAvailRequests>\n      <HotelAvailRequest>\n         <HotelRef HotelCode=\"{{HotelCode}}\" />\n         <DateRange Start=\"{{StartDate}}\" End=\"{{EndDate}}\" />\n         <RatePlanCandidates>\n            <RatePlanCandidate RatePlanCode=\"SBX\" />\n         </RatePlanCandidates>\n      </HotelAvailRequest>\n   </HotelAvailRequests>\n</OTA_HotelAvailGetRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "API call to Get all Restrictions on a partner\n"
					},
					"response": []
				},
				{
					"name": "GetRestrictions(HotelAvailGetRQ) - Invalid username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 401 - Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Username could not be found\", function () {",
									"var contains = false;",
									"var expected = \"Username could not be found\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3b3baba6-a3e5-4b4e-8c74-ee4f3f25b3de",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var username = \"ghfgh\";",
									"var password = \"password\";",
									"postman.setEnvironmentVariable(\"password\", password); ",
									"postman.setEnvironmentVariable(\"username\", username);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelAvailGetRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2016-05-26T11:11:50-04:00\" EchoToken=\"001-1466531393\">\n   <HotelAvailRequests>\n      <HotelAvailRequest>\n         <HotelRef HotelCode=\"{{HotelCode}}\" />\n         <DateRange Start=\"{{StartDate}}\" End=\"{{EndDate}}\" />\n         <RatePlanCandidates>\n            <RatePlanCandidate RatePlanCode=\"SBX\" />\n         </RatePlanCandidates>\n      </HotelAvailRequest>\n   </HotelAvailRequests>\n</OTA_HotelAvailGetRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "API call to Get all Restrictions on a partner\n"
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelInvCountNotif)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5ae07df2-03ad-4f30-a8ec-15fe12225b2e",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if (month < 10) {",
									"    month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if (day < 10) {",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if (hours < 10) {",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if (min < 10) {",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if (sec < 10) {",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day + \"T\" + hours + \":\" + min + \":\" + sec + \".\" + milli + \"Z\";",
									"postman.setEnvironmentVariable(\"Date\", date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month1 = date1.getMonth() + 1;",
									"if (month1 < 10) {",
									"    month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if (day1 < 10) {",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"var month2 = date2.getMonth() + 1;",
									"if (month2 < 10) {",
									"    month2 = \"0\" + month2;",
									"}",
									"var day2 = date2.getDate();",
									"if (day2 < 10) {",
									"    day2 = \"0\" + day2;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month2 + \"-\" + day2;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									"var Count1 = \"20\";",
									"var Count2 = \"10\";",
									"",
									"if (pm.environment.name == \"SANDBOX_ENV\") {",
									"    var username = \"travelclick\";",
									"    var password = \"password\";",
									"    var hotelcode = \"00011163\";",
									"    var RoomTypeCode1 = \"456365\";",
									"    var RoomTypeCode2 = \"434354\";",
									"} else if (pm.environment.name == \"PREPROD\") {",
									"    var username = \"travelclick\";",
									"    var password = \"password\";",
									"    var hotelcode = \"00145205\";",
									"    var RoomTypeCode1 = \"328383\";",
									"    var RoomTypeCode2 = \"334857\";",
									"} else if(pm.environment.name ==\"DEVINT\",\"LOCAL\") {",
									"    var username = \"travelclick\";",
									"    var password = \"password\";",
									"    var hotelcode = \"00145205\";",
									"    var RoomTypeCode1 = \"328383\";",
									"    var RoomTypeCode2 = \"463866\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"postman.setEnvironmentVariable(\"Count1\", Count1);",
									"postman.setEnvironmentVariable(\"Count2\", Count2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelInvCountNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <Inventories HotelCode=\"{{HotelCode}}\">\n      <Inventory>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" />\n         <InvCounts>\n            <InvCount Count=\"{{Count1}}\" CountType=\"2\" />\n         </InvCounts>\n      </Inventory>\n      <Inventory>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\" />\n         <InvCounts>\n            <InvCount Count=\"{{Count2}}\" CountType=\"2\" />\n         </InvCounts>\n      </Inventory>\n   </Inventories>\n</OTA_HotelInvCountNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Update availability"
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelInvCountNotif) - Wrong Date format",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error: 400\", function () {",
									"var expected = \"400\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error message as expected to enter correct date format 'Y-m-d'\", function () {",
									"var expected = \"Wrong date format. Expected format is `Y-m-d`\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5ae07df2-03ad-4f30-a8ec-15fe12225b2e",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"var startdate = new Date();",
									"startdate.setDate(startdate.getDate() + 119);",
									"postman.setEnvironmentVariable(\"StartDate\",startdate)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelInvCountNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <Inventories HotelCode=\"{{HotelCode}}\">\n      <Inventory>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" />\n         <InvCounts>\n            <InvCount Count=\"{{Count1}}\" CountType=\"2\" />\n         </InvCounts>\n      </Inventory>\n      <Inventory>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\" />\n         <InvCounts>\n            <InvCount Count=\"{{Count2}}\" CountType=\"2\" />\n         </InvCounts>\n      </Inventory>\n   </Inventories>\n</OTA_HotelInvCountNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Update availability"
					},
					"response": []
				},
				{
					"name": "Update availabilties(HotelInvCountNotif) - StartDate > Enddate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Start date cannot be greater than end date\", function () {",
									"var contains = false;",
									"var expected = \"Start date cannot be greater than end date\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5ae07df2-03ad-4f30-a8ec-15fe12225b2e",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 139);",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelInvCountNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <Inventories HotelCode=\"{{HotelCode}}\">\n      <Inventory>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" />\n         <InvCounts>\n            <InvCount Count=\"{{Count1}}\" CountType=\"2\" />\n         </InvCounts>\n      </Inventory>\n      <Inventory>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\" />\n         <InvCounts>\n            <InvCount Count=\"{{Count2}}\" CountType=\"2\" />\n         </InvCounts>\n      </Inventory>\n   </Inventories>\n</OTA_HotelInvCountNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Update availability"
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelInvCountNotif) - Wrong Product Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5ae07df2-03ad-4f30-a8ec-15fe12225b2e",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"",
									"var RoomTypeCode1 = \"328\";",
									"var count2 = 15;",
									"postman.setEnvironmentVariable(\"Count2\", count2);",
									"",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelInvCountNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <Inventories HotelCode=\"{{HotelCode}}\">\n      <Inventory>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" />\n         <InvCounts>\n            <InvCount Count=\"{{Count1}}\" CountType=\"2\" />\n         </InvCounts>\n      </Inventory>\n      <Inventory>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\" />\n         <InvCounts>\n            <InvCount Count=\"{{Count2}}\" CountType=\"2\" />\n         </InvCounts>\n      </Inventory>\n   </Inventories>\n</OTA_HotelInvCountNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Update availability"
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelInvCountNotif) - No Partner Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5ae07df2-03ad-4f30-a8ec-15fe12225b2e",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var RoomTypeCode1 = \"456365\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\",\"DEVINT\",\"LOCAL\")",
									"{",
									"var RoomTypeCode1 = \"328383\";    ",
									"}",
									"",
									"var hotelcode = \"\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable('RoomTypeCode1',RoomTypeCode1);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelInvCountNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <Inventories HotelCode=\"{{HotelCode}}\">\n      <Inventory>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" />\n         <InvCounts>\n            <InvCount Count=\"{{Count1}}\" CountType=\"2\" />\n         </InvCounts>\n      </Inventory>\n      <Inventory>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\" />\n         <InvCounts>\n            <InvCount Count=\"{{Count2}}\" CountType=\"2\" />\n         </InvCounts>\n      </Inventory>\n   </Inventories>\n</OTA_HotelInvCountNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Update availability"
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelInvCountNotif) - Wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 401 - Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Invalid credentials\", function () {",
									"var contains = false;",
									"var expected = \"Invalid credentials\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5ae07df2-03ad-4f30-a8ec-15fe12225b2e",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00011163\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\",\"DEVINT\",\"LOCAL\")",
									"{",
									"var hotelcode = \"00145205\";    ",
									"}",
									"",
									"var password = \"qa1\";",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelInvCountNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <Inventories HotelCode=\"{{HotelCode}}\">\n      <Inventory>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" />\n         <InvCounts>\n            <InvCount Count=\"{{Count1}}\" CountType=\"2\" />\n         </InvCounts>\n      </Inventory>\n      <Inventory>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\" />\n         <InvCounts>\n            <InvCount Count=\"{{Count2}}\" CountType=\"2\" />\n         </InvCounts>\n      </Inventory>\n   </Inventories>\n</OTA_HotelInvCountNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Update availability"
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelInvCountNotif) - Invalid username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 401 - Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Username could not be found\", function () {",
									"var contains = false;",
									"var expected = \"Username could not be found\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5ae07df2-03ad-4f30-a8ec-15fe12225b2e",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var username = \"ghfgh\";",
									"var password = \"password\";",
									"postman.setEnvironmentVariable(\"password\", password); ",
									"postman.setEnvironmentVariable(\"username\", username);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelInvCountNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <Inventories HotelCode=\"{{HotelCode}}\">\n      <Inventory>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" />\n         <InvCounts>\n            <InvCount Count=\"{{Count1}}\" CountType=\"2\" />\n         </InvCounts>\n      </Inventory>\n      <Inventory>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\" />\n         <InvCounts>\n            <InvCount Count=\"{{Count2}}\" CountType=\"2\" />\n         </InvCounts>\n      </Inventory>\n   </Inventories>\n</OTA_HotelInvCountNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Update availability"
					},
					"response": []
				},
				{
					"name": "Get Availabilities(HotelInvCountRQ)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var count2 = postman.getEnvironmentVariable('Count2');",
									"",
									"var roomtype1 = jsonData['OTA_HotelInvCountRS']['Inventories']['Inventory']['0']['StatusApplicationControl']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['OTA_HotelInvCountRS']['Inventories']['Inventory']['20']['StatusApplicationControl']['$']['InvTypeCode'];",
									"var getcount1 = jsonData['OTA_HotelInvCountRS']['Inventories']['Inventory']['0']['InvCounts']['InvCount']['$']['Count'];",
									"var getcount2 = jsonData['OTA_HotelInvCountRS']['Inventories']['Inventory']['20']['InvCounts']['InvCount']['$']['Count'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains HoteCode value\", function () {",
									"expected = HotelCode;",
									"  pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains first Room Code as expected\", function () {",
									"expected = RoomTypeCode1;",
									"pm.expect(roomtype1).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains second Room Code as expected\", function () {",
									"expected = RoomTypeCode2;",
									"pm.expect(roomtype2).to.include(expected);",
									"});",
									"",
									"var string = \"Read availabilties for first Room Code: \"+RoomTypeCode1+\", Available for consecutive 20 days as expected\"",
									"pm.test(string, function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=0;i<20; i++)",
									"{",
									"if(getcount1 == 0 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"var string = \"Read availabilties for first Room Code: \"+RoomTypeCode2+\", Available for consecutive 20 days as expected\"",
									"pm.test(string, function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=20;i<40; i++)",
									"{",
									"if(getcount2 == count2 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e5e36db4-3723-498f-8243-df5a77cdf580",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if (month < 10) {",
									"    month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if (day < 10) {",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if (hours < 10) {",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if (min < 10) {",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if (sec < 10) {",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day + \"T\" + hours + \":\" + min + \":\" + sec + \".\" + milli + \"Z\";",
									"postman.setEnvironmentVariable(\"Date\", date);",
									"",
									"if (pm.environment.name == \"SANDBOX_ENV\") {",
									"    var username = \"travelclick\";",
									"    var password = \"password\";",
									"    var hotelcode = \"00011163\";",
									"    var RoomTypeCode1 = \"456365\";",
									"    var RoomTypeCode2 = \"434354\";",
									"} else if (pm.environment.name == \"PREPROD\") {",
									"    var username = \"travelclick\";",
									"    var password = \"password\";",
									"    var hotelcode = \"00145205\";",
									"    var RoomTypeCode1 = \"328383\";",
									"    var RoomTypeCode2 = \"334857\";",
									"} else if(pm.environment.name ==\"DEVINT\",\"LOCAL\") {",
									"    var username = \"travelclick\";",
									"    var password = \"password\";",
									"    var hotelcode = \"00145205\";",
									"    var RoomTypeCode1 = \"328383\";",
									"    var RoomTypeCode2 = \"463866\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelInvCountRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <HotelInvCountRequests>\n      <HotelInvCountRequest>\n         <HotelRef HotelCode=\"{{HotelCode}}\" />\n         <DateRange Start=\"{{StartDate}}\" End=\"{{EndDate}}\" />\n         <RoomTypeCandidates>\n            <RoomTypeCandidate RoomTypeCode=\"{{RoomTypeCode1}}\" />\n            <RoomTypeCandidate RoomTypeCode=\"{{RoomTypeCode2}}\" />\n         </RoomTypeCandidates>\n      </HotelInvCountRequest>\n   </HotelInvCountRequests>\n</OTA_HotelInvCountRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "API call to get all availabilities\n"
					},
					"response": []
				},
				{
					"name": "Get Availabilities(HotelInvCountRQ) - Wrong date format",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error: 400\", function () {",
									"var expected = \"400\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error message as expected to enter correct date format 'Y-m-d'\", function () {",
									"var expected = \"Wrong date format. Expected format is `Y-m-d`\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e5e36db4-3723-498f-8243-df5a77cdf580",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"var startdate = new Date();",
									"startdate.setDate(startdate.getDate() + 119);",
									"postman.setEnvironmentVariable(\"StartDate\",startdate)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelInvCountRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <HotelInvCountRequests>\n      <HotelInvCountRequest>\n         <HotelRef HotelCode=\"{{HotelCode}}\" />\n         <DateRange Start=\"{{StartDate}}\" End=\"{{EndDate}}\" />\n         <RoomTypeCandidates>\n            <RoomTypeCandidate RoomTypeCode=\"{{RoomTypeCode1}}\" />\n            <RoomTypeCandidate RoomTypeCode=\"{{RoomTypeCode2}}\" />\n         </RoomTypeCandidates>\n      </HotelInvCountRequest>\n   </HotelInvCountRequests>\n</OTA_HotelInvCountRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "API call to get all availabilities\n"
					},
					"response": []
				},
				{
					"name": "Get Availabilities(HotelInvCountRQ) - Startdate > Enddate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Start date cannot be greater than end date\", function () {",
									"var contains = false;",
									"var expected = \"Start date cannot be greater than end date\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e5e36db4-3723-498f-8243-df5a77cdf580",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 139);",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelInvCountRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <HotelInvCountRequests>\n      <HotelInvCountRequest>\n         <HotelRef HotelCode=\"{{HotelCode}}\" />\n         <DateRange Start=\"{{StartDate}}\" End=\"{{EndDate}}\" />\n         <RoomTypeCandidates>\n            <RoomTypeCandidate RoomTypeCode=\"{{RoomTypeCode1}}\" />\n            <RoomTypeCandidate RoomTypeCode=\"{{RoomTypeCode2}}\" />\n         </RoomTypeCandidates>\n      </HotelInvCountRequest>\n   </HotelInvCountRequests>\n</OTA_HotelInvCountRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "API call to get all availabilities\n"
					},
					"response": []
				},
				{
					"name": "Get Availabilities(HotelInvCountRQ) - No Product Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e5e36db4-3723-498f-8243-df5a77cdf580",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"",
									"var hotelcode = \"\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelInvCountRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <HotelInvCountRequests>\n      <HotelInvCountRequest>\n         <HotelRef HotelCode=\"{{HotelCode}}\" />\n         <DateRange Start=\"{{StartDate}}\" End=\"{{EndDate}}\" />\n         <RoomTypeCandidates>\n            <RoomTypeCandidate RoomTypeCode=\"{{RoomTypeCode1}}\" />\n            <RoomTypeCandidate RoomTypeCode=\"{{RoomTypeCode2}}\" />\n         </RoomTypeCandidates>\n      </HotelInvCountRequest>\n   </HotelInvCountRequests>\n</OTA_HotelInvCountRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "API call to get all availabilities\n"
					},
					"response": []
				},
				{
					"name": "Get Availabilities(HotelInvCountRQ) - Wrong Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 401 - Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Invalid credentials\", function () {",
									"var contains = false;",
									"var expected = \"Invalid credentials\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e5e36db4-3723-498f-8243-df5a77cdf580",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00011163\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00142835\";",
									"}",
									"else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var hotelcode = \"00145205\";    ",
									"}",
									"",
									"var password = \"qa1\";",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelInvCountRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <HotelInvCountRequests>\n      <HotelInvCountRequest>\n         <HotelRef HotelCode=\"{{HotelCode}}\" />\n         <DateRange Start=\"{{StartDate}}\" End=\"{{EndDate}}\" />\n         <RoomTypeCandidates>\n            <RoomTypeCandidate RoomTypeCode=\"{{RoomTypeCode1}}\" />\n            <RoomTypeCandidate RoomTypeCode=\"{{RoomTypeCode2}}\" />\n         </RoomTypeCandidates>\n      </HotelInvCountRequest>\n   </HotelInvCountRequests>\n</OTA_HotelInvCountRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "API call to get all availabilities\n"
					},
					"response": []
				},
				{
					"name": "Get Availabilities(HotelInvCountRQ) - Invalid username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 401 - Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Username could not be found\", function () {",
									"var contains = false;",
									"var expected = \"Username could not be found\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e5e36db4-3723-498f-8243-df5a77cdf580",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var username = \"ghfgh\";",
									"var password = \"password\";",
									"postman.setEnvironmentVariable(\"password\", password); ",
									"postman.setEnvironmentVariable(\"username\", username);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelInvCountRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <HotelInvCountRequests>\n      <HotelInvCountRequest>\n         <HotelRef HotelCode=\"{{HotelCode}}\" />\n         <DateRange Start=\"{{StartDate}}\" End=\"{{EndDate}}\" />\n         <RoomTypeCandidates>\n            <RoomTypeCandidate RoomTypeCode=\"{{RoomTypeCode1}}\" />\n            <RoomTypeCandidate RoomTypeCode=\"{{RoomTypeCode2}}\" />\n         </RoomTypeCandidates>\n      </HotelInvCountRequest>\n   </HotelInvCountRequests>\n</OTA_HotelInvCountRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "API call to get all availabilities\n"
					},
					"response": []
				},
				{
					"name": "Update Rates(HotelRatePlanNotifRQ)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "db4ed632-624a-4a0e-bc8c-9444d622899b",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"var month2 = date2.getMonth() + 1;",
									"if(month2 < 10)",
									"{",
									"month2 = \"0\" + month2;",
									"}",
									"var day2 = date2.getDate();",
									"if(day2 < 10)",
									"{",
									"    day2 = \"0\" + day2;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month2 + \"-\" + day2;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									"var Price1 = \"120\";",
									"var Price2 = \"110\";",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00011163\";",
									"var RoomTypeCode1 = \"456365\";",
									"var RoomTypeCode2 = \"434354\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00145205\";",
									"var RoomTypeCode1 = \"328383\";",
									"var RoomTypeCode2 = \"334857\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00145205\";",
									"var RoomTypeCode1 = \"328383\";",
									"var RoomTypeCode2 = \"463866\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"postman.setEnvironmentVariable(\"Price1\", Price1);",
									"postman.setEnvironmentVariable(\"Price2\", Price2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelRatePlanNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <RatePlans HotelCode=\"{{HotelCode}}\">\n      <RatePlan RatePlanCode=\"SBX\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\">\n         <Rates>\n            <Rate InvTypeCode=\"{{RoomTypeCode1}}\" CurrencyCode=\"EUR\">\n               <BaseByGuestAmts>\n                  <BaseByGuestAmt AmountAfterTax=\"{{Price1}}\" />\n               </BaseByGuestAmts>\n            </Rate>\n            <Rate InvTypeCode=\"{{RoomTypeCode2}}\" CurrencyCode=\"EUR\">\n               <BaseByGuestAmts>\n                  <BaseByGuestAmt AmountAfterTax=\"{{Price2}}\" />\n               </BaseByGuestAmts>\n            </Rate>\n         </Rates>\n      </RatePlan>\n   </RatePlans>\n</OTA_HotelRatePlanNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Update rates API call\n"
					},
					"response": []
				},
				{
					"name": "Update Rates(HotelRatePlanNotifRQ) - Wrong Date format",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error: 400\", function () {",
									"var expected = \"400\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error message as expected to enter correct date format 'Y-m-d'\", function () {",
									"var expected = \"Wrong date format. Expected format is `Y-m-d`\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "db4ed632-624a-4a0e-bc8c-9444d622899b",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"var startdate = new Date();",
									"startdate.setDate(startdate.getDate() + 119);",
									"postman.setEnvironmentVariable(\"StartDate\",startdate)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelRatePlanNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <RatePlans HotelCode=\"{{HotelCode}}\">\n      <RatePlan RatePlanCode=\"SBX\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\">\n         <Rates>\n            <Rate InvTypeCode=\"{{RoomTypeCode1}}\" CurrencyCode=\"EUR\">\n               <BaseByGuestAmts>\n                  <BaseByGuestAmt AmountAfterTax=\"{{Price1}}\" />\n               </BaseByGuestAmts>\n            </Rate>\n            <Rate InvTypeCode=\"{{RoomTypeCode2}}\" CurrencyCode=\"EUR\">\n               <BaseByGuestAmts>\n                  <BaseByGuestAmt AmountAfterTax=\"{{Price2}}\" />\n               </BaseByGuestAmts>\n            </Rate>\n         </Rates>\n      </RatePlan>\n   </RatePlans>\n</OTA_HotelRatePlanNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Update rates API call\n"
					},
					"response": []
				},
				{
					"name": "Update Rates(HotelRatePlanNotifRQ) - StartDate > EndDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Start date cannot be greater than end date\", function () {",
									"var contains = false;",
									"var expected = \"Start date cannot be greater than end date\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "db4ed632-624a-4a0e-bc8c-9444d622899b",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 139);",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelRatePlanNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <RatePlans HotelCode=\"{{HotelCode}}\">\n      <RatePlan RatePlanCode=\"SBX\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\">\n         <Rates>\n            <Rate InvTypeCode=\"{{RoomTypeCode1}}\" CurrencyCode=\"EUR\">\n               <BaseByGuestAmts>\n                  <BaseByGuestAmt AmountAfterTax=\"{{Price1}}\" />\n               </BaseByGuestAmts>\n            </Rate>\n            <Rate InvTypeCode=\"{{RoomTypeCode2}}\" CurrencyCode=\"EUR\">\n               <BaseByGuestAmts>\n                  <BaseByGuestAmt AmountAfterTax=\"{{Price2}}\" />\n               </BaseByGuestAmts>\n            </Rate>\n         </Rates>\n      </RatePlan>\n   </RatePlans>\n</OTA_HotelRatePlanNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Update rates API call\n"
					},
					"response": []
				},
				{
					"name": "Update Rates(HotelRatePlanNotifRQ) - Wrong Product Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains error message : The product code `\"+RoomTypeCode1+\"` for Partner `\"+HotelCode+\"` is not registered in SBX Channel Manager\";",
									"pm.test(string, function () {",
									"var contains = false;",
									"var expected = \"400\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "db4ed632-624a-4a0e-bc8c-9444d622899b",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"",
									"var RoomTypeCode1 = \"328\";",
									"",
									"",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelRatePlanNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <RatePlans HotelCode=\"{{HotelCode}}\">\n      <RatePlan RatePlanCode=\"SBX\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\">\n         <Rates>\n            <Rate InvTypeCode=\"{{RoomTypeCode1}}\" CurrencyCode=\"EUR\">\n               <BaseByGuestAmts>\n                  <BaseByGuestAmt AmountAfterTax=\"{{Price1}}\" />\n               </BaseByGuestAmts>\n            </Rate>\n            <Rate InvTypeCode=\"{{RoomTypeCode2}}\" CurrencyCode=\"EUR\">\n               <BaseByGuestAmts>\n                  <BaseByGuestAmt AmountAfterTax=\"{{Price2}}\" />\n               </BaseByGuestAmts>\n            </Rate>\n         </Rates>\n      </RatePlan>\n   </RatePlans>\n</OTA_HotelRatePlanNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Update rates API call\n"
					},
					"response": []
				},
				{
					"name": "Update Rates(HotelRatePlanNotifRQ) - No Partner Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "db4ed632-624a-4a0e-bc8c-9444d622899b",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var RoomTypeCode1 = \"456365\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\",\"DEVINT\",\"LOCAL\")",
									"{",
									"var RoomTypeCode1 = \"328383\";    ",
									"}",
									"",
									"var hotelcode = \"\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable('RoomTypeCode1',RoomTypeCode1);  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelRatePlanNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <RatePlans HotelCode=\"{{HotelCode}}\">\n      <RatePlan RatePlanCode=\"SBX\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\">\n         <Rates>\n            <Rate InvTypeCode=\"{{RoomTypeCode1}}\" CurrencyCode=\"EUR\">\n               <BaseByGuestAmts>\n                  <BaseByGuestAmt AmountAfterTax=\"{{Price1}}\" />\n               </BaseByGuestAmts>\n            </Rate>\n            <Rate InvTypeCode=\"{{RoomTypeCode2}}\" CurrencyCode=\"EUR\">\n               <BaseByGuestAmts>\n                  <BaseByGuestAmt AmountAfterTax=\"{{Price2}}\" />\n               </BaseByGuestAmts>\n            </Rate>\n         </Rates>\n      </RatePlan>\n   </RatePlans>\n</OTA_HotelRatePlanNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Update rates API call\n"
					},
					"response": []
				},
				{
					"name": "Update Rates(HotelRatePlanNotifRQ) - Wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 401 - Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Invalid credentials\", function () {",
									"var contains = false;",
									"var expected = \"Invalid credentials\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "db4ed632-624a-4a0e-bc8c-9444d622899b",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00011163\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\",\"DEVINT\",\"LOCAL\")",
									"{",
									"var hotelcode = \"00145205\";    ",
									"}",
									"",
									"var password = \"qa1\";",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelRatePlanNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <RatePlans HotelCode=\"{{HotelCode}}\">\n      <RatePlan RatePlanCode=\"SBX\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\">\n         <Rates>\n            <Rate InvTypeCode=\"{{RoomTypeCode1}}\" CurrencyCode=\"EUR\">\n               <BaseByGuestAmts>\n                  <BaseByGuestAmt AmountAfterTax=\"{{Price1}}\" />\n               </BaseByGuestAmts>\n            </Rate>\n            <Rate InvTypeCode=\"{{RoomTypeCode2}}\" CurrencyCode=\"EUR\">\n               <BaseByGuestAmts>\n                  <BaseByGuestAmt AmountAfterTax=\"{{Price2}}\" />\n               </BaseByGuestAmts>\n            </Rate>\n         </Rates>\n      </RatePlan>\n   </RatePlans>\n</OTA_HotelRatePlanNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Update rates API call\n"
					},
					"response": []
				},
				{
					"name": "Update Rates(HotelRatePlanNotifRQ) - Invalid Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 401 - Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Username could not be found\", function () {",
									"var contains = false;",
									"var expected = \"Username could not be found\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "db4ed632-624a-4a0e-bc8c-9444d622899b",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var username = \"ghfgh\";",
									"var password = \"password\";",
									"postman.setEnvironmentVariable(\"password\", password); ",
									"postman.setEnvironmentVariable(\"username\", username);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelRatePlanNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <RatePlans HotelCode=\"{{HotelCode}}\">\n      <RatePlan RatePlanCode=\"SBX\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\">\n         <Rates>\n            <Rate InvTypeCode=\"{{RoomTypeCode1}}\" CurrencyCode=\"EUR\">\n               <BaseByGuestAmts>\n                  <BaseByGuestAmt AmountAfterTax=\"{{Price1}}\" />\n               </BaseByGuestAmts>\n            </Rate>\n            <Rate InvTypeCode=\"{{RoomTypeCode2}}\" CurrencyCode=\"EUR\">\n               <BaseByGuestAmts>\n                  <BaseByGuestAmt AmountAfterTax=\"{{Price2}}\" />\n               </BaseByGuestAmts>\n            </Rate>\n         </Rates>\n      </RatePlan>\n   </RatePlans>\n</OTA_HotelRatePlanNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Update rates API call\n"
					},
					"response": []
				},
				{
					"name": "Get Rates(HotelRatePlanRQ)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var price1 = postman.getEnvironmentVariable('Price1');",
									"var price2 = postman.getEnvironmentVariable('Price2');",
									"",
									"var roomtype1 = jsonData['OTA_HotelRatePlanRS']['RatePlans']['RatePlan']['0']['Rates']['Rate']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['OTA_HotelRatePlanRS']['RatePlans']['RatePlan']['20']['Rates']['Rate']['$']['InvTypeCode'];",
									"var getprice1 = jsonData['OTA_HotelRatePlanRS']['RatePlans']['RatePlan']['0']['Rates']['Rate']['BaseByGuestAmts']['BaseByGuestAmt']['$']['AmountAfterTax'];",
									"var getprice2 = jsonData['OTA_HotelRatePlanRS']['RatePlans']['RatePlan']['20']['Rates']['Rate']['BaseByGuestAmts']['BaseByGuestAmt']['$']['AmountAfterTax'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains HoteCode value\", function () {",
									"expected = HotelCode;",
									"  pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains first Room Code as expected\", function () {",
									"expected = RoomTypeCode1;",
									"pm.expect(roomtype1).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains second Room Code as expected\", function () {",
									"expected = RoomTypeCode2;",
									"pm.expect(roomtype2).to.include(expected);",
									"});",
									"",
									"var string = \"Read room rates for first Room Code: \"+RoomTypeCode1+\", Available for consecutive 20 days as expected\"",
									"pm.test(string, function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=0;i<20; i++)",
									"{",
									"if(getprice1 == price1 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"var string = \"Read room rates for first Room Code: \"+RoomTypeCode2+\", Available for consecutive 20 days as expected\"",
									"pm.test(string, function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=20;i<40; i++)",
									"{",
									"if(getprice2 == price2 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c66bee8d-65fe-448a-aa3e-fc58214d29c2",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"var month2 = date2.getMonth() + 1;",
									"if(month2 < 10)",
									"{",
									"month2 = \"0\" + month2;",
									"}",
									"var day2 = date2.getDate();",
									"if(day2 < 10)",
									"{",
									"    day2 = \"0\" + day2;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month2 + \"-\" + day2;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00011163\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00145205\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00145205\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelRatePlanRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <RatePlans>\n      <RatePlan>\n         <HotelRef HotelCode=\"{{HotelCode}}\" />\n         <DateRange Start=\"{{StartDate}}\" End=\"{{EndDate}}\" />\n         <RatePlanCandidates>\n            <RatePlanCandidate RatePlanCode=\"SBX\" />\n         </RatePlanCandidates>\n      </RatePlan>\n   </RatePlans>\n</OTA_HotelRatePlanRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Get Product or Room Rates for Specific dates API Call\n"
					},
					"response": []
				},
				{
					"name": "Get Rates(HotelRatePlanRQ) - Wrong Date format",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error: 400\", function () {",
									"var expected = \"400\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error message as expected to enter correct date format 'Y-m-d'\", function () {",
									"var expected = \"Wrong date format. Expected format is `Y-m-d`\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c66bee8d-65fe-448a-aa3e-fc58214d29c2",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"var startdate = new Date();",
									"startdate.setDate(startdate.getDate() + 119);",
									"postman.setEnvironmentVariable(\"StartDate\",startdate)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelRatePlanRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <RatePlans>\n      <RatePlan>\n         <HotelRef HotelCode=\"{{HotelCode}}\" />\n         <DateRange Start=\"{{StartDate}}\" End=\"{{EndDate}}\" />\n         <RatePlanCandidates>\n            <RatePlanCandidate RatePlanCode=\"SBX\" />\n         </RatePlanCandidates>\n      </RatePlan>\n   </RatePlans>\n</OTA_HotelRatePlanRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Get Product or Room Rates for Specific dates API Call\n"
					},
					"response": []
				},
				{
					"name": "Get Rates(HotelRatePlanRQ) - Startdate > Enddate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Start date cannot be greater than end date\", function () {",
									"var contains = false;",
									"var expected = \"Start date cannot be greater than end date\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c66bee8d-65fe-448a-aa3e-fc58214d29c2",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 139);",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelRatePlanRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <RatePlans>\n      <RatePlan>\n         <HotelRef HotelCode=\"{{HotelCode}}\" />\n         <DateRange Start=\"{{StartDate}}\" End=\"{{EndDate}}\" />\n         <RatePlanCandidates>\n            <RatePlanCandidate RatePlanCode=\"SBX\" />\n         </RatePlanCandidates>\n      </RatePlan>\n   </RatePlans>\n</OTA_HotelRatePlanRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Get Product or Room Rates for Specific dates API Call\n"
					},
					"response": []
				},
				{
					"name": "Get Rates(HotelRatePlanRQ) - No Partner Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c66bee8d-65fe-448a-aa3e-fc58214d29c2",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"",
									"var hotelcode = \"\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelRatePlanRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <RatePlans>\n      <RatePlan>\n         <HotelRef HotelCode=\"{{HotelCode}}\" />\n         <DateRange Start=\"{{StartDate}}\" End=\"{{EndDate}}\" />\n         <RatePlanCandidates>\n            <RatePlanCandidate RatePlanCode=\"SBX\" />\n         </RatePlanCandidates>\n      </RatePlan>\n   </RatePlans>\n</OTA_HotelRatePlanRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Get Product or Room Rates for Specific dates API Call\n"
					},
					"response": []
				},
				{
					"name": "Get Rates(HotelRatePlanRQ) - Wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 401 - Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Invalid credentials\", function () {",
									"var contains = false;",
									"var expected = \"Invalid credentials\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c66bee8d-65fe-448a-aa3e-fc58214d29c2",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00011163\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\",\"DEVINT\",\"LOCAL\")",
									"{",
									"var hotelcode = \"00145205\";    ",
									"}",
									"",
									"var password = \"qa1\";",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelRatePlanRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <RatePlans>\n      <RatePlan>\n         <HotelRef HotelCode=\"{{HotelCode}}\" />\n         <DateRange Start=\"{{StartDate}}\" End=\"{{EndDate}}\" />\n         <RatePlanCandidates>\n            <RatePlanCandidate RatePlanCode=\"SBX\" />\n         </RatePlanCandidates>\n      </RatePlan>\n   </RatePlans>\n</OTA_HotelRatePlanRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Get Product or Room Rates for Specific dates API Call\n"
					},
					"response": []
				},
				{
					"name": "Get Rates(HotelRatePlanRQ) - Invalid Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 401 - Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Username could not be found\", function () {",
									"var contains = false;",
									"var expected = \"Username could not be found\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c66bee8d-65fe-448a-aa3e-fc58214d29c2",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"",
									"var username = \"ghfgh\";",
									"var password = \"password\";",
									"postman.setEnvironmentVariable(\"password\", password); ",
									"postman.setEnvironmentVariable(\"username\", username);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelRatePlanRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <RatePlans>\n      <RatePlan>\n         <HotelRef HotelCode=\"{{HotelCode}}\" />\n         <DateRange Start=\"{{StartDate}}\" End=\"{{EndDate}}\" />\n         <RatePlanCandidates>\n            <RatePlanCandidate RatePlanCode=\"SBX\" />\n         </RatePlanCandidates>\n      </RatePlan>\n   </RatePlans>\n</OTA_HotelRatePlanRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Get Product or Room Rates for Specific dates API Call\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "BB8 - JSON API",
			"item": [
				{
					"name": "PIng",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5acf3c06-22db-408b-a4a6-ca232c2a3234",
								"exec": [
									"if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"bb8\";",
									"var password = \"SMyt2qUkuZXpeVKBe4j2765VNaBAHBc6SvyD3J3m\";",
									"}",
									"else if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var username = \"bb8\";",
									"var password = \"45nfg94zneqzmnwTtgtnjQU3xsH7H4WT9g6vdDmd\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"bb8\";",
									"var password = \"r3p8DjykAqFQ8HeYvVWvSsvL3gg94sMUsPJEJ5vP\";",
									"}",
									"else if(pm.environment.name == \"LOCAL\")",
									"{",
									"var username = \"bb8\";",
									"var password = \"w25atrJV9uGugu6e6by6yJdx5rvzJZVJF9z5nTAZ\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\",username);",
									"postman.setEnvironmentVariable(\"password\",password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/external/_ping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"_ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Rooms",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var data = JSON.parse(responseBody);",
									"var Count1 = postman.getEnvironmentVariable(\"Count1\");",
									"var Count2 = postman.getEnvironmentVariable(\"Count2\");",
									"var getSellablestatus1 = (data[0].isSellable).toString();",
									"var getSellablestatus2 = (data[1].isSellable).toString();",
									"var getReservablestatus1 = (data[0].isReservable).toString();",
									"var getReservablestatus2 = (data[1].isReservable).toString();",
									"",
									"pm.test(\"Status : 200 - Response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains Partner ID in response body\", function () {",
									"var expected = HotelCode;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Room 1 :\"+RoomTypeCode1+\" in Response body\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Room 2 :\"+RoomTypeCode2+\" in Response body\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode2;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Sellable is enabled for Room 1 :\"+RoomTypeCode1+\" in Response body\";",
									"pm.test(string, function () {",
									"var expected = \"true\";",
									"pm.expect(getSellablestatus1).to.include(expected);",
									"});",
									"",
									"var string = \"Sellable is disabled for Room 2 :\"+RoomTypeCode2+\" in Response body\";",
									"pm.test(string, function () {",
									"var expected = \"false\";",
									"pm.expect(getSellablestatus2).to.include(expected);",
									"});",
									"",
									"var string = \"Reservable is enabled for Room 1 :\"+RoomTypeCode1+\" in Response body\";",
									"pm.test(string, function () {",
									"var expected = \"true\";",
									"pm.expect(getReservablestatus1).to.include(expected);",
									"});",
									"",
									"var string = \"Reservable is enabled for Room 2 :\"+RoomTypeCode2+\" in Response body\";",
									"pm.test(string, function () {",
									"var expected = \"true\";",
									"pm.expect(getReservablestatus2).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d69e1a8-5992-4f76-bbf8-bccbec34eb15",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"date = date.getFullYear() + \"-\" + month + \"-\" + date.getDate();",
									"",
									"var startdate = new Date();",
									"startdate.setDate(startdate.getDate() + 62);",
									"",
									"var enddate = new Date();",
									"enddate.setDate(enddate.getDate() + 63);",
									"",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"postman.setEnvironmentVariable(\"StartDate\",startdate);",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									"",
									"if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00538264\";",
									"var RoomTypeCode1 = \"1017196\";",
									"var RoomTypeCode2 = \"1017194\";",
									"}",
									"else if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00011158\";",
									"var RoomTypeCode1 = \"467568\";",
									"var RoomTypeCode2 = \"5465478\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00532636\";",
									"var RoomTypeCode2 = \"980386\";",
									"var RoomTypeCode1 = \"980392\";",
									"}",
									"else if(pm.environment.name == \"LOCAL\")",
									"{",
									"var hotelcode = \"00019158\"",
									"var RoomTypeCode1 = \"110223\";",
									"var RoomTypeCode2 = \"110224\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/external/rooms?externalPartnerIds={{HotelCode}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"rooms"
							],
							"query": [
								{
									"key": "externalPartnerIds",
									"value": "{{HotelCode}}"
								},
								{
									"key": "externalUpdatedFrom",
									"value": " 2019-01-01T10:27:14.254Z",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Rooms - No Partner ID in API call",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"pm.test(\"Status : 400 - Bad request response\", function () {",
									"    pm.response.to.have.status(400)",
									"});",
									"",
									"pm.test(\"Contains error string with description : externalPartnerIds is mandatory\", function () {",
									"var expected = \"externalPartnerIds is mandatory\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d69e1a8-5992-4f76-bbf8-bccbec34eb15",
								"exec": [
									"",
									"var hotelcode = \"\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/external/rooms?",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"rooms"
							],
							"query": [
								{
									"key": "externalPartnerIds[]",
									"value": "{{HotelCode}}",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Rooms - No PartnerID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var hotelcode = postman.getEnvironmentVariable(\"HotelCode\");",
									"",
									"pm.test(\"Status : 400 - Bad request response\", function () {",
									"    pm.response.to.have.status(400)",
									"});",
									"",
									"pm.test(\"Contains error string with description\", function () {",
									"var expected = \"The partner with code `\"+hotelcode+\"`  has not been found\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d69e1a8-5992-4f76-bbf8-bccbec34eb15",
								"exec": [
									"",
									"var hotelcode = \"000111\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/external/rooms?externalPartnerIds={{HotelCode}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"rooms"
							],
							"query": [
								{
									"key": "externalPartnerIds",
									"value": "{{HotelCode}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Availability",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var hotelcode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"",
									"pm.test(\"Status : 200 - Response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains Response '[]' if call is success\", function () {",
									"var expected = [];",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d69e1a8-5992-4f76-bbf8-bccbec34eb15",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 62);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date1.getMilliseconds();",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 63);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date2.getMilliseconds();",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate1);",
									"postman.setEnvironmentVariable(\"EndDate\",enddate1);",
									"",
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var Count1 = 10;",
									"postman.setEnvironmentVariable(\"Count1\",Count1);",
									"",
									"if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00538264\";",
									"}",
									"else if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00011158\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00532636\";",
									"}",
									"else if(pm.environment.name == \"LOCAL\")",
									"{",
									"var hotelcode = \"00019158\"",
									"}",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "45nfg94zneqzmnwTtgtnjQU3xsH7H4WT9g6vdDmd",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"date\": \"{{StartDate}}\",\n    \"quantity\": {{Count1}},\n    \"type\": \"instant\",\n    \"externalRateBandId\": \"SBX\",\n    \"externalPartnerId\": \"{{HotelCode}}\",\n    \"externalRoomId\": \"{{RoomTypeCode1}}\",\n    \"externalCreatedAt\": \"{{Date}}\",\n    \"externalUpdatedAt\": \"{{Date}}\"\n  }\n]"
						},
						"url": {
							"raw": "{{host}}/api/external/availabilities?",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"availabilities"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Availability - Missing ExternalPartnerID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"pm.test(\"Status : 400 - Bad request response\", function () {",
									"    pm.response.to.have.status(400)",
									"});",
									"",
									"pm.test(\"Contains error string with description : Missing `externalPartnerId`\", function () {",
									"var expected = \"Missing `externalPartnerId`\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d69e1a8-5992-4f76-bbf8-bccbec34eb15",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "45nfg94zneqzmnwTtgtnjQU3xsH7H4WT9g6vdDmd",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"date\": \"{{StartDate}}\",\n    \"quantity\": 3,\n    \"type\": \"instant\",\n    \"externalRateBandId\": \"SBX\",\n    \"externalRoomId\": \"{{RoomTypeCode1}}\",\n    \"externalCreatedAt\": \"{{Date}}\",\n    \"externalUpdatedAt\": \"{{Date}}\"\n  }\n]"
						},
						"url": {
							"raw": "{{host}}/api/external/availabilities?",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"availabilities"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Availability - No PartnerID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var hotelcode = postman.getEnvironmentVariable(\"HotelCode\");",
									"",
									"pm.test(\"Status : 400 - Bad request response\", function () {",
									"    pm.response.to.have.status(400)",
									"});",
									"",
									"pm.test(\"Contains error string with description\", function () {",
									"var expected = \"The partner with code `\"+hotelcode+\"`  has not been found\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d69e1a8-5992-4f76-bbf8-bccbec34eb15",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"",
									"var hotelcode = \"000282161\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"date\": \"{{StartDate}}\",\n    \"quantity\": 3,\n    \"type\": \"instant\",\n    \"externalRateBandId\": \"SBX\",\n    \"externalPartnerId\": \"{{HotelCode}}\",\n    \"externalRoomId\": \"{{RoomTypeCode1}}\",\n    \"externalCreatedAt\": \"{{Date}}\",\n    \"externalUpdatedAt\": \"{{Date}}\"\n  }\n]"
						},
						"url": {
							"raw": "{{host}}/api/external/availabilities?",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"availabilities"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Availability - Wrong Product Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var hotelcode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"",
									"pm.test(\"Status : 400 - Bad request response\", function () {",
									"    pm.response.to.have.status(400)",
									"});",
									"",
									"pm.test(\"Contains error string with description\", function () {",
									"var expected = \"The product code `\"+RoomTypeCode1+\"` for Partner `\"+hotelcode+\"` is not registered in SBX Channel Manager.\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d69e1a8-5992-4f76-bbf8-bccbec34eb15",
								"exec": [
									"if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00538264\";",
									"}",
									"else if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00011158\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00532636\";",
									"}",
									"else if(pm.environment.name == \"LOCAL\")",
									"{",
									"var hotelcode = \"00019158\"",
									"}",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"",
									"var RoomTypeCode1= \"980378\";",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"date\": \"{{StartDate}}\",\n    \"quantity\": 3,\n    \"type\": \"instant\",\n    \"rateBandCode\": \"SBX\",\n    \"externalPartnerId\": \"{{HotelCode}}\",\n    \"externalRoomId\": \"{{RoomTypeCode1}}\",\n    \"externalCreatedAt\": \"{{Date}}\",\n    \"externalUpdatedAt\": \"{{Date}}\"\n  }\n]"
						},
						"url": {
							"raw": "{{host}}/api/external/availabilities?",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"availabilities"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Availability",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var data = JSON.parse(responseBody);",
									"var Count1 = postman.getEnvironmentVariable(\"Count1\");",
									"var Count2 = postman.getEnvironmentVariable(\"Count2\");",
									"var getPrice1 = data[0].quantity;",
									"getPrice1 = getPrice1.toString();",
									"var getType1 = data[0].type;",
									"getType1 = getType1.toString();",
									"",
									"pm.test(\"Status : 200 - Response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains Partner ID in Response body\", function () {",
									"var expected = HotelCode;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Room 1 :\"+RoomTypeCode1+\" in Response body\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Room 1 :\"+RoomTypeCode1+\" and quantity is :\"+Count1;",
									"pm.test(string, function () {",
									"var expected = Count1;",
									"pm.expect(getPrice1).to.be.eql(expected);",
									"});",
									"",
									"var string = \"Room 1 type is : \"+getType1+\" as expected\";",
									"pm.test(string, function () {",
									"var expected = \"instant\";",
									"pm.expect(getType1).to.be.eql(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "40504db4-6bd6-4d32-9266-6531d7b86c07",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 62);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date1.getMilliseconds();",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 63);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date2.getMilliseconds();",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate1);",
									"postman.setEnvironmentVariable(\"EndDate\",enddate1);",
									"",
									"if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00538264\";",
									"var RoomTypeCode1 = \"1017196\";",
									"}",
									"else if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00011158\";",
									"var RoomTypeCode1 = \"467568\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00532636\";",
									"var RoomTypeCode1 = \"980392\";",
									"}",
									"else if(pm.environment.name == \"LOCAL\")",
									"{",
									"var hotelcode = \"00019158\"",
									"var RoomTypeCode1 = \"110223\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/external/availabilities?startDate={{StartDate}}&endDate={{EndDate}}&externalPartnerIds={{HotelCode}}&rateBandCodes[]=SBX&externalRoomIds={{RoomTypeCode1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"availabilities"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{StartDate}}"
								},
								{
									"key": "endDate",
									"value": "{{EndDate}}"
								},
								{
									"key": "externalPartnerIds",
									"value": "{{HotelCode}}"
								},
								{
									"key": "rateBandCodes[]",
									"value": "SBX"
								},
								{
									"key": "externalRoomIds",
									"value": "{{RoomTypeCode1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Availability - ATOM Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var data = JSON.parse(responseBody);",
									"var Count1 = postman.getEnvironmentVariable(\"Count1\");",
									"var Count2 = postman.getEnvironmentVariable(\"Count2\");",
									"var getPrice1 = data[0].quantity;",
									"getPrice1 = getPrice1.toString();",
									"var getType1 = data[0].type;",
									"getType1 = getType1.toString();",
									"",
									"pm.test(\"Status : 200 - Response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains Partner ID in Response body\", function () {",
									"var expected = HotelCode;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Room 1 :\"+RoomTypeCode1+\" in Response body\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Room 1 :\"+RoomTypeCode1+\" and quantity is :\"+Count1;",
									"pm.test(string, function () {",
									"var expected = Count1;",
									"pm.expect(getPrice1).to.be.eql(expected);",
									"});",
									"",
									"var string = \"Room 1 type is : \"+getType1+\" as expected\";",
									"pm.test(string, function () {",
									"var expected = \"instant\";",
									"pm.expect(getType1).to.be.eql(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "40504db4-6bd6-4d32-9266-6531d7b86c07",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 62);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date1.getMilliseconds();",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\"+00:00\";",
									"var startdate2=encodeURIComponent(startdate1);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 63);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date2.getMilliseconds();",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\"+00:00\";",
									"var enddate2=encodeURIComponent(enddate1);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate2);",
									"postman.setEnvironmentVariable(\"EndDate\",enddate2);",
									"",
									"if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00538264\";",
									"var RoomTypeCode1 = \"1017196\";",
									"}",
									"else if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00011158\";",
									"var RoomTypeCode1 = \"467568\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00532636\";",
									"var RoomTypeCode1 = \"980392\";",
									"}",
									"else if(pm.environment.name == \"LOCAL\")",
									"{",
									"var hotelcode = \"00019158\"",
									"var RoomTypeCode1 = \"110223\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/external/availabilities?startDate={{StartDate}}&endDate={{EndDate}}&externalPartnerIds={{HotelCode}}&rateBandCodes[]=SBX&externalRoomIds={{RoomTypeCode1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"availabilities"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{StartDate}}"
								},
								{
									"key": "endDate",
									"value": "{{EndDate}}"
								},
								{
									"key": "externalPartnerIds",
									"value": "{{HotelCode}}"
								},
								{
									"key": "rateBandCodes[]",
									"value": "SBX"
								},
								{
									"key": "externalRoomIds",
									"value": "{{RoomTypeCode1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Availability - No Room IDs in API call",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"",
									"pm.test(\"Status : 200 - Response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains Partner ID in Response body\", function () {",
									"var expected = HotelCode;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Room 1 :\"+RoomTypeCode1+\" in Response body\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "40504db4-6bd6-4d32-9266-6531d7b86c07",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/external/availabilities?startDate={{StartDate}}&endDate={{EndDate}}&externalPartnerIds={{HotelCode}}&rateBandCodes[]=SBX",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"availabilities"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{StartDate}}"
								},
								{
									"key": "endDate",
									"value": "{{EndDate}}"
								},
								{
									"key": "externalPartnerIds",
									"value": "{{HotelCode}}"
								},
								{
									"key": "rateBandCodes[]",
									"value": "SBX"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Should return all Availabilities for all rooms for specific partner"
					},
					"response": []
				},
				{
					"name": "GET Availability - Multiple Partner IDs in API call",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var HotelCode1 = postman.getEnvironmentVariable(\"HotelCode1\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var RoomTypeCode3 = postman.getEnvironmentVariable(\"RoomTypeCode3\");",
									"",
									"pm.test(\"Status : 200 - Response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains Partner-1 in Response body\", function () {",
									"var expected = HotelCode;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains Partner-2 in Response body\", function () {",
									"var expected = HotelCode1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Room Code 1 :\"+RoomTypeCode1+\" of Partner : \"+HotelCode+\" in Response body\"",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									" /*string = \"Contains Room Code 2 :\"+RoomTypeCode2+\" of Partner : \"+HotelCode1+\" in Response body\"",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode2;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});*/",
									"",
									" string = \"Contains Room Code 3 :\"+RoomTypeCode3+\" of Partner : \"+HotelCode1+\" in Response body\"",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode3;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "40504db4-6bd6-4d32-9266-6531d7b86c07",
								"exec": [
									"",
									"",
									"if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode1 = \"00127978\";",
									"var RoomTypeCode1 = \"1017196\";",
									"var RoomTypeCode2 = \"1017194\";",
									"var RoomTypeCode3 = \"396872\";",
									"var RoomTypeCode4 = \"396877\"",
									"}",
									"else if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var hotelcode1 = \"test1559131689722\";",
									"var RoomTypeCode1 = \"467568\";",
									"var RoomTypeCode2 = \"5465478\";",
									"var RoomTypeCode3 = \"3453467\";",
									"var RoomTypeCode4 = \"test1559131753963\";",
									"",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode1 = \"00141876\";",
									"var RoomTypeCode2 = \"251334\";",
									"var RoomTypeCode3 = \"259168\"; ",
									"}",
									"else if(pm.environment.name ==\"LOCAL\")",
									"{",
									"var hotelcode1 = \"00019160\";",
									"var RoomTypeCode2 = \"110224\";",
									"var RoomTypeCode3 = \"110225\"; ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"HotelCode1\", hotelcode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"postman.setEnvironmentVariable(\"RoomTypeCode3\", RoomTypeCode3);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/external/availabilities?startDate={{StartDate}}&endDate={{EndDate}}&externalPartnerIds={{HotelCode}},{{HotelCode1}}&rateBandCodes[]=SBX",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"availabilities"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{StartDate}}"
								},
								{
									"key": "endDate",
									"value": "{{EndDate}}"
								},
								{
									"key": "externalPartnerIds",
									"value": "{{HotelCode}},{{HotelCode1}}"
								},
								{
									"key": "rateBandCodes[]",
									"value": "SBX"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Availability - No Partner ID in API call",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"pm.test(\"Status : 500 - Internal Server error\", function () {",
									"    pm.response.to.have.status(500)",
									"});",
									"",
									"pm.test(\"Contains error string : Parameter 'externalPartnerIds' is mandatory.\", function () {",
									"var expected = \"externalPartnerIds\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "40504db4-6bd6-4d32-9266-6531d7b86c07",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/external/availabilities?startDate={{StartDate}}&endDate={{EndDate}}&externalRoomIds[]={{RoomTypeCode1}}&rateBandCodes[]=SBX",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"availabilities"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{StartDate}}"
								},
								{
									"key": "endDate",
									"value": "{{EndDate}}"
								},
								{
									"key": "externalRoomIds[]",
									"value": "{{RoomTypeCode1}}"
								},
								{
									"key": "rateBandCodes[]",
									"value": "SBX"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Availability - Partner ID not available",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var hotelcode = postman.getEnvironmentVariable(\"HotelCode\");",
									"",
									"pm.test(\"Status : 400 - Bad request response\", function () {",
									"    pm.response.to.have.status(400)",
									"});",
									"",
									"pm.test(\"Contains error string with description of error\", function () {",
									"var expected = \"The partner with code `\"+hotelcode+\"`  has not been found\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "40504db4-6bd6-4d32-9266-6531d7b86c07",
								"exec": [
									"",
									"var hotelcode = \"000282\";",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/external/availabilities?startDate={{StartDate}}&endDate={{EndDate}}&externalPartnerIds={{HotelCode}}&rateBandCodes[]=SBX&externalRoomIds[]={{RoomTypeCode1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"availabilities"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{StartDate}}"
								},
								{
									"key": "endDate",
									"value": "{{EndDate}}"
								},
								{
									"key": "externalPartnerIds",
									"value": "{{HotelCode}}"
								},
								{
									"key": "rateBandCodes[]",
									"value": "SBX"
								},
								{
									"key": "externalRoomIds[]",
									"value": "{{RoomTypeCode1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Price",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var hotelcode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"",
									"pm.test(\"Status : 200 - Response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains Response '[]' if call is success\", function () {",
									"var expected = [];",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d69e1a8-5992-4f76-bbf8-bccbec34eb15",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 62);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date1.getMilliseconds();",
									"var pricedate = date1.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate());",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date2.getMilliseconds();",
									"var date = date2.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"postman.setEnvironmentVariable(\"PriceDate\",pricedate);",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var Price1 = 215;",
									"postman.setEnvironmentVariable(\"Price1\",Price1);",
									"",
									"if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00538264\";",
									"var RoomTypeCode1 = \"1017196\";",
									"}",
									"else if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00011158\";",
									"var RoomTypeCode1 = \"5465478\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00532636\";",
									"var RoomTypeCode2 = \"980386\";",
									"var RoomTypeCode1 = \"980392\";",
									"}",
									"else if(pm.environment.name == \"LOCAL\")",
									"{",
									"var hotelcode = \"00019158\"",
									"var RoomTypeCode1 = \"110223\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "45nfg94zneqzmnwTtgtnjQU3xsH7H4WT9g6vdDmd",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n  \t\"currencyCode\": \"EUR\",\n    \"date\": \"{{PriceDate}}\",\n    \"amount\": {{Price1}},\n    \"type\": \"instant\",\n    \"externalRateBandId\": \"SBX\",\n    \"externalPartnerId\": \"{{HotelCode}}\",\n    \"externalRoomId\": \"{{RoomTypeCode1}}\",\n    \"externalCreatedAt\": \"{{Date}}\",\n    \"externalUpdatedAt\": \"{{Date}}\"\n  }\n]"
						},
						"url": {
							"raw": "{{host}}/api/external/prices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"prices"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"disabled": true
								}
							]
						},
						"description": "BB8 POST Price updates to CMHUB Admin"
					},
					"response": []
				},
				{
					"name": "POST Price - Missing ExternalPartnerID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"pm.test(\"Status : 400 - Bad request response\", function () {",
									"    pm.response.to.have.status(400)",
									"});",
									"",
									"pm.test(\"Contains error string with description : Missing `externalPartnerId`\", function () {",
									"var expected = \"Missing `externalPartnerId`\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d69e1a8-5992-4f76-bbf8-bccbec34eb15",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "45nfg94zneqzmnwTtgtnjQU3xsH7H4WT9g6vdDmd",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n  \t\"currencyCode\": \"EUR\",\n    \"date\": \"{{PriceDate}}\",\n    \"amount\": {{Price1}},\n    \"type\": \"instant\",\n    \"externalRateBandId\": \"SBX\",\n    \"externalRoomId\": \"{{RoomTypeCode1}}\",\n    \"externalCreatedAt\": \"{{Date}}\",\n    \"externalUpdatedAt\": \"{{Date}}\"\n  }\n]"
						},
						"url": {
							"raw": "{{host}}/api/external/prices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"prices"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"disabled": true
								}
							]
						},
						"description": "BB8 POST Price updates to CMHUB Admin"
					},
					"response": []
				},
				{
					"name": "POST Price - No PartnerID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var hotelcode = postman.getEnvironmentVariable(\"HotelCode\");",
									"",
									"pm.test(\"Status : 400 - Bad request response\", function () {",
									"    pm.response.to.have.status(400)",
									"});",
									"",
									"pm.test(\"Contains error string with description\", function () {",
									"var expected = \"The partner with code `\"+hotelcode+\"`  has not been found\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d69e1a8-5992-4f76-bbf8-bccbec34eb15",
								"exec": [
									"var hotelcode = \"000282\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "45nfg94zneqzmnwTtgtnjQU3xsH7H4WT9g6vdDmd",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n  \t\"currencyCode\": \"EUR\",\n    \"date\": \"{{PriceDate}}\",\n    \"amount\": {{Price1}},\n    \"type\": \"instant\",\n    \"externalRateBandId\": \"SBX\",\n    \"externalPartnerId\": \"{{HotelCode}}\",\n    \"externalRoomId\": \"{{RoomTypeCode1}}\",\n    \"externalCreatedAt\": \"{{Date}}\",\n    \"externalUpdatedAt\": \"{{Date}}\"\n  }\n]"
						},
						"url": {
							"raw": "{{host}}/api/external/prices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"prices"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"disabled": true
								}
							]
						},
						"description": "BB8 POST Price updates to CMHUB Admin"
					},
					"response": []
				},
				{
					"name": "POST Price - Wrong Product Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var hotelcode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"",
									"pm.test(\"Status : 400 - Bad request response\", function () {",
									"    pm.response.to.have.status(400)",
									"});",
									"",
									"pm.test(\"Contains error string with description of missing Product Code\", function () {",
									"var expected = \"The product code `\"+RoomTypeCode1+\"` for Partner `\"+hotelcode+\"` is not registered in SBX Channel Manager.\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d69e1a8-5992-4f76-bbf8-bccbec34eb15",
								"exec": [
									"if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00538264\";",
									"}",
									"else if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00011158\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00532636\";",
									"}",
									"else if(pm.environment.name == \"LOCAL\")",
									"{",
									"var hotelcode = \"00019158\"",
									"}",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"",
									"var RoomTypeCode1 = \"980378\";",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "45nfg94zneqzmnwTtgtnjQU3xsH7H4WT9g6vdDmd",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n  \t\"currencyCode\": \"EUR\",\n    \"date\": \"{{PriceDate}}\",\n    \"amount\": {{Price1}},\n    \"type\": \"instant\",\n    \"rateBandId\": \"SBX\",\n    \"rateBandCode\": \"SBX\",\n    \"externalPartnerId\": \"{{HotelCode}}\",\n    \"externalRoomId\": \"{{RoomTypeCode1}}\",\n    \"externalCreatedAt\": \"{{Date}}\",\n    \"externalUpdatedAt\": \"{{Date}}\"\n  }\n]"
						},
						"url": {
							"raw": "{{host}}/api/external/prices",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"prices"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"disabled": true
								}
							]
						},
						"description": "BB8 POST Price updates to CMHUB Admin"
					},
					"response": []
				},
				{
					"name": "GET Price",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var data = JSON.parse(responseBody);",
									"var Price1 = postman.getEnvironmentVariable(\"Price1\");",
									"var getPrice1 = data[0].amount;",
									"getPrice1 = getPrice1.toString();",
									"",
									"console.log('Price1 : ',data[0].amount);",
									"console.log('Count1 :'  ,Price1);",
									"",
									"pm.test(\"Status : 200 - Response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains Partner ID in Response body\", function () {",
									"var expected = HotelCode;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Room 1 :\"+RoomTypeCode1+\" in Response body\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"/*var string = \"Contains Room 2 :\"+RoomTypeCode2+\" in Response body\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});*/",
									"",
									"var string = \"Room 1 :\"+RoomTypeCode1+\" and Price is :\"+Price1;",
									"pm.test(string, function () {",
									"var expected = Price1;",
									"pm.expect(getPrice1).to.be.eql(expected);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "40504db4-6bd6-4d32-9266-6531d7b86c07",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 62);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date1.getMilliseconds();",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 63);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date2.getMilliseconds();",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate1);",
									"postman.setEnvironmentVariable(\"EndDate\",enddate1);",
									"",
									"if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var RoomTypeCode1 = \"1017196\";",
									"var RoomTypeCode2 = \"1017194\";",
									"}",
									"else if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var RoomTypeCode1 = \"5465478\";",
									"var RoomTypeCode2 = \"3453467\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var RoomTypeCode2 = \"980386\";",
									"var RoomTypeCode1 = \"980392\";",
									"}",
									"else if(pm.environment.name == \"LOCAL\")",
									"{",
									"var RoomTypeCode1 = \"110223\";",
									"var RoomTypeCode2 = \"110224\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/external/prices?startDate={{StartDate}}&endDate={{EndDate}}&externalPartnerIds={{HotelCode}}&externalRoomId={{RoomTypeCode1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"prices"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{StartDate}}"
								},
								{
									"key": "endDate",
									"value": "{{EndDate}}"
								},
								{
									"key": "externalPartnerIds",
									"value": "{{HotelCode}}"
								},
								{
									"key": "externalRoomId",
									"value": "{{RoomTypeCode1}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "BB8 to call CMHUB to Get Availability from CMHUB\n"
					},
					"response": []
				},
				{
					"name": "GET Price - ATOM format",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var data = JSON.parse(responseBody);",
									"var Price1 = postman.getEnvironmentVariable(\"Price1\");",
									"var getPrice1 = data[0].amount;",
									"getPrice1 = getPrice1.toString();",
									"",
									"console.log('Price1 : ',data[0].amount);",
									"console.log('Count1 :'  ,Price1);",
									"",
									"pm.test(\"Status : 200 - Response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains Partner ID in Response body\", function () {",
									"var expected = HotelCode;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Room 1 :\"+RoomTypeCode1+\" in Response body\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"/*var string = \"Contains Room 2 :\"+RoomTypeCode2+\" in Response body\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});*/",
									"",
									"var string = \"Room 1 :\"+RoomTypeCode1+\" and Price is :\"+Price1;",
									"pm.test(string, function () {",
									"var expected = Price1;",
									"pm.expect(getPrice1).to.be.eql(expected);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "40504db4-6bd6-4d32-9266-6531d7b86c07",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 62);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date1.getMilliseconds();",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + day;",
									"var startdate2=encodeURIComponent(startdate1);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 63);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date2.getMilliseconds();",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + day;",
									"var enddate2=encodeURIComponent(enddate1);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate2);",
									"postman.setEnvironmentVariable(\"EndDate\",enddate2);",
									"",
									"if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var RoomTypeCode1 = \"1017196\";",
									"var RoomTypeCode2 = \"1017194\";",
									"}",
									"else if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var RoomTypeCode1 = \"5465478\";",
									"var RoomTypeCode2 = \"3453467\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var RoomTypeCode2 = \"980386\";",
									"var RoomTypeCode1 = \"980392\";",
									"}",
									"else if(pm.environment.name == \"LOCAL\")",
									"{",
									"var RoomTypeCode1 = \"110223\";",
									"var RoomTypeCode2 = \"110224\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/external/prices?startDate={{StartDate}}&endDate={{EndDate}}&externalPartnerIds={{HotelCode}}&externalRoomId={{RoomTypeCode1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"prices"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{StartDate}}"
								},
								{
									"key": "endDate",
									"value": "{{EndDate}}"
								},
								{
									"key": "externalPartnerIds",
									"value": "{{HotelCode}}"
								},
								{
									"key": "externalRoomId",
									"value": "{{RoomTypeCode1}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "BB8 to call CMHUB to Get Availability from CMHUB\n"
					},
					"response": []
				},
				{
					"name": "GET Price - No Room IDs in API call",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"",
									"pm.test(\"Status : 200 - Response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains Partner ID in Response body\", function () {",
									"var expected = HotelCode;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Room 1 :\"+RoomTypeCode1+\" in Response body\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"/*var string = \"Contains Room 2 :\"+RoomTypeCode2+\" in Response body\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode2;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});*/",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "40504db4-6bd6-4d32-9266-6531d7b86c07",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/external/prices?startDate={{StartDate}}&endDate={{EndDate}}&externalPartnerIds={{HotelCode}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"prices"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{StartDate}}"
								},
								{
									"key": "endDate",
									"value": "{{EndDate}}"
								},
								{
									"key": "externalPartnerIds",
									"value": "{{HotelCode}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "BB8 to call CMHUB to Get Availability from CMHUB\n"
					},
					"response": []
				},
				{
					"name": "GET Price - Multiple Partner IDs in API call",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var HotelCode1 = postman.getEnvironmentVariable(\"HotelCode1\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var RoomTypeCode3 = postman.getEnvironmentVariable(\"RoomTypeCode3\");",
									"",
									"pm.test(\"Status : 200 - Response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains Partner-1 in Response body\", function () {",
									"var expected = HotelCode;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains Partner-2 in Response body\", function () {",
									"var expected = HotelCode1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Room 1 :\"+RoomTypeCode1+\" in Response body\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"/*var string = \"Contains Room 2 :\"+RoomTypeCode2+\" in Response body\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode2;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});*/",
									"",
									" string = \"Contains Room 3 :\"+RoomTypeCode3+\" of Partner : \"+HotelCode1+\" in Response body\"",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode3;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "40504db4-6bd6-4d32-9266-6531d7b86c07",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n\nif(pm.environment.name ==\"DEVINT\")\n{\nvar hotelcode1 = \"00127978\";\nvar RoomTypeCode1 = \"1017196\";\nvar RoomTypeCode2 = \"1017194\";\nvar RoomTypeCode3 = \"396872\";\nvar RoomTypeCode4 = \"396877\"\n}\nelse if(pm.environment.name ==\"SANDBOX_ENV\")\n{\nvar hotelcode1 = \"test1559131689722\";\nvar RoomTypeCode1 = \"467568\";\nvar RoomTypeCode2 = \"5465478\";\nvar RoomTypeCode3 = \"3453467\";\nvar RoomTypeCode4 = \"test1559131753963\";\n\n}\nelse if(pm.environment.name ==\"PREPROD\")\n{\nvar hotelcode1 = \"00141876\";\nvar RoomTypeCode2 = \"251334\";\nvar RoomTypeCode3 = \"259168\"; \n}\n\npostman.setEnvironmentVariable(\"HotelCode1\", hotelcode1);\npostman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);\npostman.setEnvironmentVariable(\"RoomTypeCode3\", RoomTypeCode3);"
						},
						"url": {
							"raw": "{{host}}/api/external/prices?startDate={{StartDate}}&endDate={{EndDate}}&externalPartnerIds={{HotelCode}},{{HotelCode1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"prices"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{StartDate}}"
								},
								{
									"key": "endDate",
									"value": "{{EndDate}}"
								},
								{
									"key": "externalPartnerIds",
									"value": "{{HotelCode}},{{HotelCode1}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "BB8 to call CMHUB to Get Prices for specific partners\n"
					},
					"response": []
				},
				{
					"name": "GET Price - No Partner ID in API call",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"pm.test(\"Status : 500 - Internal Server error\", function () {",
									"    pm.response.to.have.status(500)",
									"});",
									"",
									"pm.test(\"Contains error string : Parameter 'externalPartnerIds' is mandatory.\", function () {",
									"var expected = \"externalPartnerIds\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "40504db4-6bd6-4d32-9266-6531d7b86c07",
								"exec": [
									"if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00028216\";",
									"var RoomTypeCode1 = \"CP000000585\";",
									"var RoomTypeCode2 = \"CP000000589\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}",
									"else if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00011158\";",
									"var RoomTypeCode1 = \"467568\";",
									"var RoomTypeCode2 = \"5465478\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00532636\";",
									"var RoomTypeCode1 = \"980386\";",
									"var RoomTypeCode2 = \"980392\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/external/prices?startDate={{StartDate}}&endDate={{EndDate}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"prices"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{StartDate}}"
								},
								{
									"key": "endDate",
									"value": "{{EndDate}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "BB8 to call CMHUB to Get Availability from CMHUB\n"
					},
					"response": []
				},
				{
					"name": "GET Price - Partner ID not available",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var hotelcode = postman.getEnvironmentVariable(\"HotelCode\");",
									"",
									"pm.test(\"Status : 400 - Bad request response\", function () {",
									"    pm.response.to.have.status(400)",
									"});",
									"",
									"pm.test(\"Contains error string with description of error\", function () {",
									"var expected = \"The partner with code `\"+hotelcode+\"`  has not been found\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "40504db4-6bd6-4d32-9266-6531d7b86c07",
								"exec": [
									"var hotelcode = \"000282\";",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/external/prices?startDate={{StartDate}}&endDate={{EndDate}}&externalPartnerIds={{HotelCode}}&externalRoomId={{RoomTypeCode1}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"prices"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{StartDate}}"
								},
								{
									"key": "endDate",
									"value": "{{EndDate}}"
								},
								{
									"key": "externalPartnerIds",
									"value": "{{HotelCode}}"
								},
								{
									"key": "externalRoomId",
									"value": "{{RoomTypeCode1}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "BB8 to call CMHUB to Get Availability from CMHUB\n"
					},
					"response": []
				},
				{
					"name": "Push booking - From iResa API - Commit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "240dc66d-4e6c-4965-adbe-7e14cf184e2c",
								"exec": [
									"if(pm.environment.name ==\"PREPROD\" || pm.environment.name == \"DEVINT\")",
									"{",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains status : success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Not in Output : Partner Code is not valid\", function () {",
									"var expected = \"This value should not be null.\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									"",
									"pm.test(\"Not in Output : Partner Code is not valid\", function () {",
									"var expected = \"Product is not valid\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									"",
									"/*pm.test(\"Contains transaction ID in output\", function () {",
									"var expected = \"transaction\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});*/",
									"",
									"}",
									"else",
									"{",
									"    pm.test.skip(\"Not valid in \"+pm.environment.name+\" Evironment\", function(){",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "82015cff-f2e8-4851-99e5-26675f90be51",
								"exec": [
									"var randomId = Math.floor(Math.random() * 200000000);",
									"postman.setEnvironmentVariable(\"randomId\", randomId)",
									"",
									"var voucherNumber = Math.floor(Math.random() * 20000000);",
									"postman.setEnvironmentVariable(\"voucherNumber\", voucherNumber)",
									"",
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 62);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 63);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"TTDNpD3ujbxVSpycMLy3bgJGcPrXCZTRdmcZzmK4\";",
									"var hotelcode = \"00538271\";",
									"postman.setNextRequest(null);",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00538271\";",
									"var RoomTypeCode1 = \"1017245\";",
									"var experienceid = \"924897\";",
									"var username = \"iresa\";",
									"var password = \"wjrhqYajKs6M5ug7ygFDymnLwxc5f97ryhmq9FE7\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00538264\";",
									"var experienceid = \"924896\";",
									"var username = \"iresa\";",
									"var password = \"QexP2eYZRwPcyB5x5LjpnqzNw2U4mWDPzat5Fds7\";",
									"var RoomTypeCode1 = \"1017196\";",
									"}",
									"else if(pm.environment.name ==\"LOCAL\")",
									"{",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"username\",username);",
									"postman.setEnvironmentVariable(\"password\",password);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"ExperienceId\",experienceid)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "QexP2eYZRwPcyB5x5LjpnqzNw2U4mWDPzat5Fds7",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"booking\": {\n        \"partnerCode\": \"{{HotelCode}}\",\n        \"status\": \"Commit\",\n        \"reservationId\": \"RESA-{{randomId}}\",\n        \"voucherNumber\": \"{{voucherNumber}}\",\n        \"experienceId\":\"{{ExperienceId}}\",\n        \"createDate\": \"{{Date}}\",\n        \"lastModifyDate\": \"{{Date}}\",\n        \"dateStart\": \"{{StartDate}}\",\n        \"dateEnd\": \"{{EndDate}}\",\n        \"totalAmount\": 200,\n        \"currency\": \"EUR\",\n        \"requests\": \"Something i want to request\",\n        \"comments\": \"Something i need to comment about me and disabilities\",\n        \"roomTypes\": [\n            {\n                \"roomTypeCode\": \"{{RoomTypeCode1}}\",\n                \"totalAmount\": 200,\n                \"currency\": \"EUR\",\n                \"rates\": [\n                    {\n                        \"date\": \"{{StartDate}}\",\n                        \"amount\": 0,\n                        \"currency\": \"EUR\"\n                    }\n                ],\n                \"guests\": [\n                    {\n                        \"isMain\": true,\n                        \"age\": 23,\n                        \"name\": \"Carles\",\n                        \"surname\": \"Puigdemont\",\n                        \"email\": \"carles.puigdemont@brussels.com\",\n                        \"phone\": \"454325454\",\n                        \"address\": \"Brussels\",\n                        \"city\": \"Brussels\",\n                        \"zip\": \"R9R6+QX\",\n                        \"state\": \"Brussels\",\n                        \"country\": \"be\",\n                        \"countryCode\": \"Belgium\"\n                    },\n                    {\n                        \"isMain\": false,\n                        \"age\": 36,\n                        \"name\": \"Pepito\",\n                        \"surname\": \"Palotes\",\n                        \"email\": \"pepito.palotes@brussels.com\",\n                        \"phone\": \"454325454\",\n                        \"address\": \"Brussels\",\n                        \"city\": \"Brussels\",\n                        \"zip\": \"R9R6+QX\",\n                        \"state\": \"Brussels\",\n                        \"country\": \"be\",\n                        \"countryCode\": \"Belgium\"\n                    }\n                ]\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/PushBookings",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"PushBookings"
							]
						},
						"description": "Do booking from iResa API"
					},
					"response": []
				},
				{
					"name": "Push booking - CMHUB Commit Booking to BB8",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"pm.test(\"Status : 200 - Response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"var randomId1 = postman.getEnvironmentVariable(\"randomId1\");",
									"",
									"pm.test(\"Contains Response of Booking(External ID) in response : RESA-\"+randomId1, function () {",
									"var expected = \"RESA-\"+randomId1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d69e1a8-5992-4f76-bbf8-bccbec34eb15",
								"exec": [
									"var randomId1 = Math.floor(Math.random() * 200000000);",
									"postman.setEnvironmentVariable(\"randomId1\", randomId1)",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 62);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date1.getMilliseconds();",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 63);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date2.getMilliseconds();",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate1);",
									"postman.setEnvironmentVariable(\"EndDate\",enddate1);",
									"",
									"var Count1 = 5;",
									"var Count2 = 10;",
									"postman.setEnvironmentVariable(\"Count1\",Count1);",
									"postman.setEnvironmentVariable(\"Count2\",Count2);",
									"",
									"var username = \"cmhub\";",
									"var password = \"admin123\";",
									"postman.setEnvironmentVariable(\"username\",username);",
									"postman.setEnvironmentVariable(\"password\",password);",
									"",
									"if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00538264\";",
									"var RoomTypeCode1 = \"1017196\";",
									"var RoomTypeCode2 = \"1017194\";",
									"}",
									"else if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00011158\";",
									"var RoomTypeCode1 = \"5465478\";",
									"var RoomTypeCode2 = \"467568\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00538271\";",
									"var RoomTypeCode1 = \"1017245\";",
									"var RoomTypeCode2 = \"1017246\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "45nfg94zneqzmnwTtgtnjQU3xsH7H4WT9g6vdDmd",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"externalId\": \"RESA-{{randomId1}}\",\n\n    \"dates\": [\n      {\n        \"date\": \"{{Date}}\",\n        \"externalRateBandId\": \"SBX\",\n        \"externalRoomId\": \"{{RoomTypeCode1}}\"\n      }\n    ],\n    \"bookingStatus\": \"commit\",\n    \"bookingType\": \"instant\",\n    \"externalPartnerId\": \"{{HotelCode}}\",\n    \"bookingStart\": \"{{StartDate}}\",\n    \"bookingEnd\": \"{{EndDate}}\"\n  }\n]"
						},
						"url": {
							"raw": "{{bb8_host}}/api/external/bookings",
							"host": [
								"{{bb8_host}}"
							],
							"path": [
								"api",
								"external",
								"bookings"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"disabled": true
								}
							]
						},
						"description": "Post Commit booking to BB8 from CMHUB when it received."
					},
					"response": []
				},
				{
					"name": "GET Booking - From CMHUB -> BB8 API",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var hotelcode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var randomId = postman.getEnvironmentVariable(\"randomId\");",
									"randomId = \"RESA-\"+randomId;",
									"",
									"var randomId1 = postman.getEnvironmentVariable(\"randomId1\");",
									"randomId1 = \"RESA-\"+randomId1;",
									"",
									"if(pm.environment.name ==\"PREPROD\" || pm.environment.name ==\"DEVINT\")",
									"{",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test(\"Response is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"var string = \"Contains Partner ID: \"+hotelcode+\" in response body\";",
									"pm.test(string, function () {",
									"var expected = hotelcode;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Reference id: \"+randomId+\" as externalId in response body\";",
									"pm.test(string, function () {",
									"var expected = randomId;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Reference id: \"+randomId1+\" as externalId in response body\";",
									"pm.test(string, function () {",
									"var expected = randomId1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"}",
									"else {",
									"    pm.test.skip(\"Not valid in \"+pm.environment.name+\" Evironment\", function(){",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d69e1a8-5992-4f76-bbf8-bccbec34eb15",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() -2);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate() - 1;",
									"if(day == 0) {",
									"    day = day + 1;",
									"}",
									"",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\"+00:00\";",
									"var startdate1 = encodeURIComponent(startdate);",
									"postman.setEnvironmentVariable(\"startdate\",startdate1)",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 2);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\"+00:00\";",
									"var enddate1 = encodeURIComponent(enddate);",
									"postman.setEnvironmentVariable(\"enddate\",enddate1)",
									"",
									"setTimeout(() => {}, 5000); "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{bb8_host}}/api/external/bookings?externalPartnerIds={{HotelCode}}&startDate={{startdate}}&endDate={{enddate}}",
							"host": [
								"{{bb8_host}}"
							],
							"path": [
								"api",
								"external",
								"bookings"
							],
							"query": [
								{
									"key": "externalPartnerIds",
									"value": "{{HotelCode}}"
								},
								{
									"key": "startDate",
									"value": "{{startdate}}"
								},
								{
									"key": "endDate",
									"value": "{{enddate}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "GEt booking call from BB8 to CMHUB to fetch bookings"
					},
					"response": []
				},
				{
					"name": "Push booking - Commit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59a9e37c-6ae9-4382-9ed9-a067bbdcfbbe",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains status : success\", function () {",
									"    var expected = \"success\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Doesn't contain validation info error message\", function () {",
									"    var expected = \"This form should not contain extra fields.\";",
									"    pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									"",
									"pm.test(\"Doesn't contain date info error message\", function () {",
									"    var expected = \"This value is not valid.\";",
									"    pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									"",
									"setTimeout(function(){}, 5000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "db2327e2-3b63-4a40-925d-4488b1dd43bc",
								"exec": [
									"var randomId1 = Math.floor(Math.random() * 200000000);",
									"postman.setEnvironmentVariable(\"randomId1\", randomId1)",
									"",
									"var voucherNumber1 = Math.floor(Math.random() * 20000000);",
									"postman.setEnvironmentVariable(\"voucherNumber1\", voucherNumber1)",
									"",
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 53);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 54);",
									"var month = date3.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date3.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date3.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date3.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date3.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate1 = date3.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate);",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate1);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"TTDNpD3ujbxVSpycMLy3bgJGcPrXCZTRdmcZzmK4\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"wjrhqYajKs6M5ug7ygFDymnLwxc5f97ryhmq9FE7\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"QexP2eYZRwPcyB5x5LjpnqzNw2U4mWDPzat5Fds7\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\",username);",
									"postman.setEnvironmentVariable(\"password\",password);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "QexP2eYZRwPcyB5x5LjpnqzNw2U4mWDPzat5Fds7",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"booking\":{\n      \"partnerCode\":\"{{HotelCode}}\",\n      \"status\":\"Commit\",\n      \"reservationId\":\"RESA-{{randomId1}}\",\n      \"voucherNumber\": \"{{voucherNumber1}}\",\n      \"experienceId\":\"{{ExperienceId}}\",\n      \"createDate\":\"{{Date}}\",\n      \"lastModifyDate\":\"{{Date}}\",\n      \"dateStart\":\"{{StartDate}}\",\n      \"dateEnd\":\"{{EndDate1}}\",\n      \"totalAmount\":200,\n      \"currency\":\"EUR\",\n      \"requests\":\"Something i want to request\",\n      \"comments\":\"Something i need to comment about me and disabilities\",\n      \"roomTypes\":[\n         {\n            \"roomTypeCode\":\"{{RoomTypeCode1}}\",\n            \"totalAmount\":200,\n            \"currency\":\"EUR\",\n            \"rates\":[\n               {\n                  \"date\":\"{{StartDate}}\",\n                  \"amount\":0,\n                  \"currency\":\"EUR\"\n               },\n               {\n                  \"date\":\"{{EndDate}}\",\n                  \"amount\":100,\n                  \"currency\":\"EUR\"\n               }\n            ],\n            \"guests\":[\n               {\n                  \"isMain\":true,\n                  \"age\":23,\n                  \"name\":\"Carles\",\n                  \"surname\":\"Puigdemont\",\n                  \"email\":\"carles.puigdemont@brussels.com\",\n                  \"phone\":\"454325454\",\n                  \"address\":\"Brussels\",\n                  \"city\":\"Brussels\",\n                  \"zip\":\"R9R6+QX\",\n                  \"state\":\"Brussels\",\n                  \"country\":\"be\",\n                  \"countryCode\":\"Belgium\"\n               },\n               {\n                  \"isMain\":false,\n                  \"age\":36,\n                  \"name\":\"Pepito\",\n                  \"surname\":\"Palotes\",\n                  \"email\":\"pepito.palotes@brussels.com\",\n                  \"phone\":\"454325454\",\n                  \"address\":\"Brussels\",\n                  \"city\":\"Brussels\",\n                  \"zip\":\"R9R6+QX\",\n                  \"state\":\"Brussels\",\n                  \"country\":\"be\",\n                  \"countryCode\":\"Belgium\"\n               }\n            ]\n         }\n      ]\n   }\n}"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/PushBookings",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"PushBookings"
							]
						},
						"description": "Get booking data for a given partner between start & end date."
					},
					"response": []
				},
				{
					"name": "GET Booking - From BB8 -> CMHUB - ATOM Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var hotelcode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var randomId = postman.getEnvironmentVariable(\"randomId\");",
									"randomId = \"RESA-\"+randomId;",
									"",
									"var randomId1 = postman.getEnvironmentVariable(\"randomId1\");",
									"randomId1 = \"RESA-\"+randomId1;",
									"",
									"if(pm.environment.name ==\"PREPROD\" || pm.environment.name ==\"DEVINT\")",
									"{",
									"var data = JSON.parse(responseBody);",
									"",
									"var responsecode = \"Check status code: Response code is: \"+pm.response.code;",
									"pm.test(responsecode, function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 500])",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"}",
									"else {",
									"    pm.test.skip(\"Not valid in \"+pm.environment.name+\" Evironment\", function(){",
									"    });",
									"}",
									"",
									"",
									"pm.test(\"Response contain booking ID: \" + randomId1, function () {",
									"    pm.expect(pm.response.text()).to.include(randomId1);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d69e1a8-5992-4f76-bbf8-bccbec34eb15",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() -2);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate() - 1;",
									"if(day == 0) {",
									"    day = day + 1;",
									"}",
									"",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\"+00:00\";",
									"var startdate1 = encodeURIComponent(startdate);",
									"postman.setEnvironmentVariable(\"startdate\",startdate1)",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 2);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate() - 1;",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\"+00:00\";",
									"var enddate1 = encodeURIComponent(enddate);",
									"postman.setEnvironmentVariable(\"enddate\",enddate1)",
									"",
									"if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"bb8\";",
									"var password = \"SMyt2qUkuZXpeVKBe4j2765VNaBAHBc6SvyD3J3m\";",
									"}",
									"else if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var username = \"bb8\";",
									"var password = \"45nfg94zneqzmnwTtgtnjQU3xsH7H4WT9g6vdDmd\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"bb8\";",
									"var password = \"r3p8DjykAqFQ8HeYvVWvSsvL3gg94sMUsPJEJ5vP\";",
									"}",
									"else if(pm.environment.name == \"LOCAL\")",
									"{",
									"var username = \"bb8\";",
									"var password = \"w25atrJV9uGugu6e6by6yJdx5rvzJZVJF9z5nTAZ\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\",username);",
									"postman.setEnvironmentVariable(\"password\",password);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/external/bookings?externalPartnerIds={{HotelCode}}&startDate={{startdate}}&endDate={{enddate}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"bookings"
							],
							"query": [
								{
									"key": "externalPartnerIds",
									"value": "{{HotelCode}}"
								},
								{
									"key": "startDate",
									"value": "{{startdate}}"
								},
								{
									"key": "endDate",
									"value": "{{enddate}}"
								}
							]
						},
						"description": "GEt booking call from BB8 to CMHUB to fetch bookings"
					},
					"response": []
				},
				{
					"name": "GET Booking - From BB8 -> CMHUB",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var hotelcode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var randomId = postman.getEnvironmentVariable(\"randomId\");",
									"randomId = \"RESA-\"+randomId;",
									"",
									"var randomId1 = postman.getEnvironmentVariable(\"randomId1\");",
									"randomId1 = \"RESA-\"+randomId1;",
									"",
									"if(pm.environment.name ==\"PREPROD\" || pm.environment.name ==\"DEVINT\")",
									"{",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test(\"Response is 400 - Bad request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"var string = \"Contains This value is not valid in response body\";",
									"pm.test(string, function () {",
									"var expected = \"This value is not valid\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"}",
									"else {",
									"    pm.test.skip(\"Not valid in \"+pm.environment.name+\" Evironment\", function(){",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d69e1a8-5992-4f76-bbf8-bccbec34eb15",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() -22);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate() - 1;",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\"+00:00\";",
									"postman.setEnvironmentVariable(\"startdate\",startdate)",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() - 2);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate() - 1;",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\"+00:00\";",
									"postman.setEnvironmentVariable(\"enddate\",enddate)",
									"",
									"if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"bb8\";",
									"var password = \"SMyt2qUkuZXpeVKBe4j2765VNaBAHBc6SvyD3J3m\";",
									"}",
									"else if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var username = \"bb8\";",
									"var password = \"45nfg94zneqzmnwTtgtnjQU3xsH7H4WT9g6vdDmd\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"bb8\";",
									"var password = \"r3p8DjykAqFQ8HeYvVWvSsvL3gg94sMUsPJEJ5vP\";",
									"}",
									"else if(pm.environment.name == \"LOCAL\")",
									"{",
									"var username = \"bb8\";",
									"var password = \"w25atrJV9uGugu6e6by6yJdx5rvzJZVJF9z5nTAZ\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\",username);",
									"postman.setEnvironmentVariable(\"password\",password);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/external/bookings?externalPartnerIds={{HotelCode}}&startDate={{startdate}}&endDate={{enddate}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"bookings"
							],
							"query": [
								{
									"key": "externalPartnerIds",
									"value": "{{HotelCode}}"
								},
								{
									"key": "startDate",
									"value": "{{startdate}}"
								},
								{
									"key": "endDate",
									"value": "{{enddate}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "GEt booking call from BB8 to CMHUB to fetch bookings"
					},
					"response": []
				},
				{
					"name": "Push booking - From iResa API - Cancel ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "240dc66d-4e6c-4965-adbe-7e14cf184e2c",
								"exec": [
									"if(pm.environment.name ==\"PREPROD\" || pm.environment.name == \"DEVINT\")",
									"{",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains status : success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Not in Output : Partner Code is not valid\", function () {",
									"var expected = \"This value should not be null.\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									"",
									"pm.test(\"Not in Output : Partner Code is not valid\", function () {",
									"var expected = \"Product is not valid\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									"",
									"/*pm.test(\"Contains transaction ID in output\", function () {",
									"var expected = \"transaction\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});*/",
									"",
									"}",
									"else",
									"{",
									"    pm.test.skip(\"Not valid in \"+pm.environment.name+\" Evironment\", function(){",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "82015cff-f2e8-4851-99e5-26675f90be51",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 62);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 63);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 64);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date3.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date3.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date3.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date3.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate1 = date3.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate);",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate1);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"TTDNpD3ujbxVSpycMLy3bgJGcPrXCZTRdmcZzmK4\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"wjrhqYajKs6M5ug7ygFDymnLwxc5f97ryhmq9FE7\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"QexP2eYZRwPcyB5x5LjpnqzNw2U4mWDPzat5Fds7\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\",username);",
									"postman.setEnvironmentVariable(\"password\",password);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "QexP2eYZRwPcyB5x5LjpnqzNw2U4mWDPzat5Fds7",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"booking\": {\n        \"partnerCode\": \"{{HotelCode}}\",\n        \"status\": \"Cancel\",\n        \"reservationId\": \"RESA-{{randomId}}\",\n        \"voucherNumber\": \"{{voucherNumber}}\",\n        \"experienceId\":\"{{ExperienceId}}\",\n        \"createDate\": \"{{Date}}\",\n        \"lastModifyDate\": \"{{Date}}\",\n        \"dateStart\": \"{{StartDate}}\",\n        \"dateEnd\": \"{{EndDate}}\",\n        \"totalAmount\": 200,\n        \"currency\": \"EUR\",\n        \"requests\": \"Something i want to request\",\n        \"comments\": \"Something i need to comment about me and disabilities\",\n        \"roomTypes\": [\n            {\n                \"roomTypeCode\": \"{{RoomTypeCode1}}\",\n                \"totalAmount\": 200,\n                \"currency\": \"EUR\",\n                \"rates\": [\n                    {\n                        \"date\": \"{{StartDate}}\",\n                        \"amount\": 0,\n                        \"currency\": \"EUR\"\n                    }\n                ],\n                \"guests\": [\n                    {\n                        \"isMain\": true,\n                        \"age\": 23,\n                        \"name\": \"Carles\",\n                        \"surname\": \"Puigdemont\",\n                        \"email\": \"carles.puigdemont@brussels.com\",\n                        \"phone\": \"454325454\",\n                        \"address\": \"Brussels\",\n                        \"city\": \"Brussels\",\n                        \"zip\": \"R9R6+QX\",\n                        \"state\": \"Brussels\",\n                        \"country\": \"be\",\n                        \"countryCode\": \"Belgium\"\n                    },\n                    {\n                        \"isMain\": false,\n                        \"age\": 36,\n                        \"name\": \"Pepito\",\n                        \"surname\": \"Palotes\",\n                        \"email\": \"pepito.palotes@brussels.com\",\n                        \"phone\": \"454325454\",\n                        \"address\": \"Brussels\",\n                        \"city\": \"Brussels\",\n                        \"zip\": \"R9R6+QX\",\n                        \"state\": \"Brussels\",\n                        \"country\": \"be\",\n                        \"countryCode\": \"Belgium\"\n                    }\n                ]\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/PushBookings",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"PushBookings"
							]
						},
						"description": "Do booking from iResa API"
					},
					"response": []
				},
				{
					"name": "PUT Booking - CMHUB Cancel Booking to BB8 ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"pm.test(\"Status : 200 - Response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"var randomId1 = postman.getEnvironmentVariable(\"randomId1\");",
									"",
									"pm.test(\"Contains Response of Booking(External ID) in response : RESA-\"+randomId1, function () {",
									"var expected = \"RESA-\"+randomId1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d69e1a8-5992-4f76-bbf8-bccbec34eb15",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 62);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date1.getMilliseconds();",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 63);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date2.getMilliseconds();",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate1);",
									"postman.setEnvironmentVariable(\"EndDate\",enddate1);",
									"",
									"var Count1 = 5;",
									"var Count2 = 10;",
									"postman.setEnvironmentVariable(\"Count1\",Count1);",
									"postman.setEnvironmentVariable(\"Count2\",Count2);",
									"",
									"var username = \"cmhub\";",
									"var password = \"admin123\";",
									"postman.setEnvironmentVariable(\"username\",username);",
									"postman.setEnvironmentVariable(\"password\",password);",
									"",
									"if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00538264\";",
									"var RoomTypeCode1 = \"1017196\";",
									"var RoomTypeCode2 = \"1017194\";",
									"}",
									"else if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00011158\";",
									"var RoomTypeCode1 = \"5465478\";",
									"var RoomTypeCode2 = \"467568\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00538271\";",
									"var RoomTypeCode1 = \"1017245\";",
									"var RoomTypeCode2 = \"1017246\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "45nfg94zneqzmnwTtgtnjQU3xsH7H4WT9g6vdDmd",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"externalId\": \"RESA-{{randomId1}}\",\n\n    \"dates\": [\n      {\n        \"date\": \"{{Date}}\",\n        \"externalRateBandId\": \"SBX\",\n        \"externalRoomId\": \"{{RoomTypeCode1}}\"\n      }\n    ],\n    \"bookingStatus\": \"cancel\",\n    \"bookingType\": \"instant\",\n    \"externalPartnerId\": \"{{HotelCode}}\",\n    \"bookingStart\": \"{{StartDate}}\",\n    \"bookingEnd\": \"{{EndDate}}\"\n  }\n]"
						},
						"url": {
							"raw": "{{bb8_host}}/api/external/bookings",
							"host": [
								"{{bb8_host}}"
							],
							"path": [
								"api",
								"external",
								"bookings"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"disabled": true
								}
							]
						},
						"description": "Put Cancel booking to BB8 from CMHUB when it received."
					},
					"response": []
				},
				{
					"name": "GET Booking - CMHUB -> BB8 API",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var hotelcode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var randomId = postman.getEnvironmentVariable(\"randomId\");",
									"randomId = \"RESA-\"+randomId;",
									"",
									"var randomId1 = postman.getEnvironmentVariable(\"randomId1\");",
									"randomId1 = \"RESA-\"+randomId1;",
									"",
									"if(pm.environment.name ==\"PREPROD\" || pm.environment.name == \"DEVINT\")",
									"{",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test(\"Response is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"var string = \"Contains Partner ID: \"+hotelcode+\" in response body\";",
									"pm.test(string, function () {",
									"var expected = hotelcode;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Reference id: \"+randomId+\" as externalId in response body\";",
									"pm.test(string, function () {",
									"var expected = randomId;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Reference id: \"+randomId1+\" as externalId in response body\";",
									"pm.test(string, function () {",
									"var expected = randomId1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"}",
									"else {",
									"    pm.test.skip(\"Not valid in \"+pm.environment.name+\" Evironment\", function(){",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d69e1a8-5992-4f76-bbf8-bccbec34eb15",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() -2);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate() - 1;",
									"if(day == 0) {",
									"    day = day + 1;",
									"}",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\"+00:00\";",
									"var startdate1 = encodeURIComponent(startdate);",
									"postman.setEnvironmentVariable(\"startdate\",startdate1)",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 2);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\"+00:00\";",
									"var enddate1 = encodeURIComponent(enddate);",
									"postman.setEnvironmentVariable(\"enddate\",enddate1)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{bb8_host}}/api/external/bookings?externalPartnerIds={{HotelCode}}&startDate={{startdate}}&endDate={{enddate}}",
							"host": [
								"{{bb8_host}}"
							],
							"path": [
								"api",
								"external",
								"bookings"
							],
							"query": [
								{
									"key": "externalPartnerIds",
									"value": "{{HotelCode}}"
								},
								{
									"key": "startDate",
									"value": "{{startdate}}"
								},
								{
									"key": "endDate",
									"value": "{{enddate}}"
								}
							]
						},
						"description": "Must show Cancel booking from BB8 API"
					},
					"response": []
				}
			]
		},
		{
			"name": "Siteminder - OTA 2007B",
			"item": [
				{
					"name": "PIng",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n  <soap:Body>\n    <ota:OTA_PingRQ EchoToken=\"123\" Version=\"1.0\" TimeStamp=\"2016-05-26T11:11:50-04:00\" xmlns=\"http://www.opentravel.org/OTA/2003/05\">\n      <ota:EchoData>Are you there?</ota:EchoData>\n    </ota:OTA_PingRQ>\n  </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/siteminder",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"siteminder"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelAvailNotifRQ)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "621ec7e0-0f19-4236-8632-604796e420c9",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"00289062\";",
									"var password = \"123456\";",
									"var hotelcode = \"00289062\";",
									"var RoomTypeCode1 = \"722691\";",
									"var RoomTypeCode2 = \"722692\";",
									"var BookingLimit = 20;",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"siteminder\";",
									"var password = \"RkDu2d6Ku3sJHxYj\";",
									"var hotelcode = \"00043775\";",
									"var RoomTypeCode1 = \"245892\";",
									"var RoomTypeCode2 = \"246768\";",
									"var BookingLimit = 20;",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"siteminder\";",
									"var password = \"password\";",
									"var hotelcode = \"00019371\";",
									"var RoomTypeCode1 = \"286201\";",
									"var RoomTypeCode2 = \"504963\";",
									"var BookingLimit = 40;",
									"}",
									"",
									"var count1 = BookingLimit;",
									"var count2 = BookingLimit;",
									"",
									"postman.setEnvironmentVariable(\"count1\", count1);",
									"postman.setEnvironmentVariable(\"count2\", count2);",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\",RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\",RoomTypeCode2);",
									"postman.setEnvironmentVariable(\"BookingLimit\", BookingLimit);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa2475ad-16e0-4b76-adb7-5f4704c038ad",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"var expected = \"Version\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string in reponse if update is successful: Success\", function () {",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "text/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <SOAP-ENV:Header>\n      <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">\n         <wsse:UsernameToken>\n            <wsse:Username>{{username}}</wsse:Username>\n            <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{{password}}</wsse:Password>\n         </wsse:UsernameToken>\n      </wsse:Security>\n   </SOAP-ENV:Header>\n<SOAP-ENV:Body>\n\n<OTA_HotelAvailNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2019-07-16T09:30:47+08:00\" EchoToken=\"abc123\">\n  <AvailStatusMessages HotelCode=\"{{HotelCode}}\">\n    <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n      <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\"/>\n      <RestrictionStatus Status=\"Open\" />\n    </AvailStatusMessage>\n    <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n      <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\"/>\n      <RestrictionStatus Status=\"Open\" />\n    </AvailStatusMessage>\n  </AvailStatusMessages>\n</OTA_HotelAvailNotifRQ>\n   </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/siteminder",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"siteminder"
							]
						},
						"description": "Update availability\n"
					},
					"response": []
				},
				{
					"name": "Get Availabilities(HotelInvCountRQ)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "598c606d-c9c5-436a-b8c5-40ddeae1a1b4",
								"exec": [
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c5ee397-460b-4d7e-b249-02f3a250410a",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var count1 = postman.getEnvironmentVariable('count1');",
									"var count2 = postman.getEnvironmentVariable('count2');",
									"",
									"var roomtype1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var getcount1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"var getcount2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"",
									"pm.test(\"Response is 200 - success\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function() {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function() {",
									"    var expected = \"EchoToken\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function() {",
									"    var expected = \"TimeStamp\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"    var expected = \"Version\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains HoteCode value\", function() {",
									"    expected = HotelCode;",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"if (pm.environment.name == \"LOCAL\") {",
									"    pm.test.skip(\"Doesnt exists\", function() {});",
									"} else {",
									"    pm.test(\"Read availabilties - Contains first Roomtypecode as expected\", function() {",
									"        expected = RoomTypeCode1;",
									"        pm.expect(roomtype1).to.include(expected);",
									"    });",
									"",
									"    pm.test(\"Read availabilties - Contains second Roomtypecode as expected\", function() {",
									"        expected = RoomTypeCode2;",
									"        pm.expect(roomtype2).to.include(expected);",
									"    });",
									"",
									"}",
									"",
									"pm.test(\"Read availabilties for first Roomtypecode - Available for consecutive 20 days as expected\", function() {",
									"    expected = 20;",
									"    var increment = 0;",
									"    for (var i = 0; i < 20; i++) {",
									"        if (getcount1 == count1) {",
									"            increment++;",
									"        }",
									"    }",
									"    pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties for second Roomtypecode - Available for consecutive 20 days as expected\", function() {",
									"    expected = 20;",
									"    var increment = 0;",
									"    for (var i = 20; i < 40; i++) {",
									"        if (getcount2 == count2) {",
									"            increment++;",
									"        }",
									"    }",
									"    pm.expect(increment).to.be.eql(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelInvCountRQ>\n\t\t<ota:HotelInvCountRequests>\n\t\t\t<ota:HotelInvCountRequest>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\" />\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/>\n\t\t\t\t<ota:RoomTypeCandidates>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode1}}\"/>\n                    <ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode2}}\"/>\n\t\t\t\t</ota:RoomTypeCandidates>\n\t\t\t</ota:HotelInvCountRequest>\n\t\t</ota:HotelInvCountRequests>\n\t</ota:OTA_HotelInvCountRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get availability data for a given partner and rooms between start and end date."
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelAvailNotifRQ) - Miminum Stay attributes",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "621ec7e0-0f19-4236-8632-604796e420c9",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 159);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 178);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa2475ad-16e0-4b76-adb7-5f4704c038ad",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string in reponse if update is successful: Success\", function () {",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "text/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <SOAP-ENV:Header>\n      <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">\n         <wsse:UsernameToken>\n            <wsse:Username>{{username}}</wsse:Username>\n            <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{{password}}</wsse:Password>\n         </wsse:UsernameToken>\n      </wsse:Security>\n   </SOAP-ENV:Header>\n<SOAP-ENV:Body>\n\n<OTA_HotelAvailNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2019-07-16T09:30:47+08:00\" EchoToken=\"abc123\">\n  <AvailStatusMessages HotelCode=\"{{HotelCode}}\">\n    <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n      <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\"/>\n      <RestrictionStatus Status=\"Open\" />\n    </AvailStatusMessage>\n            <AvailStatusMessage>\n               <StatusApplicationControl End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" Start=\"{{StartDate}}\" />\n               <LengthsOfStay>\n                  <LengthOfStay MinMaxMessageType=\"SetMinLOS\" Time=\"1\" />\n               </LengthsOfStay>\n            </AvailStatusMessage>\n    <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n      <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\"/>\n      <RestrictionStatus Status=\"Open\" />\n    </AvailStatusMessage>\n            <AvailStatusMessage>\n               <StatusApplicationControl End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\" Start=\"{{StartDate}}\" />\n               <LengthsOfStay>\n                  <LengthOfStay MinMaxMessageType=\"SetMinLOS\" Time=\"1\" />\n               </LengthsOfStay>\n            </AvailStatusMessage>\n  </AvailStatusMessages>\n</OTA_HotelAvailNotifRQ>\n   </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/siteminder",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"siteminder"
							]
						},
						"description": "Update availability with minimum stay attributes included\n"
					},
					"response": []
				},
				{
					"name": "Get Availabilities(HotelInvCountRQ)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "598c606d-c9c5-436a-b8c5-40ddeae1a1b4",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 159);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 178);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c5ee397-460b-4d7e-b249-02f3a250410a",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var count1 = postman.getEnvironmentVariable('count1');",
									"var count2 = postman.getEnvironmentVariable('count2');",
									"",
									"var roomtype1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var getcount1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"var getcount2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains HoteCode value\", function () {",
									"expected = HotelCode;",
									"  pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"if (pm.environment.name == \"LOCAL\") {",
									"    pm.test.skip(\"Doesnt exists\", function() {});",
									"} else {",
									"    pm.test(\"Read availabilties - Contains first Roomtypecode as expected\", function() {",
									"        expected = RoomTypeCode1;",
									"        pm.expect(roomtype1).to.include(expected);",
									"    });",
									"",
									"    pm.test(\"Read availabilties - Contains second Roomtypecode as expected\", function() {",
									"        expected = RoomTypeCode2;",
									"        pm.expect(roomtype2).to.include(expected);",
									"    });",
									"",
									"}",
									"",
									"pm.test(\"Read availabilties for first Roomtypecode - Available for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=0;i<20; i++)",
									"{",
									"if(getcount1 == count1)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties for second Roomtypecode - Available for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=20;i<40; i++)",
									"{",
									"if(getcount2 == count2)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelInvCountRQ>\n\t\t<ota:HotelInvCountRequests>\n\t\t\t<ota:HotelInvCountRequest>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\" />\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/>\n\t\t\t\t<ota:RoomTypeCandidates>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode1}}\"/>\n                    <ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode2}}\"/>\n\t\t\t\t</ota:RoomTypeCandidates>\n\t\t\t</ota:HotelInvCountRequest>\n\t\t</ota:HotelInvCountRequests>\n\t</ota:OTA_HotelInvCountRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get availability data for a given partner and rooms between start and end date."
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelAvailNotifRQ- Stopsale) - Miminum Stay attributes",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "621ec7e0-0f19-4236-8632-604796e420c9",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 159);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 178);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa2475ad-16e0-4b76-adb7-5f4704c038ad",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string in reponse if update is successful: Success\", function () {",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "text/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <SOAP-ENV:Header>\n        <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">\n            <wsse:UsernameToken>\n                <wsse:Username>{{username}}</wsse:Username>\n                <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{{password}}</wsse:Password>\n            </wsse:UsernameToken>\n        </wsse:Security>\n    </SOAP-ENV:Header>\n    <SOAP-ENV:Body>\n        <OTA_HotelAvailNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2019-07-16T09:30:47+08:00\" EchoToken=\"abc123\">\n            <AvailStatusMessages HotelCode=\"{{HotelCode}}\">\n                <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n                    <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\"/>\n                    <RestrictionStatus Status=\"Close\" />\n                </AvailStatusMessage>\n                <AvailStatusMessage>\n                    <StatusApplicationControl End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" Start=\"{{StartDate}}\" />\n                    <LengthsOfStay>\n                        <LengthOfStay MinMaxMessageType=\"SetMinLOS\" Time=\"1\" />\n                    </LengthsOfStay>\n                </AvailStatusMessage>\n                <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n                    <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\"/>\n                    <RestrictionStatus Status=\"Open\" />\n                </AvailStatusMessage>\n                <AvailStatusMessage>\n                    <StatusApplicationControl End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\" Start=\"{{StartDate}}\" />\n                    <LengthsOfStay>\n                        <LengthOfStay MinMaxMessageType=\"SetMinLOS\" Time=\"1\" />\n                    </LengthsOfStay>\n                </AvailStatusMessage>\n            </AvailStatusMessages>\n        </OTA_HotelAvailNotifRQ>\n    </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/siteminder",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"siteminder"
							]
						},
						"description": "Update availability with minimum stay attributes included\n"
					},
					"response": []
				},
				{
					"name": "Get Availabilities(HotelInvCountRQ)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "598c606d-c9c5-436a-b8c5-40ddeae1a1b4",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 159);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 178);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c5ee397-460b-4d7e-b249-02f3a250410a",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var count2 = postman.getEnvironmentVariable('count2');",
									"",
									"var roomtype1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var getcount1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"var getcount2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"",
									"pm.test(\"Response is 200 - success\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function() {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function() {",
									"    var expected = \"EchoToken\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function() {",
									"    var expected = \"TimeStamp\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains HoteCode value\", function() {",
									"    expected = HotelCode;",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"if (pm.environment.name == \"LOCAL\") {",
									"    pm.test.skip(\"Doesnt exists\", function() {});",
									"} else {",
									"    pm.test(\"Read availabilties - Contains first Roomtypecode as expected\", function() {",
									"        expected = RoomTypeCode1;",
									"        pm.expect(roomtype1).to.include(expected);",
									"    });",
									"",
									"    pm.test(\"Read availabilties - Contains second Roomtypecode as expected\", function() {",
									"        expected = RoomTypeCode2;",
									"        pm.expect(roomtype2).to.include(expected);",
									"    });",
									"",
									"    pm.test(\"Read availabilties for first Roomtypecode - Available for consecutive 20 days as expected\", function() {",
									"        expected = 20;",
									"        var increment = 0;",
									"        for (var i = 0; i < 20; i++) {",
									"            if (getcount1 == 0) {",
									"                increment++;",
									"            }",
									"        }",
									"        pm.expect(increment).to.be.eql(expected);",
									"    });",
									"",
									"    pm.test(\"Read availabilties for second Roomtypecode - Available for consecutive 20 days as expected\", function() {",
									"        expected = 20;",
									"        var increment = 0;",
									"        for (var i = 20; i < 40; i++) {",
									"            if (getcount2 == count2) {",
									"                increment++;",
									"            }",
									"        }",
									"        pm.expect(increment).to.be.eql(expected);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelInvCountRQ>\n\t\t<ota:HotelInvCountRequests>\n\t\t\t<ota:HotelInvCountRequest>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\" />\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/>\n\t\t\t\t<ota:RoomTypeCandidates>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode1}}\"/>\n                    <ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode2}}\"/>\n\t\t\t\t</ota:RoomTypeCandidates>\n\t\t\t</ota:HotelInvCountRequest>\n\t\t</ota:HotelInvCountRequests>\n\t</ota:OTA_HotelInvCountRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get availability data for a given partner and rooms between start and end date."
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelAvailNotifRQ) - Stop sale",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "621ec7e0-0f19-4236-8632-604796e420c9",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 40);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 59);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa2475ad-16e0-4b76-adb7-5f4704c038ad",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains message in reponse if update is successful: Success\", function () {",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "text/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <SOAP-ENV:Header>\n      <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">\n         <wsse:UsernameToken>\n            <wsse:Username>{{username}}</wsse:Username>\n            <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{{password}}</wsse:Password>\n         </wsse:UsernameToken>\n      </wsse:Security>\n   </SOAP-ENV:Header>\n<SOAP-ENV:Body>\n\n<OTA_HotelAvailNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2019-07-16T09:30:47+08:00\" EchoToken=\"abc123\">\n  <AvailStatusMessages HotelCode=\"{{HotelCode}}\">\n    <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n      <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\"/>\n      <RestrictionStatus Status=\"Open\" />\n    </AvailStatusMessage>\n    <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n      <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\"/>\n      <RestrictionStatus Status=\"Close\" />\n    </AvailStatusMessage>\n  </AvailStatusMessages>\n</OTA_HotelAvailNotifRQ>\n   </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/siteminder",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"siteminder"
							]
						},
						"description": "Update availability\n"
					},
					"response": []
				},
				{
					"name": "Get Availabilities(HotelInvCountRQ)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "598c606d-c9c5-436a-b8c5-40ddeae1a1b4",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 40);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 59);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c5ee397-460b-4d7e-b249-02f3a250410a",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var count1 = postman.getEnvironmentVariable('count1');",
									"var count2 = postman.getEnvironmentVariable('count2');",
									"",
									"var roomtype1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var getcount1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"var getcount2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"",
									"pm.test(\"Response is 200 - success\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function() {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function() {",
									"    var expected = \"EchoToken\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function() {",
									"    var expected = \"TimeStamp\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains HoteCode value\", function() {",
									"    expected = HotelCode;",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"if (pm.environment.name == \"LOCAL\") {",
									"    pm.test.skip(\"Doesnt exists\", function() {});",
									"} else {",
									"    pm.test(\"Read availabilties - Contains first Roomtypecode as expected\", function() {",
									"        expected = RoomTypeCode1;",
									"        pm.expect(roomtype1).to.include(expected);",
									"    });",
									"",
									"    pm.test(\"Read availabilties - Contains second Roomtypecode as expected\", function() {",
									"        expected = RoomTypeCode2;",
									"        pm.expect(roomtype2).to.include(expected);",
									"    });",
									"",
									"    pm.test(\"Read availabilties for first Roomtypecode - Available for consecutive 20 days as expected\", function() {",
									"        expected = 20;",
									"        var increment = 0;",
									"        for (var i = 0; i < 20; i++) {",
									"            if (getcount1 == count1) {",
									"                increment++;",
									"            }",
									"        }",
									"        pm.expect(increment).to.be.eql(expected);",
									"    });",
									"",
									"    pm.test(\"Read availabilties for second Roomtypecode - Available for consecutive 20 days as expected\", function() {",
									"        expected = 20;",
									"        var increment = 0;",
									"        for (var i = 20; i < 40; i++) {",
									"            if (getcount2 == 0) {",
									"                increment++;",
									"            }",
									"        }",
									"        pm.expect(increment).to.be.eql(expected);",
									"    });",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelInvCountRQ>\n\t\t<ota:HotelInvCountRequests>\n\t\t\t<ota:HotelInvCountRequest>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\" />\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/>\n\t\t\t\t<ota:RoomTypeCandidates>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode1}}\"/>\n                    <ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode2}}\"/>\n\t\t\t\t</ota:RoomTypeCandidates>\n\t\t\t</ota:HotelInvCountRequest>\n\t\t</ota:HotelInvCountRequests>\n\t</ota:OTA_HotelInvCountRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get availability data for a given partner and rooms between start and end date."
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelAvailNotifRQ) - Wrong Date format",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "621ec7e0-0f19-4236-8632-604796e420c9",
								"exec": [
									"var date1 = new Date();",
									"var startdate = date1.setDate(date1.getDate() + 119);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 158);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0dee3274-e7c9-46b1-961e-add095bb001f",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function() {",
									"    var expected = \"EchoToken\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function() {",
									"    var expected = \"TimeStamp\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"    var expected = \"Version\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error: 400\", function () {",
									"var expected = \"400\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error message as expected to enter correct date format 'Y-m-d'\", function () {",
									"var expected = \"Wrong date format. Expected format is `Y-m-d`\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "text/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <SOAP-ENV:Header>\n      <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">\n         <wsse:UsernameToken>\n            <wsse:Username>{{username}}</wsse:Username>\n            <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{{password}}</wsse:Password>\n         </wsse:UsernameToken>\n      </wsse:Security>\n   </SOAP-ENV:Header>\n<SOAP-ENV:Body>\n\n<OTA_HotelAvailNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2019-07-16T09:30:47+08:00\" EchoToken=\"abc123\">\n  <AvailStatusMessages HotelCode=\"{{HotelCode}}\">\n    <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n      <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"BAR\"/>\n      <RestrictionStatus Status=\"Open\" />\n    </AvailStatusMessage>\n    <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n      <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"BAR\"/>\n      <RestrictionStatus Status=\"Open\" />\n    </AvailStatusMessage>\n  </AvailStatusMessages>\n</OTA_HotelAvailNotifRQ>\n   </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/siteminder",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"siteminder"
							]
						},
						"description": "Update availability\n"
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelAvailNotifRQ) - StartDate > EndDate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "621ec7e0-0f19-4236-8632-604796e420c9",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 118);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e02dc5fc-fbd5-43f7-bbb6-fed5ae6c336e",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function() {",
									"    var expected = \"EchoToken\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function() {",
									"    var expected = \"TimeStamp\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 400 - Bad request\", function () {",
									"var contains = false;",
									"var expected = \"400\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "text/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <SOAP-ENV:Header>\n      <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">\n         <wsse:UsernameToken>\n            <wsse:Username>{{username}}</wsse:Username>\n            <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{{password}}</wsse:Password>\n         </wsse:UsernameToken>\n      </wsse:Security>\n   </SOAP-ENV:Header>\n<SOAP-ENV:Body>\n\n<OTA_HotelAvailNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2019-07-16T09:30:47+08:00\" EchoToken=\"abc123\">\n  <AvailStatusMessages HotelCode=\"{{HotelCode}}\">\n    <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n      <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"BAR\"/>\n      <RestrictionStatus Status=\"Open\" />\n    </AvailStatusMessage>\n    <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n      <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"BAR\"/>\n      <RestrictionStatus Status=\"Open\" />\n    </AvailStatusMessage>\n  </AvailStatusMessages>\n</OTA_HotelAvailNotifRQ>\n   </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/siteminder",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"siteminder"
							]
						},
						"description": "Update availability\n"
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelAvailNotifRQ) - Invalid username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4afbce9-f582-41e9-9f0c-ce7aa027e89c",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function() {",
									"    var expected = \"EchoToken\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function() {",
									"    var expected = \"TimeStamp\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"    var expected = \"Version\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e69072b8-2f2b-4c3a-a876-ff724c81b3bf",
								"exec": [
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 158);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"var username = \"0028906\";",
									"postman.setEnvironmentVariable(\"username\", username);",
									"",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "text/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <SOAP-ENV:Header>\n      <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">\n         <wsse:UsernameToken>\n            <wsse:Username>{{username}}</wsse:Username>\n            <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{{password}}</wsse:Password>\n         </wsse:UsernameToken>\n      </wsse:Security>\n   </SOAP-ENV:Header>\n<SOAP-ENV:Body>\n\n<OTA_HotelAvailNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2019-07-16T09:30:47+08:00\" EchoToken=\"abc123\">\n  <AvailStatusMessages HotelCode=\"{{HotelCode}}\">\n    <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n      <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"BAR\"/>\n      <RestrictionStatus Status=\"Open\" />\n    </AvailStatusMessage>\n    <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n      <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"BAR\"/>\n      <RestrictionStatus Status=\"Open\" />\n    </AvailStatusMessage>\n  </AvailStatusMessages>\n</OTA_HotelAvailNotifRQ>\n   </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/siteminder",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"siteminder"
							]
						},
						"description": "Update availability\n"
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelAvailNotifRQ) - Wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6683f078-acfc-4555-b32e-e9fcc45a5ef1",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function() {",
									"    var expected = \"EchoToken\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function() {",
									"    var expected = \"TimeStamp\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f9bc1a73-21c5-463e-b6ab-75a544d0f94e",
								"exec": [
									"var password = \"qa1\";",
									"postman.setEnvironmentVariable(\"password\", password);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"00289062\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"siteminder\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"siteminder\"; ",
									"}",
									"postman.setEnvironmentVariable(\"username\", username);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "text/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <SOAP-ENV:Header>\n      <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">\n         <wsse:UsernameToken>\n            <wsse:Username>{{username}}</wsse:Username>\n            <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{{password}}</wsse:Password>\n         </wsse:UsernameToken>\n      </wsse:Security>\n   </SOAP-ENV:Header>\n<SOAP-ENV:Body>\n\n<OTA_HotelAvailNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2019-07-16T09:30:47+08:00\" EchoToken=\"abc123\">\n  <AvailStatusMessages HotelCode=\"{{HotelCode}}\">\n    <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n      <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"BAR\"/>\n      <RestrictionStatus Status=\"Open\" />\n    </AvailStatusMessage>\n    <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n      <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"BAR\"/>\n      <RestrictionStatus Status=\"Open\" />\n    </AvailStatusMessage>\n  </AvailStatusMessages>\n</OTA_HotelAvailNotifRQ>\n   </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/siteminder",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"siteminder"
							]
						},
						"description": "Update availability\n"
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelAvailNotifRQ) - Wrong Partner code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7b6771f-2445-485f-a2fa-ec41992dabd2",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function() {",
									"    var expected = \"EchoToken\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function() {",
									"    var expected = \"TimeStamp\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "770dd21b-2b55-4589-972c-46675ab1d253",
								"exec": [
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"",
									"var password = \"123456\";",
									"var hotelcode = \"002890\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var password = \"RkDu2d6Ku3sJHxYj\";",
									"var hotelcode = \"000437\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var password = \"password\";",
									"var hotelcode = \"000437\"; ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "text/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <SOAP-ENV:Header>\n      <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">\n         <wsse:UsernameToken>\n            <wsse:Username>{{username}}</wsse:Username>\n            <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{{password}}</wsse:Password>\n         </wsse:UsernameToken>\n      </wsse:Security>\n   </SOAP-ENV:Header>\n<SOAP-ENV:Body>\n\n<OTA_HotelAvailNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2019-07-16T09:30:47+08:00\" EchoToken=\"abc123\">\n  <AvailStatusMessages HotelCode=\"{{HotelCode}}\">\n    <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n      <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"BAR\"/>\n      <RestrictionStatus Status=\"Open\" />\n    </AvailStatusMessage>\n    <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n      <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"BAR\"/>\n      <RestrictionStatus Status=\"Open\" />\n    </AvailStatusMessage>\n  </AvailStatusMessages>\n</OTA_HotelAvailNotifRQ>\n   </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/siteminder",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"siteminder"
							]
						},
						"description": "Update availability\n"
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelAvailNotifRQ) - Wrong Product code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77307577-39ea-425f-b478-9b275e08bec0",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains message in reponse if update is successful: Success\", function () {",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "584f8dcf-b0f8-47ed-9000-01f0f7e12223",
								"exec": [
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var password = \"123456\";",
									"var hotelcode = \"00289062\";",
									"var RoomTypeCode1 = \"7226\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var password = \"RkDu2d6Ku3sJHxYj\";",
									"var hotelcode = \"00043775\";",
									"var RoomTypeCode1 = \"7226\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var password = \"password\";",
									"var hotelcode = \"00019371\";",
									"var RoomTypeCode1 = \"7226\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "text/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <SOAP-ENV:Header>\n      <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">\n         <wsse:UsernameToken>\n            <wsse:Username>{{username}}</wsse:Username>\n            <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{{password}}</wsse:Password>\n         </wsse:UsernameToken>\n      </wsse:Security>\n   </SOAP-ENV:Header>\n<SOAP-ENV:Body>\n\n<OTA_HotelAvailNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2019-07-16T09:30:47+08:00\" EchoToken=\"abc123\">\n  <AvailStatusMessages HotelCode=\"{{HotelCode}}\">\n    <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n      <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"BAR\"/>\n      <RestrictionStatus Status=\"Open\" />\n    </AvailStatusMessage>\n    <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n      <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"BAR\"/>\n      <RestrictionStatus Status=\"Open\" />\n    </AvailStatusMessage>\n  </AvailStatusMessages>\n</OTA_HotelAvailNotifRQ>\n   </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/siteminder",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"siteminder"
							]
						},
						"description": "Update availability\n"
					},
					"response": []
				},
				{
					"name": "Get Rooms Info(HotelAvailRQ)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "336cafff-7a10-4652-9877-356d075cfd2d",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"    var expected = \"Version\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Can see first RoomTypeCode : \"+RoomTypeCode1+\" in response as expected\"",
									"pm.test(string, function() {",
									"    var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"string = \"Can see second RoomTypeCode : \"+RoomTypeCode2+\" in response as expected\"",
									"pm.test(string, function() {",
									"    var expected = RoomTypeCode2;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "231e7ade-50a0-4892-b409-8ebb0a198df3",
								"exec": [
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"00289062\";",
									"var password = \"123456\";",
									"var hotelcode = \"00289062\";",
									"var RoomTypeCode1 = \"722691\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"siteminder\";",
									"var password = \"RkDu2d6Ku3sJHxYj\";",
									"var hotelcode = \"00043775\";",
									"var RoomTypeCode1 = \"245892\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"siteminder\";",
									"var password = \"password\";",
									"var hotelcode = \"00019371\";",
									"var RoomTypeCode1 = \"286201\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\",RoomTypeCode1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "text/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <SOAP-ENV:Header>\n      <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">\n         <wsse:UsernameToken>\n            <wsse:Username>{{username}}</wsse:Username>\n            <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{{password}}</wsse:Password>\n         </wsse:UsernameToken>\n      </wsse:Security>\n   </SOAP-ENV:Header>\n<SOAP-ENV:Body>\n<OTA_HotelAvailRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2005-08-01T09:30:47+02:00\" EchoToken=\"fb57388d\" AvailRatesOnly=\"true\">\n         <AvailRequestSegments>\n            <AvailRequestSegment AvailReqType=\"Room\">\n               <HotelSearchCriteria>\n                  <Criterion>\n                     <HotelRef HotelCode=\"{{HotelCode}}\" />\n                  </Criterion>\n               </HotelSearchCriteria>\n            </AvailRequestSegment>\n         </AvailRequestSegments>\n      </OTA_HotelAvailRQ>\n   </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/siteminder",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"siteminder"
							]
						},
						"description": "Get rooms and rate plans\n"
					},
					"response": []
				},
				{
					"name": "Get Rooms Info(HotelAvailRQ) - Invalid username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d1195b8b-39f4-4bb7-b19a-483ec4186aad",
								"exec": [
									"var username = \"0028906\";",
									"postman.setEnvironmentVariable(\"username\", username);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8e789d0d-93ef-40b9-9a78-b69a7216e23b",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function() {",
									"    var expected = \"EchoToken\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function() {",
									"    var expected = \"TimeStamp\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"    var expected = \"Version\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "text/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <SOAP-ENV:Header>\n      <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">\n         <wsse:UsernameToken>\n            <wsse:Username>{{username}}</wsse:Username>\n            <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{{password}}</wsse:Password>\n         </wsse:UsernameToken>\n      </wsse:Security>\n   </SOAP-ENV:Header>\n<SOAP-ENV:Body>\n<OTA_HotelAvailRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2005-08-01T09:30:47+02:00\" EchoToken=\"fb57388d\" AvailRatesOnly=\"true\">\n         <AvailRequestSegments>\n            <AvailRequestSegment AvailReqType=\"Room\">\n               <HotelSearchCriteria>\n                  <Criterion>\n                     <HotelRef HotelCode=\"{{HotelCode}}\" />\n                  </Criterion>\n               </HotelSearchCriteria>\n            </AvailRequestSegment>\n         </AvailRequestSegments>\n      </OTA_HotelAvailRQ>\n   </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/siteminder",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"siteminder"
							]
						},
						"description": "Get rooms and rate plans\n"
					},
					"response": []
				},
				{
					"name": "Get Rooms Info(HotelAvailRQ) - Wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "510dba49-19c5-4c2a-8aa4-0ee227cd4ecb",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function() {",
									"    var expected = \"EchoToken\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function() {",
									"    var expected = \"TimeStamp\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "94dfc488-aeee-4c98-a52f-41eaa1b31071",
								"exec": [
									"var password = \"qa1\";",
									"postman.setEnvironmentVariable(\"password\", password);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"00289062\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"siteminder\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"siteminder\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "text/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <SOAP-ENV:Header>\n      <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">\n         <wsse:UsernameToken>\n            <wsse:Username>{{username}}</wsse:Username>\n            <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{{password}}</wsse:Password>\n         </wsse:UsernameToken>\n      </wsse:Security>\n   </SOAP-ENV:Header>\n<SOAP-ENV:Body>\n<OTA_HotelAvailRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2005-08-01T09:30:47+02:00\" EchoToken=\"fb57388d\" AvailRatesOnly=\"true\">\n         <AvailRequestSegments>\n            <AvailRequestSegment AvailReqType=\"Room\">\n               <HotelSearchCriteria>\n                  <Criterion>\n                     <HotelRef HotelCode=\"{{HotelCode}}\" />\n                  </Criterion>\n               </HotelSearchCriteria>\n            </AvailRequestSegment>\n         </AvailRequestSegments>\n      </OTA_HotelAvailRQ>\n   </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/siteminder",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"siteminder"
							]
						},
						"description": "Get rooms and rate plans\n"
					},
					"response": []
				},
				{
					"name": "Get Rooms Info(HotelAvailRQ) - Wrong Partner code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70424c63-2022-46df-a5cf-98c043d41f0b",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function() {",
									"    var expected = \"EchoToken\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function() {",
									"    var expected = \"TimeStamp\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"    var expected = \"Version\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "070cbc3d-3f86-4556-8a68-0d25b9797a6b",
								"exec": [
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var password = \"123456\";",
									"",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var password = \"RkDu2d6Ku3sJHxYj\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var password = \"password\";",
									"}",
									"var HotelCode = \"564564\";",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", HotelCode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "text/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <SOAP-ENV:Header>\n      <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">\n         <wsse:UsernameToken>\n            <wsse:Username>{{username}}</wsse:Username>\n            <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{{password}}</wsse:Password>\n         </wsse:UsernameToken>\n      </wsse:Security>\n   </SOAP-ENV:Header>\n<SOAP-ENV:Body>\n<OTA_HotelAvailRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2005-08-01T09:30:47+02:00\" EchoToken=\"fb57388d\" AvailRatesOnly=\"true\">\n         <AvailRequestSegments>\n            <AvailRequestSegment AvailReqType=\"Room\">\n               <HotelSearchCriteria>\n                  <Criterion>\n                     <HotelRef HotelCode=\"{{HotelCode}}\" />\n                  </Criterion>\n               </HotelSearchCriteria>\n            </AvailRequestSegment>\n         </AvailRequestSegments>\n      </OTA_HotelAvailRQ>\n   </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/siteminder",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"siteminder"
							]
						},
						"description": "Get rooms and rate plans\n"
					},
					"response": []
				},
				{
					"name": "Update Room Rates(HotelRateAmountNotifRQ)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3e3fbc1a-a941-4de1-bf03-6dcd7063c7d4",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 40);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 59);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00289062\";",
									"var RoomTypeCode1 = \"722691\";",
									"var RoomTypeCode2 = \"722692\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00043775\";",
									"var RoomTypeCode1 = \"245892\";",
									"var RoomTypeCode2 = \"246768\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var hotelcode = \"00019371\";",
									"var RoomTypeCode1 = \"286201\";",
									"var RoomTypeCode2 = \"504963\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\",RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\",RoomTypeCode2);",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f1098bfc-6365-4cc3-b019-7a01cf03870c",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"    var expected = \"Version\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string in reponse if update is successful: Success\", function () {",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "text/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <SOAP-ENV:Header>\n      <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">\n         <wsse:UsernameToken>\n            <wsse:Username>{{username}}</wsse:Username>\n            <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{{password}}</wsse:Password>\n         </wsse:UsernameToken>\n      </wsse:Security>\n   </SOAP-ENV:Header>\n<SOAP-ENV:Body>\n\n<OTA_HotelRateAmountNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" TimeStamp=\"2019-08-01T09:30:47+08:00\" Version=\"1.0\" EchoToken=\"abc123\">\n  <RateAmountMessages HotelCode=\"{{HotelCode}}\">\n    <RateAmountMessage>\n      <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\"/>\n      <Rates>\n        <Rate>\n          <BaseByGuestAmts>\n            <BaseByGuestAmt AgeQualifyingCode=\"10\" AmountAfterTax=\"123.00\"/>\n          </BaseByGuestAmts>\n        </Rate>\n      </Rates>\n    </RateAmountMessage>\n    <RateAmountMessage>\n      <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\"/>\n      <Rates>\n        <Rate>\n          <BaseByGuestAmts>\n            <BaseByGuestAmt AgeQualifyingCode=\"10\" AmountAfterTax=\"123.00\"/>\n          </BaseByGuestAmts>\n        </Rate>\n      </Rates>\n    </RateAmountMessage>\n  </RateAmountMessages>\n</OTA_HotelRateAmountNotifRQ>\n\n   </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/siteminder",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"siteminder"
							]
						},
						"description": "Update rates\n"
					},
					"response": []
				},
				{
					"name": "Update Room Rates(HotelRateAmountNotifRQ) - Wrong Date format",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3e3fbc1a-a941-4de1-bf03-6dcd7063c7d4",
								"exec": [
									"var date1 = new Date();",
									"var startdate = date1.setDate(date1.getDate() + 119);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f1098bfc-6365-4cc3-b019-7a01cf03870c",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains error: 400\", function () {",
									"var expected = \"400\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function() {",
									"    var expected = \"EchoToken\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function() {",
									"    var expected = \"TimeStamp\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"    var expected = \"Version\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error message as expected to enter correct date format 'Y-m-d'\", function () {",
									"var expected = \"Wrong date format. Expected format is `Y-m-d`\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "text/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <SOAP-ENV:Header>\n      <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">\n         <wsse:UsernameToken>\n            <wsse:Username>{{username}}</wsse:Username>\n            <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{{password}}</wsse:Password>\n         </wsse:UsernameToken>\n      </wsse:Security>\n   </SOAP-ENV:Header>\n<SOAP-ENV:Body>\n\n<OTA_HotelRateAmountNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" TimeStamp=\"2019-08-01T09:30:47+08:00\" Version=\"1.0\" EchoToken=\"abc123\">\n  <RateAmountMessages HotelCode=\"{{HotelCode}}\">\n    <RateAmountMessage>\n      <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"BAR\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\"/>\n      <Rates>\n        <Rate>\n          <BaseByGuestAmts>\n            <BaseByGuestAmt AgeQualifyingCode=\"10\" AmountAfterTax=\"123.00\"/>\n          </BaseByGuestAmts>\n        </Rate>\n      </Rates>\n    </RateAmountMessage>\n    <RateAmountMessage>\n      <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"BAR\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\"/>\n      <Rates>\n        <Rate>\n          <BaseByGuestAmts>\n            <BaseByGuestAmt AgeQualifyingCode=\"10\" AmountAfterTax=\"123.00\"/>\n          </BaseByGuestAmts>\n        </Rate>\n      </Rates>\n    </RateAmountMessage>\n  </RateAmountMessages>\n</OTA_HotelRateAmountNotifRQ>\n\n   </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/siteminder",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"siteminder"
							]
						},
						"description": "Update rates\n"
					},
					"response": []
				},
				{
					"name": "Update Room Rates(HotelRateAmountNotifRQ) - StartDate > EndDate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3e3fbc1a-a941-4de1-bf03-6dcd7063c7d4",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 118);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7261ae51-d095-4b15-b5d7-9d8887dad5dc",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function() {",
									"    var expected = \"EchoToken\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function() {",
									"    var expected = \"TimeStamp\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 400 - Bad request\", function () {",
									"var contains = false;",
									"var expected = \"400\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "text/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <SOAP-ENV:Header>\n      <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">\n         <wsse:UsernameToken>\n            <wsse:Username>{{username}}</wsse:Username>\n            <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{{password}}</wsse:Password>\n         </wsse:UsernameToken>\n      </wsse:Security>\n   </SOAP-ENV:Header>\n<SOAP-ENV:Body>\n\n<OTA_HotelRateAmountNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" TimeStamp=\"2019-08-01T09:30:47+08:00\" Version=\"1.0\" EchoToken=\"abc123\">\n  <RateAmountMessages HotelCode=\"{{HotelCode}}\">\n    <RateAmountMessage>\n      <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"BAR\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\"/>\n      <Rates>\n        <Rate>\n          <BaseByGuestAmts>\n            <BaseByGuestAmt AgeQualifyingCode=\"10\" AmountAfterTax=\"123.00\"/>\n          </BaseByGuestAmts>\n        </Rate>\n      </Rates>\n    </RateAmountMessage>\n  </RateAmountMessages>\n</OTA_HotelRateAmountNotifRQ>\n\n   </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/siteminder",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"siteminder"
							]
						},
						"description": "Update rates\n"
					},
					"response": []
				},
				{
					"name": "Update Room Rates(HotelRateAmountNotifRQ) - Invalid username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8bc5548-fc3a-4344-a41c-54ae33170859",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function() {",
									"    var expected = \"EchoToken\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function() {",
									"    var expected = \"TimeStamp\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Version\", function() {",
									"    var expected = \"Version\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "059c1ac5-ee95-45d8-a56e-42b0a2f7d898",
								"exec": [
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 158);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"var username = \"0028906\";",
									"postman.setEnvironmentVariable(\"username\", username);",
									"",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "text/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <SOAP-ENV:Header>\n      <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">\n         <wsse:UsernameToken>\n            <wsse:Username>{{username}}</wsse:Username>\n            <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{{password}}</wsse:Password>\n         </wsse:UsernameToken>\n      </wsse:Security>\n   </SOAP-ENV:Header>\n<SOAP-ENV:Body>\n\n<OTA_HotelRateAmountNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" TimeStamp=\"2019-08-01T09:30:47+08:00\" Version=\"1.0\" EchoToken=\"abc123\">\n  <RateAmountMessages HotelCode=\"{{HotelCode}}\">\n    <RateAmountMessage>\n      <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"BAR\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\"/>\n      <Rates>\n        <Rate>\n          <BaseByGuestAmts>\n            <BaseByGuestAmt AgeQualifyingCode=\"10\" AmountAfterTax=\"123.00\"/>\n          </BaseByGuestAmts>\n        </Rate>\n      </Rates>\n    </RateAmountMessage>\n  </RateAmountMessages>\n</OTA_HotelRateAmountNotifRQ>\n\n   </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/siteminder",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"siteminder"
							]
						},
						"description": "Update rates\n"
					},
					"response": []
				},
				{
					"name": "Update Room Rates(HotelRateAmountNotifRQ) - Wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa17413a-a366-4336-8d8f-e960ef29b761",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function() {",
									"    var expected = \"EchoToken\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function() {",
									"    var expected = \"TimeStamp\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1e58c6eb-4093-4466-97d3-55555f1a7f90",
								"exec": [
									"var password = \"qa1\";",
									"postman.setEnvironmentVariable(\"password\", password);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"00289062\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"siteminder\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"siteminder\"; ",
									"}",
									"postman.setEnvironmentVariable(\"username\", username);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "text/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <SOAP-ENV:Header>\n      <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">\n         <wsse:UsernameToken>\n            <wsse:Username>{{username}}</wsse:Username>\n            <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{{password}}</wsse:Password>\n         </wsse:UsernameToken>\n      </wsse:Security>\n   </SOAP-ENV:Header>\n<SOAP-ENV:Body>\n\n<OTA_HotelRateAmountNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" TimeStamp=\"2019-08-01T09:30:47+08:00\" Version=\"1.0\" EchoToken=\"abc123\">\n  <RateAmountMessages HotelCode=\"{{HotelCode}}\">\n    <RateAmountMessage>\n      <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"BAR\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\"/>\n      <Rates>\n        <Rate>\n          <BaseByGuestAmts>\n            <BaseByGuestAmt AgeQualifyingCode=\"10\" AmountAfterTax=\"123.00\"/>\n          </BaseByGuestAmts>\n        </Rate>\n      </Rates>\n    </RateAmountMessage>\n  </RateAmountMessages>\n</OTA_HotelRateAmountNotifRQ>\n\n   </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/siteminder",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"siteminder"
							]
						},
						"description": "Update rates\n"
					},
					"response": []
				},
				{
					"name": "Update Room Rates(HotelRateAmountNotifRQ) - Wrong Partner code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ce7d7a4f-d833-4a27-b44b-a59f2edb221f",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function() {",
									"    var expected = \"EchoToken\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function() {",
									"    var expected = \"TimeStamp\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: 403 - Access denied\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "23c42448-2035-426f-87c8-4efc80b0f6a1",
								"exec": [
									"if (pm.environment.name == \"SANDBOX_ENV\") {",
									"    var password = \"123456\";",
									"    var hotelcode = \"002890\";",
									"} else if (pm.environment.name == \"DEVINT\", \"LOCAL\") {",
									"    var password = \"password\";",
									"    var hotelcode = \"000437\";",
									"} else if (pm.environment.name == \"PREPROD\") {",
									"    var password = \"RkDu2d6Ku3sJHxYj\";",
									"    var hotelcode = \"000437\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "text/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <SOAP-ENV:Header>\n      <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">\n         <wsse:UsernameToken>\n            <wsse:Username>{{username}}</wsse:Username>\n            <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{{password}}</wsse:Password>\n         </wsse:UsernameToken>\n      </wsse:Security>\n   </SOAP-ENV:Header>\n<SOAP-ENV:Body>\n\n<OTA_HotelRateAmountNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" TimeStamp=\"2019-08-01T09:30:47+08:00\" Version=\"1.0\" EchoToken=\"abc123\">\n  <RateAmountMessages HotelCode=\"{{HotelCode}}\">\n    <RateAmountMessage>\n      <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"BAR\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\"/>\n      <Rates>\n        <Rate>\n          <BaseByGuestAmts>\n            <BaseByGuestAmt AgeQualifyingCode=\"10\" AmountAfterTax=\"123.00\"/>\n          </BaseByGuestAmts>\n        </Rate>\n      </Rates>\n    </RateAmountMessage>\n  </RateAmountMessages>\n</OTA_HotelRateAmountNotifRQ>\n\n   </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/siteminder",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"siteminder"
							]
						},
						"description": "Update rates\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Wubook - JSON API",
			"item": [
				{
					"name": "Get rooms",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "101ca060-6299-4fa0-9c43-f9391b5e008e",
								"exec": [
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"wubook\";",
									"var password = \"password\";",
									"var hotelcode = \"2435077\";",
									"var RoomTypeCode1 = \"100230\";",
									"",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"wubook\";",
									"var password = \"password\";",
									"var hotelcode = \"00279256\";",
									"var RoomTypeCode1 = \"694490\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"wubook\";",
									"var password = \"password\";",
									"var hotelcode = \"00145577\";",
									"var RoomTypeCode1 = \"320080\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "11eb27aa-7453-4229-a8fa-548b84a74993",
								"exec": [
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"",
									"pm.test(\"Response is success - 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains room_id: 100230\", function () {",
									"var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"cm_auth\":{\n      \"username\":\"{{username}}\",\n      \"password\":\"{{password}}\"\n   },\n   \"hotel_auth\":{\n      \"hotel_id\":\"{{HotelCode}}\"\n   },\n   \"action\":\"get_rooms\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/wubook",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"wubook"
							]
						},
						"description": "Get rooms for a given partner"
					},
					"response": []
				},
				{
					"name": "Get rooms - No Partner Code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "101ca060-6299-4fa0-9c43-f9391b5e008e",
								"exec": [
									"",
									"var hotelcode = \"243507\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f93458d7-a013-4f3d-bba3-f634489f1ff0",
								"exec": [
									"pm.test(\"403 Forbidden error response\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains string: 403\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"cm_auth\":{\n      \"username\":\"{{username}}\",\n      \"password\":\"{{password}}\"\n   },\n   \"hotel_auth\":{\n      \"hotel_id\":\"{{HotelCode}}\"\n   },\n   \"action\":\"get_rooms\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/wubook",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"wubook"
							]
						},
						"description": "Get rooms for a given partner"
					},
					"response": []
				},
				{
					"name": "Get rooms - Wrong Password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "101ca060-6299-4fa0-9c43-f9391b5e008e",
								"exec": [
									"var password = \"passwor\";",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"2435077\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00279256\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									" var hotelcode = \"00145577\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "58ab0321-e183-487d-b781-71bc52709b85",
								"exec": [
									"pm.test(\"401 Unauthorized error response\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains error string: Invalid credentials\", function () {",
									"var contains = false;",
									"var expected = \"Invalid credentials\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"cm_auth\":{\n      \"username\":\"{{username}}\",\n      \"password\":\"{{password}}\"\n   },\n   \"hotel_auth\":{\n      \"hotel_id\":\"{{HotelCode}}\"\n   },\n   \"action\":\"get_rooms\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/wubook",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"wubook"
							]
						},
						"description": "Get rooms for a given partner"
					},
					"response": []
				},
				{
					"name": "Get rooms - Invalid Username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "101ca060-6299-4fa0-9c43-f9391b5e008e",
								"exec": [
									"var username = \"wuboo\";",
									"var password = \"password\";",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "80a30606-f51b-4be4-b5e0-c0037f043720",
								"exec": [
									"pm.test(\"401 Unauthorized error response\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains error string: Invalid credentials\", function () {",
									"var contains = false;",
									"var expected = \"Invalid credentials\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"cm_auth\":{\n      \"username\":\"{{username}}\",\n      \"password\":\"{{password}}\"\n   },\n   \"hotel_auth\":{\n      \"hotel_id\":\"{{HotelCode}}\"\n   },\n   \"action\":\"get_rooms\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/wubook",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"wubook"
							]
						},
						"description": "Get rooms for a given partner"
					},
					"response": []
				},
				{
					"name": "Get rates plans",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6001065e-1a2c-4489-b66d-3d40e4a35d91",
								"exec": [
									"var username = \"wubook\";",
									"postman.setEnvironmentVariable(\"username\", username);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1874dbb3-b677-4198-b8de-263549667392",
								"exec": [
									"pm.test(\"Response is success - 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"cm_auth\":{\n      \"username\":\"{{username}}\",\n      \"password\":\"{{password}}\"\n   },\n   \"hotel_auth\":{\n      \"hotel_id\":\"{{HotelCode}}\"\n   },\n   \"action\":\"get_rates\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/wubook",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"wubook"
							]
						},
						"description": "List rate plans for a given partner"
					},
					"response": []
				},
				{
					"name": "Get rates - No Partner Code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "101ca060-6299-4fa0-9c43-f9391b5e008e",
								"exec": [
									"",
									"var hotelcode = \"243507\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f93458d7-a013-4f3d-bba3-f634489f1ff0",
								"exec": [
									"pm.test(\"403 Forbidden error response\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains string: 403\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"cm_auth\":{\n      \"username\":\"{{username}}\",\n      \"password\":\"{{password}}\"\n   },\n   \"hotel_auth\":{\n      \"hotel_id\":\"{{HotelCode}}\"\n   },\n   \"action\":\"get_rates\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/wubook",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"wubook"
							]
						},
						"description": "Get rooms for a given partner"
					},
					"response": []
				},
				{
					"name": "Get rates - Wrong Password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "101ca060-6299-4fa0-9c43-f9391b5e008e",
								"exec": [
									"var password = \"passwor\";",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"",
									"var hotelcode = \"2435077\";",
									"",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00279256\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									" var hotelcode = \"00145577\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "58ab0321-e183-487d-b781-71bc52709b85",
								"exec": [
									"pm.test(\"401 Unauthorized error response\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains error string: Invalid credentials\", function () {",
									"var contains = false;",
									"var expected = \"Invalid credentials\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"cm_auth\":{\n      \"username\":\"{{username}}\",\n      \"password\":\"{{password}}\"\n   },\n   \"hotel_auth\":{\n      \"hotel_id\":\"{{HotelCode}}\"\n   },\n   \"action\":\"get_rates\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/wubook",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"wubook"
							]
						},
						"description": "Get rooms for a given partner"
					},
					"response": []
				},
				{
					"name": "Get rates - Invalid Username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "101ca060-6299-4fa0-9c43-f9391b5e008e",
								"exec": [
									"var username = \"wuboo\";",
									"var password = \"password\";",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "80a30606-f51b-4be4-b5e0-c0037f043720",
								"exec": [
									"pm.test(\"401 Unauthorized error response\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains error string: Invalid credentials\", function () {",
									"var contains = false;",
									"var expected = \"Invalid credentials\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"cm_auth\":{\n      \"username\":\"{{username}}\",\n      \"password\":\"{{password}}\"\n   },\n   \"hotel_auth\":{\n      \"hotel_id\":\"{{HotelCode}}\"\n   },\n   \"action\":\"get_rates\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/wubook",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"wubook"
							]
						},
						"description": "Get rooms for a given partner"
					},
					"response": []
				},
				{
					"name": "Update availability & rates data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "129b7200-3e49-4d90-9615-6f291b01d718",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"var month2 = date2.getMonth() + 1;",
									"if(month2 < 10)",
									"{",
									"month2 = \"0\" + month2;",
									"}",
									"var day2 = date2.getDate();",
									"if(day2 < 10)",
									"{",
									"    day2 = \"0\" + day2;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month2 + \"-\" + day2;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									"// Closed restriction dates",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 121);",
									"var month3 = date3.getMonth() + 1;",
									"if(month3 < 10)",
									"{",
									"month3 = \"0\" + month3;",
									"}",
									"var day3 = date3.getDate();",
									"if(day3 < 10)",
									"{",
									"    day3 = \"0\" + day3;",
									"}",
									"var closedEndDate = date3.getFullYear() + \"-\" + month3 + \"-\" + day3;",
									"",
									"pm.environment.set(\"closedStartDate\", startdate);",
									"pm.environment.set(\"closedEndDate\", closedEndDate);",
									"",
									"var Count1 = 5;",
									"postman.setEnvironmentVariable(\"Count1\", Count1);",
									"var Price1 = 90.50;",
									"postman.setEnvironmentVariable(\"Price1\", Price1);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"wubook\";",
									"var password = \"password\";",
									"var hotelcode = \"2435077\";",
									"var RoomTypeCode1 = \"100230\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"wubook\";",
									"var password = \"password\";",
									"var hotelcode = \"00279256\";",
									"var RoomTypeCode1 = \"694490\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"wubook\";",
									"var password = \"password\";",
									"var hotelcode = \"00145577\"; ",
									"var RoomTypeCode1 = \"320080\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "904b5cbc-8bb8-4fe5-bdf2-83c42a3881cc",
								"exec": [
									"pm.test(\"Response is success - 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains success code string: 200\", function () {",
									"var contains = false;",
									"var expected = \"200\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"cm_auth\":{\n      \"username\":\"{{username}}\",\n      \"password\":\"{{password}}\"\n   },\n   \"hotel_auth\":{\n      \"hotel_id\":\"{{HotelCode}}\"\n   },\n   \"action\":\"update_data\",\n   \"data\":{\n      \"availability\":[\n         {\n            \"dfrom\":\"{{StartDate}}\",\n            \"dto\":\"{{EndDate}}\",\n            \"room_id\":\"{{RoomTypeCode1}}\",\n            \"avail\":\"{{Count1}}\"\n         }\n      ],\n      \"prices\":[\n         {\n            \"dfrom\":\"{{StartDate}}\",\n            \"dto\":\"{{EndDate}}\",\n            \"room_id\":\"{{RoomTypeCode1}}\",\n            \"rate_id\":\"SBX\",\n            \"occupancy\":\"\",\n            \"price\":{{Price1}}\n         }\n      ],\n      \"restrictions\":[\n         {\n            \"dfrom\":\"{{closedStartDate}}\",\n            \"dto\":\"{{closedEndDate}}\",\n            \"room_id\":\"{{RoomTypeCode1}}\",\n            \"rate_id\":\"SBX\",\n            \"closed\":true,\n            \"cta\":true,\n            \"ctd\":false,\n            \"minstay\":1,\n            \"maxstay\":0,\n            \"minstayarr\":1\n         }\n      ]\n   }\n}"
						},
						"url": {
							"raw": "{{host}}/api/wubook",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"wubook"
							]
						},
						"description": "Update availability & rates data for a given partner"
					},
					"response": []
				},
				{
					"name": "Update availability & rates data - Invalid Rate ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "129b7200-3e49-4d90-9615-6f291b01d718",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "904b5cbc-8bb8-4fe5-bdf2-83c42a3881cc",
								"exec": [
									"pm.test(\"Response is Bad request - 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains code string: 411\", function () {",
									"var contains = false;",
									"var expected = \"411\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"cm_auth\":{\n      \"username\":\"{{username}}\",\n      \"password\":\"{{password}}\"\n   },\n   \"hotel_auth\":{\n      \"hotel_id\":\"{{HotelCode}}\"\n   },\n   \"action\":\"update_data\",\n   \"data\":{\n      \"availability\":[\n         {\n            \"dfrom\":\"{{StartDate}}\",\n            \"dto\":\"{{EndDate}}\",\n            \"room_id\":\"{{RoomTypeCode1}}\",\n            \"avail\":\"{{Count1}}\"\n         }\n      ],\n      \"prices\":[\n         {\n            \"dfrom\":\"{{StartDate}}\",\n            \"dto\":\"{{EndDate}}\",\n            \"room_id\":\"{{RoomTypeCode1}}\",\n            \"rate_id\":\"SBXrt\",\n            \"occupancy\":\"\",\n            \"price\":{{Price1}}\n         }\n      ],\n      \"restrictions\":[\n         {\n            \"dfrom\":\"YYYY-MM-DD\",\n            \"dto\":\"YYYY-MM-DD\",\n            \"room_id\":\"2\",\n            \"rate_id\":\"1\",\n            \"closed\":false,\n            \"cta\":true,\n            \"ctd\":false,\n            \"minstay\":1,\n            \"maxstay\":0,\n            \"minstayarr\":1\n         }\n      ]\n   }\n}"
						},
						"url": {
							"raw": "{{host}}/api/wubook",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"wubook"
							]
						},
						"description": "Update availability & rates data - Give invalid Rate id and must get response with code : 411"
					},
					"response": []
				},
				{
					"name": "Update availability & rates data - Startdate > Enddate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "129b7200-3e49-4d90-9615-6f291b01d718",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 160);",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"var month2 = date2.getMonth() + 1;",
									"if(month2 < 10)",
									"{",
									"month2 = \"0\" + month2;",
									"}",
									"var day2 = date2.getDate();",
									"if(day2 < 10)",
									"{",
									"    day2 = \"0\" + day2;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month2 + \"-\" + day2;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "904b5cbc-8bb8-4fe5-bdf2-83c42a3881cc",
								"exec": [
									"pm.test(\"Response is Bad Request - 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains code : 400 in response body\", function () {",
									"var contains = false;",
									"var expected = \"400\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error string with description\", function () {",
									"var contains = false;",
									"var expected = \"Start date cannot be greater than end date\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"cm_auth\":{\n      \"username\":\"{{username}}\",\n      \"password\":\"{{password}}\"\n   },\n   \"hotel_auth\":{\n      \"hotel_id\":\"{{HotelCode}}\"\n   },\n   \"action\":\"update_data\",\n   \"data\":{\n      \"availability\":[\n         {\n            \"dfrom\":\"{{StartDate}}\",\n            \"dto\":\"{{EndDate}}\",\n            \"room_id\":\"{{RoomTypeCode1}}\",\n            \"avail\":\"{{Count1}}\"\n         }\n      ],\n      \"prices\":[\n         {\n            \"dfrom\":\"{{StartDate}}\",\n            \"dto\":\"{{EndDate}}\",\n            \"room_id\":\"{{RoomTypeCode1}}\",\n            \"rate_id\":\"SBX\",\n            \"occupancy\":\"\",\n            \"price\":{{Price1}}\n         }\n      ],\n      \"restrictions\":[\n         {\n            \"dfrom\":\"YYYY-MM-DD\",\n            \"dto\":\"YYYY-MM-DD\",\n            \"room_id\":\"2\",\n            \"rate_id\":\"1\",\n            \"closed\":false,\n            \"cta\":true,\n            \"ctd\":false,\n            \"minstay\":1,\n            \"maxstay\":0,\n            \"minstayarr\":1\n         }\n      ]\n   }\n}"
						},
						"url": {
							"raw": "{{host}}/api/wubook",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"wubook"
							]
						},
						"description": "Update availability & rates data for a given partner"
					},
					"response": []
				},
				{
					"name": "Update availability & rates data - No partner code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "129b7200-3e49-4d90-9615-6f291b01d718",
								"exec": [
									"",
									"var hotelcode = \"243507\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "904b5cbc-8bb8-4fe5-bdf2-83c42a3881cc",
								"exec": [
									"var hotelcode = postman.getEnvironmentVariable(\"HotelCode\");",
									"",
									"pm.test(\"Response - 403 Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains code : 403 in response body\", function () {",
									"var contains = false;",
									"var expected = \"403\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error string with description\", function () {",
									"var contains = false;",
									"var expected = \"The partner with code `\"+hotelcode+\"`  has not been found\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"cm_auth\":{\n      \"username\":\"{{username}}\",\n      \"password\":\"{{password}}\"\n   },\n   \"hotel_auth\":{\n      \"hotel_id\":\"{{HotelCode}}\"\n   },\n   \"action\":\"update_data\",\n   \"data\":{\n      \"availability\":[\n         {\n            \"dfrom\":\"{{StartDate}}\",\n            \"dto\":\"{{EndDate}}\",\n            \"room_id\":\"{{RoomTypeCode1}}\",\n            \"avail\":\"{{Count1}}\"\n         }\n      ],\n      \"prices\":[\n         {\n            \"dfrom\":\"{{StartDate}}\",\n            \"dto\":\"{{EndDate}}\",\n            \"room_id\":\"{{RoomTypeCode1}}\",\n            \"rate_id\":\"SBX\",\n            \"occupancy\":\"\",\n            \"price\":{{Price1}}\n         }\n      ],\n      \"restrictions\":[\n         {\n            \"dfrom\":\"YYYY-MM-DD\",\n            \"dto\":\"YYYY-MM-DD\",\n            \"room_id\":\"2\",\n            \"rate_id\":\"1\",\n            \"closed\":false,\n            \"cta\":true,\n            \"ctd\":false,\n            \"minstay\":1,\n            \"maxstay\":0,\n            \"minstayarr\":1\n         }\n      ]\n   }\n}"
						},
						"url": {
							"raw": "{{host}}/api/wubook",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"wubook"
							]
						},
						"description": "Update availability & rates data for a given partner"
					},
					"response": []
				},
				{
					"name": "Update availability & rates data - No room code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "129b7200-3e49-4d90-9615-6f291b01d718",
								"exec": [
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"2435077\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00279256\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									" var hotelcode = \"00145577\"; ",
									"}",
									"",
									"var RoomTypeCode1 = \"10023\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "904b5cbc-8bb8-4fe5-bdf2-83c42a3881cc",
								"exec": [
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var hotelcode = postman.getEnvironmentVariable(\"HotelCode\");",
									"",
									"pm.test(\"Response - 410 Gone\", function () {",
									"    pm.response.to.have.status(410);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains code : 410 in response body\", function () {",
									"var contains = false;",
									"var expected = \"410\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error string with description\", function () {",
									"var contains = false;",
									"var expected = \"The product code `\"+RoomTypeCode1+\"` for Partner `\"+hotelcode+\"` is not registered in SBX Channel Manager.\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"cm_auth\":{\n      \"username\":\"{{username}}\",\n      \"password\":\"{{password}}\"\n   },\n   \"hotel_auth\":{\n      \"hotel_id\":\"{{HotelCode}}\"\n   },\n   \"action\":\"update_data\",\n   \"data\":{\n      \"availability\":[\n         {\n            \"dfrom\":\"{{StartDate}}\",\n            \"dto\":\"{{EndDate}}\",\n            \"room_id\":\"{{RoomTypeCode1}}\",\n            \"avail\":\"{{Count1}}\"\n         }\n      ],\n      \"prices\":[\n         {\n            \"dfrom\":\"{{StartDate}}\",\n            \"dto\":\"{{EndDate}}\",\n            \"room_id\":\"{{RoomTypeCode1}}\",\n            \"rate_id\":\"SBX\",\n            \"occupancy\":\"\",\n            \"price\":{{Price1}}\n         }\n      ],\n      \"restrictions\":[\n         {\n            \"dfrom\":\"YYYY-MM-DD\",\n            \"dto\":\"YYYY-MM-DD\",\n            \"room_id\":\"2\",\n            \"rate_id\":\"1\",\n            \"closed\":false,\n            \"cta\":true,\n            \"ctd\":false,\n            \"minstay\":1,\n            \"maxstay\":0,\n            \"minstayarr\":1\n         }\n      ]\n   }\n}"
						},
						"url": {
							"raw": "{{host}}/api/wubook",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"wubook"
							]
						},
						"description": "Update availability & rates data for a given partner"
					},
					"response": []
				},
				{
					"name": "Update availability & rates data - Wrong date format",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "129b7200-3e49-4d90-9615-6f291b01d718",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var RoomTypeCode1 = \"100230\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var RoomTypeCode1 = \"694490\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var RoomTypeCode1 = \"320080\"; ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cfb5d259-2491-4271-97f1-3eac70840205",
								"exec": [
									"pm.test.skip(\"Response is Bad Request - 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test.skip(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test.skip(\"Contains comment: Wrong date format. Expected format is `Y-m-d`\", function () {",
									"var contains = false;",
									"var expected = \"Wrong date format. Expected format is `Y-m-d`\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"cm_auth\":{\n      \"username\":\"{{username}}\",\n      \"password\":\"{{password}}\"\n   },\n   \"hotel_auth\":{\n      \"hotel_id\":\"{{HotelCode}}\"\n   },\n   \"action\":\"update_data\",\n   \"data\":{\n      \"availability\":[\n         {\n            \"dfrom\":\"{{StartDate}}\",\n            \"dto\":\"{{EndDate}}\",\n            \"room_id\":\"{{RoomTypeCode1}}\",\n            \"avail\":\"{{Count1}}\"\n         }\n      ],\n      \"prices\":[\n         {\n            \"dfrom\":\"{{StartDate}}\",\n            \"dto\":\"{{EndDate}}\",\n            \"room_id\":\"{{RoomTypeCode1}}\",\n            \"rate_id\":\"SBX\",\n            \"occupancy\":\"\",\n            \"price\":{{Price1}}\n         }\n      ],\n      \"restrictions\":[\n         {\n            \"dfrom\":\"YYYY-MM-DD\",\n            \"dto\":\"YYYY-MM-DD\",\n            \"room_id\":\"2\",\n            \"rate_id\":\"1\",\n            \"closed\":false,\n            \"cta\":true,\n            \"ctd\":false,\n            \"minstay\":1,\n            \"maxstay\":0,\n            \"minstayarr\":1\n         }\n      ]\n   }\n}"
						},
						"url": {
							"raw": "{{host}}/api/external/availabilities",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"availabilities"
							]
						},
						"description": "Update availability & rates data for a given partner"
					},
					"response": []
				},
				{
					"name": "Get availability & rates data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1d5a562b-0282-4f7e-b8c2-b2687cc3187d",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2131523d-cfc1-4574-9e6c-4c3bb998fd25",
								"exec": [
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"",
									"var count1 = postman.getEnvironmentVariable(\"Count1\");",
									"var price1 = postman.getEnvironmentVariable(\"Price1\");",
									"",
									"var response = JSON.parse(responseBody);",
									"",
									"var stock1 = response.data.rooms[0].days;",
									"stock1 = stock1[Object.keys(stock1)[0]].availability",
									"stock1 = stock1.toString();",
									"",
									"var stock2 = response.data.rooms[0].days;",
									"var stock2 = stock2[Object.keys(stock2)[19]].availability",
									"stock2 = stock2.toString();",
									"",
									"var getPrice1 = response.data.rooms[0].days;",
									"getPrice1 = getPrice1[Object.keys(getPrice1)[0]].rates[0].price;",
									"getPrice1 = getPrice1.toString();",
									"",
									"var getPrice2 = response.data.rooms[0].days;",
									"getPrice2 = getPrice2[Object.keys(getPrice2)[19]].rates[0].price;",
									"getPrice2 = getPrice2.toString();",
									"",
									"var roomcode1 = response.data.rooms[0].room_id;",
									"",
									"pm.test(\"Response is success - 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function() {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains success code string: 200\", function() {",
									"    var contains = false;",
									"    var expected = \"200\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Read availabilities - Contains first Roomtypecode: \" + RoomTypeCode1 + \" as expected\";",
									"pm.test(string, function() {",
									"    expected = RoomTypeCode1;",
									"    pm.expect(roomcode1).to.include(expected);",
									"});",
									"",
									"var string = \"Contains availabilities: \" + count1 + \" for Roomtypecode: \" + RoomTypeCode1 + \" as expected on Date: \" + StartDate;",
									"pm.test(string, function() {",
									"    expected = count1;",
									"    pm.expect(stock1).to.include(expected);",
									"});",
									"",
									"var string = \"Contains availabilities: \" + count1 + \" for Roomtypecode: \" + RoomTypeCode1 + \" as expected on Date: \" + EndDate;",
									"pm.test(string, function() {",
									"    expected = count1;",
									"    pm.expect(stock2).to.include(expected);",
									"});",
									"",
									"var string = \"Contains price: \" + price1 + \"  for Roomtypecode: \" + RoomTypeCode1 + \" as expected on Date: \" + StartDate;",
									"pm.test(string, function() {",
									"    expected = price1;",
									"    pm.expect(getPrice1).to.include(expected);",
									"});",
									"",
									"var string = \"Contains price: \" + price1 + \" for Roomtypecode: \" + RoomTypeCode1 + \" as expected on Date: \" + EndDate;",
									"pm.test(string, function() {",
									"    expected = price1;",
									"    pm.expect(getPrice2).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"cm_auth\":{\n      \"username\":\"{{username}}\",\n      \"password\":\"{{password}}\"\n   },\n   \"hotel_auth\":{\n      \"hotel_id\":\"{{HotelCode}}\"\n   },\n   \"action\":\"get_data\",\n   \"data\":{\n      \"start_date\":\"{{StartDate}}\",\n      \"end_date\":\"{{EndDate}}\"\n   }\n}"
						},
						"url": {
							"raw": "{{host}}/api/wubook",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"wubook"
							]
						}
					},
					"response": []
				},
				{
					"name": "Push booking - Commit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "240dc66d-4e6c-4965-adbe-7e14cf184e2c",
								"exec": [
									"if(pm.environment.name ==\"PREPROD\" || pm.environment.name == \"DEVINT\")",
									"{",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains status : success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"/*pm.test(\"Contains transaction\", function () {",
									"var expected = \"transaction\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});*/",
									"",
									"pm.test(\"Doesn't contain validation info error message\", function () {",
									"var expected = \"This form should not contain extra fields.\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									"",
									"pm.test(\"Doesn't contain date info error message\", function () {",
									"var expected = \"This value is not valid.\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									"",
									"}",
									"else",
									"{",
									"    pm.test.skip(\"Not valid in \"+pm.environment.name+\" Evironment\", function(){",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "82015cff-f2e8-4851-99e5-26675f90be51",
								"exec": [
									"var randomId1 = Math.floor(Math.random() * 200000000);",
									"postman.setEnvironmentVariable(\"randomId1\", randomId1)",
									"",
									"var voucherNumber = Math.floor(Math.random() * 20000000);",
									"postman.setEnvironmentVariable(\"voucherNumber\", voucherNumber)",
									"",
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 53);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 54);",
									"var month = date3.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date3.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date3.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date3.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date3.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate1 = date3.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate);",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate1);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"TTDNpD3ujbxVSpycMLy3bgJGcPrXCZTRdmcZzmK4\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"wjrhqYajKs6M5ug7ygFDymnLwxc5f97ryhmq9FE7\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"QexP2eYZRwPcyB5x5LjpnqzNw2U4mWDPzat5Fds7\";",
									"}",
									"else if(pm.environment.name ==\"LOCAL\")",
									"{",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\",username);",
									"postman.setEnvironmentVariable(\"password\",password);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "QexP2eYZRwPcyB5x5LjpnqzNw2U4mWDPzat5Fds7",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"booking\":{\n      \"partnerCode\":\"{{HotelCode}}\",\n      \"status\":\"Commit\",\n      \"reservationId\":\"RESA-{{randomId1}}\",\n      \"voucherNumber\": \"{{voucherNumber}}\",\n      \"experienceId\":\"{{ExperienceId}}\",\n      \"createDate\":\"{{Date}}\",\n      \"lastModifyDate\":\"{{Date}}\",\n      \"dateStart\":\"{{StartDate}}\",\n      \"dateEnd\":\"{{EndDate1}}\",\n      \"totalAmount\":200,\n      \"currency\":\"EUR\",\n      \"requests\":\"Something i want to request\",\n      \"comments\":\"Something i need to comment about me and disabilities\",\n      \"roomTypes\":[\n         {\n            \"roomTypeCode\":\"{{RoomTypeCode1}}\",\n            \"totalAmount\":200,\n            \"currency\":\"EUR\",\n            \"rates\":[\n               {\n                  \"date\":\"{{StartDate}}\",\n                  \"amount\":0,\n                  \"currency\":\"EUR\"\n               },\n               {\n                  \"date\":\"{{EndDate}}\",\n                  \"amount\":100,\n                  \"currency\":\"EUR\"\n               }\n            ],\n            \"guests\":[\n               {\n                  \"isMain\":true,\n                  \"age\":23,\n                  \"name\":\"Carles\",\n                  \"surname\":\"Puigdemont\",\n                  \"email\":\"carles.puigdemont@brussels.com\",\n                  \"phone\":\"454325454\",\n                  \"state\":\"Brussels\",\n                  \"country\":\"be\",\n                  \"countryCode\":\"Belgium\"\n               },\n               {\n                  \"isMain\":false,\n                  \"age\":36,\n                  \"name\":\"Pepito\",\n                  \"surname\":\"Palotes\",\n                  \"email\":\"pepito.palotes@brussels.com\",\n                  \"phone\":\"454325454\",\n                  \"address\":\"Brussels\",\n                  \"city\":\"Brussels\",\n                  \"zip\":\"R9R6+QX\",\n                  \"state\":\"Brussels\",\n                  \"country\":\"be\",\n                  \"countryCode\":\"Belgium\"\n               }\n            ]\n         }\n      ]\n   }\n}"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/PushBookings",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"PushBookings"
							]
						},
						"description": "Get booking data for a given partner between start & end date."
					},
					"response": []
				},
				{
					"name": "Get Bookings",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1d5a562b-0282-4f7e-b8c2-b2687cc3187d",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() - 1);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours() - 1;",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day+\" \"+hours+ \":\"+min +\":\"+sec;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"wubook\";",
									"var password = \"password\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"wubook\";",
									"var password = \"password\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"wubook\";",
									"var password = \"password\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"",
									" setTimeout(function(){",
									"          console.log(\"Sleeping for 5 seconds before next request.\");",
									"  },5000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2131523d-cfc1-4574-9e6c-4c3bb998fd25",
								"exec": [
									"var randomId1 = postman.getEnvironmentVariable(\"randomId1\");",
									"",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var voucherNumber = postman.getEnvironmentVariable(\"voucherNumber\");",
									"",
									"if(pm.environment.name ==\"PREPROD\" || pm.environment.name == \"DEVINT\")",
									"{",
									"var response = JSON.parse(responseBody);",
									"",
									"var city = response['data']['bookings']['0']['customer']['city'];",
									"var address = response['data']['bookings']['0']['customer']['address'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"var string = \"Contains Reservation ID in Response body: RESA-\"+randomId1;",
									"pm.test(string, function(){",
									"var expected = \"RESA-\"+randomId1;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});",
									"",
									"var string = \"Contains city field as Empty string\";",
									"pm.test(string, function(){",
									"var expected = \"\";",
									"pm.expect(city).to.include(expected);   ",
									"});",
									"",
									"var string = \"Contains address field as Empty string\";",
									"pm.test(string, function(){",
									"var expected = \"\";",
									"pm.expect(address).to.include(expected);   ",
									"});",
									"",
									"var string = \"Contains Voucher number : \"+voucherNumber+\" in response\";",
									"pm.test(string, function(){",
									"var expected = voucherNumber;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});",
									"}",
									"else",
									"{",
									"    pm.test.skip(\"Not valid in \"+pm.environment.name+\" Evironment\", function(){",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"cm_auth\":{\n      \"username\":\"{{username}}\",\n      \"password\":\"{{password}}\"\n   },\n   \"hotel_auth\":{\n      \"hotel_id\":\"{{HotelCode}}\"\n   },\n   \"action\":\"get_bookings\",\n   \"data\":{\n      \"start_time\":\"{{StartDate}}\"\n   }\n}"
						},
						"url": {
							"raw": "{{host}}/api/wubook",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"wubook"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Availpro - XML API",
			"item": [
				{
					"name": "Get Hotel info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "844ae724-58f2-4681-9cbc-018795cafb56",
								"exec": [
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: HotelId\", function () {",
									"var expected = \"hotelId\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Hotelname\", function () {",
									"var expected = \"hotelName\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains RoomCode 1 :\"+RoomTypeCode1+\" in response\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains RoomCode 2 :\"+RoomTypeCode2+\" in response\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode2;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7df8cde-bf8a-4fc2-82cd-af807adfbae4",
								"exec": [
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"availpro\";",
									"var password = \"password\";",
									"var hotelcode = \"12345678\";",
									"var RoomTypeCode1 = \"250419\";",
									"var RoomTypeCode2 = \"260419\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"availpro\";",
									"var password = \"bgZrMq778W\";",
									"var hotelcode = \"000260281\";",
									"var RoomTypeCode1 = \"022606\";",
									"var RoomTypeCode2 = \"060224\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"availpro\";",
									"var password = \"password\";",
									"var hotelcode = \"00127978\";",
									"var RoomTypeCode1 = \"409904\";",
									"var RoomTypeCode2 = \"396872\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/GetHotel?login={{username}}&password={{password}}&hotelCode={{HotelCode}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"GetHotel"
							],
							"query": [
								{
									"key": "login",
									"value": "{{username}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								},
								{
									"key": "hotelCode",
									"value": "{{HotelCode}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Hotel info - Wrong credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "844ae724-58f2-4681-9cbc-018795cafb56",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Failure Type: 401\", function () {",
									"var expected = \"401\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains comment: Invalid credentials\", function () {",
									"var expected = \"Invalid credentials\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b4377b36-552b-4f87-a8f7-02094eb42e6d",
								"exec": [
									"var password = \"pass\";",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/GetHotel?login={{username}}&password={{password}}&hotelCode={{HotelCode}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"GetHotel"
							],
							"query": [
								{
									"key": "login",
									"value": "{{username}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								},
								{
									"key": "hotelCode",
									"value": "{{HotelCode}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Hotel info - No Partner Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "844ae724-58f2-4681-9cbc-018795cafb56",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Failure Type: 400\", function () {",
									"var expected = \"400\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains comment: The partner with code\", function () {",
									"var expected = \"The partner with code\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0f118953-8ef8-437a-876f-0449012be84b",
								"exec": [
									"",
									"var hotelcode = \"123456\";",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var password = \"password\";",
									"",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var password = \"bgZrMq778W\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var password = \"password\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/GetHotel?login={{username}}&password={{password}}&hotelCode={{HotelCode}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"GetHotel"
							],
							"query": [
								{
									"key": "login",
									"value": "{{username}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								},
								{
									"key": "hotelCode",
									"value": "{{HotelCode}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update availability and rates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7905d3e1-b8fc-485e-88f4-02b5cb8bc034",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d1059c0b-b03a-413d-a492-e8bce0f8a06c",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 40);",
									"var month = date1.getMonth() + 1;",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 42);",
									"var month = date2.getMonth() + 1;",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 43);",
									"var month = date3.getMonth() + 1;",
									"var startdate2 = date3.getFullYear() + \"-\" + month + \"-\" + date3.getDate();",
									"",
									"var date4 = new Date();",
									"date4.setDate(date4.getDate() + 45);",
									"var month = date4.getMonth() + 1;",
									"var enddate2 = date4.getFullYear() + \"-\" + month + \"-\" + date4.getDate();",
									"",
									"var date5 = new Date();",
									"date5.setDate(date5.getDate() + 46);",
									"var month = date5.getMonth() + 1;",
									"var startdate3 = date5.getFullYear() + \"-\" + month + \"-\" + date5.getDate();",
									"",
									"var date6 = new Date();",
									"date6.setDate(date6.getDate() + 48);",
									"var month = date6.getMonth() + 1;",
									"var enddate3 = date6.getFullYear() + \"-\" + month + \"-\" + date6.getDate();",
									"",
									"var date7 = new Date();",
									"date7.setDate(date7.getDate() + 49);",
									"var month = date7.getMonth() + 1;",
									"var startdate4 = date7.getFullYear() + \"-\" + month + \"-\" + date7.getDate();",
									"",
									"var date8 = new Date();",
									"date8.setDate(date8.getDate() + 51);",
									"var month = date8.getMonth() + 1;",
									"var enddate4 = date8.getFullYear() + \"-\" + month + \"-\" + date8.getDate();",
									"",
									"var date9 = new Date();",
									"date9.setDate(date9.getDate() + 52);",
									"var month = date9.getMonth() + 1;",
									"var startdate5 = date9.getFullYear() + \"-\" + month + \"-\" + date9.getDate();",
									"",
									"var date10 = new Date();",
									"date10.setDate(date10.getDate() + 54);",
									"var month = date10.getMonth() + 1;",
									"var enddate5 = date10.getFullYear() + \"-\" + month + \"-\" + date10.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate1\", startdate1);",
									"postman.setEnvironmentVariable(\"EndDate1\", enddate1);",
									"postman.setEnvironmentVariable(\"StartDate2\", startdate2);",
									"postman.setEnvironmentVariable(\"EndDate2\", enddate2);",
									"postman.setEnvironmentVariable(\"StartDate3\", startdate3);",
									"postman.setEnvironmentVariable(\"EndDate3\", enddate3);",
									"postman.setEnvironmentVariable(\"StartDate4\", startdate4);",
									"postman.setEnvironmentVariable(\"EndDate4\", enddate4);",
									"postman.setEnvironmentVariable(\"StartDate5\", startdate5);",
									"postman.setEnvironmentVariable(\"EndDate5\", enddate5);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"12345678\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"000260281\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var hotelcode = \"00127978\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<message xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n   <authentication login=\"{{username}}\" password=\"{{password}}\" />\n   <inventoryUpdate hotelId=\"{{HotelCode}}\">\n      <room id=\"{{RoomTypeCode1}}\">\n         <inventory>\n            <availability from=\"{{StartDate1}}\" to=\"{{EndDate1}}\" quantity=\"5\" />\n            <availability from=\"{{StartDate2}}\" to=\"{{EndDate2}}\" quantity=\"10\" />\n            <availability from=\"{{StartDate3}}\" to=\"{{EndDate3}}\" quantity=\"15\" />\n            <availability from=\"{{StartDate4}}\" to=\"{{EndDate4}}\" quantity=\"20\" />\n            <availability from=\"{{StartDate5}}\" to=\"{{EndDate5}}\" quantity=\"25\" />\n         </inventory>\n         <rate currency=\"EUR\" rateCode=\"SBX\" rateName=\"API AVailPro Standard room\">\n            <planning from=\"{{StartDate1}}\" to=\"{{EndDate1}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"210\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate2}}\" to=\"{{EndDate2}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"273\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate3}}\" to=\"{{EndDate3}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"340.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate4}}\" to=\"{{EndDate4}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"294\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate5}}\" to=\"{{EndDate5}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"340.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n         </rate>\n      </room>\n      <room id=\"{{RoomTypeCode2}}\">\n         <inventory>\n            <availability from=\"{{StartDate1}}\" to=\"{{EndDate1}}\" quantity=\"3\" />\n            <availability from=\"{{StartDate2}}\" to=\"{{EndDate2}}\" quantity=\"8\" />\n            <availability from=\"{{StartDate3}}\" to=\"{{EndDate3}}\" quantity=\"13\" />\n            <availability from=\"{{StartDate4}}\" to=\"{{EndDate4}}\" quantity=\"18\" />\n            <availability from=\"{{StartDate5}}\" to=\"{{EndDate5}}\" quantity=\"23\" />\n         </inventory>\n         <rate currency=\"EUR\" rateCode=\"SBX\" rateName=\"API AvialPro Single room\">\n            <planning from=\"{{StartDate1}}\" to=\"{{EndDate1}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"190\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate2}}\" to=\"{{EndDate2}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"220\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate3}}\" to=\"{{EndDate3}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"300.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate4}}\" to=\"{{EndDate4}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"250\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate5}}\" to=\"{{EndDate5}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"310.50\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n         </rate>\n      </room>\n   </inventoryUpdate>\n</message>"
						},
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/UpdateAvailabilitiesAndRates",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"UpdateAvailabilitiesAndRates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update availability and rates - Stop sale",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7905d3e1-b8fc-485e-88f4-02b5cb8bc034",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d1059c0b-b03a-413d-a492-e8bce0f8a06c",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 100);",
									"var month = date1.getMonth() + 1;",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 102);",
									"var month = date2.getMonth() + 1;",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 103);",
									"var month = date3.getMonth() + 1;",
									"var startdate2 = date3.getFullYear() + \"-\" + month + \"-\" + date3.getDate();",
									"",
									"var date4 = new Date();",
									"date4.setDate(date4.getDate() + 105);",
									"var month = date4.getMonth() + 1;",
									"var enddate2 = date4.getFullYear() + \"-\" + month + \"-\" + date4.getDate();",
									"",
									"var date5 = new Date();",
									"date5.setDate(date5.getDate() + 106);",
									"var month = date5.getMonth() + 1;",
									"var startdate3 = date5.getFullYear() + \"-\" + month + \"-\" + date5.getDate();",
									"",
									"var date6 = new Date();",
									"date6.setDate(date6.getDate() + 108);",
									"var month = date6.getMonth() + 1;",
									"var enddate3 = date6.getFullYear() + \"-\" + month + \"-\" + date6.getDate();",
									"",
									"var date7 = new Date();",
									"date7.setDate(date7.getDate() + 109);",
									"var month = date7.getMonth() + 1;",
									"var startdate4 = date7.getFullYear() + \"-\" + month + \"-\" + date7.getDate();",
									"",
									"var date8 = new Date();",
									"date8.setDate(date8.getDate() + 111);",
									"var month = date8.getMonth() + 1;",
									"var enddate4 = date8.getFullYear() + \"-\" + month + \"-\" + date8.getDate();",
									"",
									"var date9 = new Date();",
									"date9.setDate(date9.getDate() + 112);",
									"var month = date9.getMonth() + 1;",
									"var startdate5 = date9.getFullYear() + \"-\" + month + \"-\" + date9.getDate();",
									"",
									"var date10 = new Date();",
									"date10.setDate(date10.getDate() + 114);",
									"var month = date10.getMonth() + 1;",
									"var enddate5 = date10.getFullYear() + \"-\" + month + \"-\" + date10.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate1\", startdate1);",
									"postman.setEnvironmentVariable(\"EndDate1\", enddate1);",
									"postman.setEnvironmentVariable(\"StartDate2\", startdate2);",
									"postman.setEnvironmentVariable(\"EndDate2\", enddate2);",
									"postman.setEnvironmentVariable(\"StartDate3\", startdate3);",
									"postman.setEnvironmentVariable(\"EndDate3\", enddate3);",
									"postman.setEnvironmentVariable(\"StartDate4\", startdate4);",
									"postman.setEnvironmentVariable(\"EndDate4\", enddate4);",
									"postman.setEnvironmentVariable(\"StartDate5\", startdate5);",
									"postman.setEnvironmentVariable(\"EndDate5\", enddate5);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<message xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n   <authentication login=\"{{username}}\" password=\"{{password}}\" />\n   <inventoryUpdate hotelId=\"{{HotelCode}}\">\n      <room id=\"{{RoomTypeCode1}}\">\n         <inventory>\n            <availability from=\"{{StartDate1}}\" to=\"{{EndDate1}}\" quantity=\"5\" />\n            <availability from=\"{{StartDate2}}\" to=\"{{EndDate2}}\" quantity=\"10\" />\n            <availability from=\"{{StartDate3}}\" to=\"{{EndDate3}}\" quantity=\"15\" />\n            <availability from=\"{{StartDate4}}\" to=\"{{EndDate4}}\" quantity=\"20\" />\n            <availability from=\"{{StartDate5}}\" to=\"{{EndDate5}}\" quantity=\"25\" />\n         </inventory>\n         <rate currency=\"EUR\" rateCode=\"SBX\" rateName=\"API AVailPro Standard room\">\n            <planning from=\"{{StartDate1}}\" to=\"{{EndDate1}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"210\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate2}}\" to=\"{{EndDate2}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"273\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate3}}\" to=\"{{EndDate3}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"340.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate4}}\" to=\"{{EndDate4}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"294\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate5}}\" to=\"{{EndDate5}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"340.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n         </rate>\n      </room>\n      <room id=\"{{RoomTypeCode2}}\">\n         <inventory>\n            <availability from=\"{{StartDate1}}\" to=\"{{EndDate1}}\" quantity=\"3\" />\n            <availability from=\"{{StartDate2}}\" to=\"{{EndDate2}}\" quantity=\"0\" />\n            <availability from=\"{{StartDate3}}\" to=\"{{EndDate3}}\" quantity=\"13\" />\n            <availability from=\"{{StartDate4}}\" to=\"{{EndDate4}}\" quantity=\"18\" />\n            <availability from=\"{{StartDate5}}\" to=\"{{EndDate5}}\" quantity=\"23\" />\n         </inventory>\n         <rate currency=\"EUR\" rateCode=\"SBX\" rateName=\"API AvialPro Single room\">\n            <planning from=\"{{StartDate1}}\" to=\"{{EndDate1}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"190\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate2}}\" to=\"{{EndDate2}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"220\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"true\" />\n            <planning from=\"{{StartDate3}}\" to=\"{{EndDate3}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"300.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate4}}\" to=\"{{EndDate4}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"250\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate5}}\" to=\"{{EndDate5}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"310.50\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n         </rate>\n      </room>\n   </inventoryUpdate>\n</message>"
						},
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/UpdateAvailabilitiesAndRates",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"UpdateAvailabilitiesAndRates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update availability and rates - No unit Price",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7905d3e1-b8fc-485e-88f4-02b5cb8bc034",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d1059c0b-b03a-413d-a492-e8bce0f8a06c",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 110);",
									"var month = date1.getMonth() + 1;",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 112);",
									"var month = date2.getMonth() + 1;",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 113);",
									"var month = date3.getMonth() + 1;",
									"var startdate2 = date3.getFullYear() + \"-\" + month + \"-\" + date3.getDate();",
									"",
									"var date4 = new Date();",
									"date4.setDate(date4.getDate() + 115);",
									"var month = date4.getMonth() + 1;",
									"var enddate2 = date4.getFullYear() + \"-\" + month + \"-\" + date4.getDate();",
									"",
									"var date5 = new Date();",
									"date5.setDate(date5.getDate() + 116);",
									"var month = date5.getMonth() + 1;",
									"var startdate3 = date5.getFullYear() + \"-\" + month + \"-\" + date5.getDate();",
									"",
									"var date6 = new Date();",
									"date6.setDate(date6.getDate() + 118);",
									"var month = date6.getMonth() + 1;",
									"var enddate3 = date6.getFullYear() + \"-\" + month + \"-\" + date6.getDate();",
									"",
									"var date7 = new Date();",
									"date7.setDate(date7.getDate() + 119);",
									"var month = date7.getMonth() + 1;",
									"var startdate4 = date7.getFullYear() + \"-\" + month + \"-\" + date7.getDate();",
									"",
									"var date8 = new Date();",
									"date8.setDate(date8.getDate() + 121);",
									"var month = date8.getMonth() + 1;",
									"var enddate4 = date8.getFullYear() + \"-\" + month + \"-\" + date8.getDate();",
									"",
									"var date9 = new Date();",
									"date9.setDate(date9.getDate() + 122);",
									"var month = date9.getMonth() + 1;",
									"var startdate5 = date9.getFullYear() + \"-\" + month + \"-\" + date9.getDate();",
									"",
									"var date10 = new Date();",
									"date10.setDate(date10.getDate() + 124);",
									"var month = date10.getMonth() + 1;",
									"var enddate5 = date10.getFullYear() + \"-\" + month + \"-\" + date10.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate1\", startdate1);",
									"postman.setEnvironmentVariable(\"EndDate1\", enddate1);",
									"postman.setEnvironmentVariable(\"StartDate2\", startdate2);",
									"postman.setEnvironmentVariable(\"EndDate2\", enddate2);",
									"postman.setEnvironmentVariable(\"StartDate3\", startdate3);",
									"postman.setEnvironmentVariable(\"EndDate3\", enddate3);",
									"postman.setEnvironmentVariable(\"StartDate4\", startdate4);",
									"postman.setEnvironmentVariable(\"EndDate4\", enddate4);",
									"postman.setEnvironmentVariable(\"StartDate5\", startdate5);",
									"postman.setEnvironmentVariable(\"EndDate5\", enddate5);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<message xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n   <authentication login=\"{{username}}\" password=\"{{password}}\" />\n   <inventoryUpdate hotelId=\"{{HotelCode}}\">\n      <room id=\"{{RoomTypeCode1}}\">\n         <inventory>\n            <availability from=\"{{StartDate1}}\" to=\"{{EndDate1}}\" quantity=\"5\" />\n            <availability from=\"{{StartDate2}}\" to=\"{{EndDate2}}\" quantity=\"10\" />\n            <availability from=\"{{StartDate3}}\" to=\"{{EndDate3}}\" quantity=\"15\" />\n            <availability from=\"{{StartDate4}}\" to=\"{{EndDate4}}\" quantity=\"20\" />\n            <availability from=\"{{StartDate5}}\" to=\"{{EndDate5}}\" quantity=\"25\" />\n         </inventory>\n         <rate currency=\"EUR\" rateCode=\"SBX\" rateName=\"API AVailPro Standard room\">\n            <planning from=\"{{StartDate1}}\" to=\"{{EndDate1}}\" minimumStay=\"1\" maximumStay=\"1\"  noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate2}}\" to=\"{{EndDate2}}\" minimumStay=\"1\" maximumStay=\"1\"  noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate3}}\" to=\"{{EndDate3}}\" minimumStay=\"1\" maximumStay=\"1\"  noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate4}}\" to=\"{{EndDate4}}\" minimumStay=\"1\" maximumStay=\"1\"  noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate5}}\" to=\"{{EndDate5}}\" minimumStay=\"1\" maximumStay=\"1\"  noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n         </rate>\n      </room>\n      <room id=\"{{RoomTypeCode2}}\">\n         <inventory>\n            <availability from=\"{{StartDate1}}\" to=\"{{EndDate1}}\" quantity=\"3\" />\n            <availability from=\"{{StartDate2}}\" to=\"{{EndDate2}}\" quantity=\"8\" />\n            <availability from=\"{{StartDate3}}\" to=\"{{EndDate3}}\" quantity=\"13\" />\n            <availability from=\"{{StartDate4}}\" to=\"{{EndDate4}}\" quantity=\"18\" />\n            <availability from=\"{{StartDate5}}\" to=\"{{EndDate5}}\" quantity=\"23\" />\n         </inventory>\n         <rate currency=\"EUR\" rateCode=\"SBX\" rateName=\"API AvialPro Single room\">\n            <planning from=\"{{StartDate1}}\" to=\"{{EndDate1}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"190\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate2}}\" to=\"{{EndDate2}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"220\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate3}}\" to=\"{{EndDate3}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"300.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate4}}\" to=\"{{EndDate4}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"250\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate5}}\" to=\"{{EndDate5}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"310.50\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n         </rate>\n      </room>\n   </inventoryUpdate>\n</message>"
						},
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/UpdateAvailabilitiesAndRates",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"UpdateAvailabilitiesAndRates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update availability and rates- Ignore rates update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7905d3e1-b8fc-485e-88f4-02b5cb8bc034",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d1059c0b-b03a-413d-a492-e8bce0f8a06c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<message xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n   <authentication login=\"{{username}}\" password=\"{{password}}\" />\n   <inventoryUpdate hotelId=\"{{HotelCode}}\">\n      <room id=\"{{RoomTypeCode1}}\">\n         <inventory>\n            <availability from=\"{{StartDate1}}\" to=\"{{EndDate1}}\" quantity=\"5\" />\n            <availability from=\"{{StartDate2}}\" to=\"{{EndDate2}}\" quantity=\"10\" />\n            <availability from=\"{{StartDate3}}\" to=\"{{EndDate3}}\" quantity=\"15\" />\n            <availability from=\"{{StartDate4}}\" to=\"{{EndDate4}}\" quantity=\"20\" />\n            <availability from=\"{{StartDate5}}\" to=\"{{EndDate5}}\" quantity=\"25\" />\n         </inventory>\n         <rate currency=\"EUR\" rateCode=\"SBX\" rateName=\"API AVailPro Standard room\">\n            <planning from=\"{{StartDate1}}\" to=\"{{EndDate1}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"210\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate2}}\" to=\"{{EndDate2}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"273\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate3}}\" to=\"{{EndDate3}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"340.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate4}}\" to=\"{{EndDate4}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"294\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate5}}\" to=\"{{EndDate5}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"340.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n         </rate>\n      </room>\n      <room id=\"{{RoomTypeCode2}}\">\n         <inventory>\n            <availability from=\"{{StartDate1}}\" to=\"{{EndDate1}}\" quantity=\"3\" />\n            <availability from=\"{{StartDate2}}\" to=\"{{EndDate2}}\" quantity=\"8\" />\n            <availability from=\"{{StartDate3}}\" to=\"{{EndDate3}}\" quantity=\"13\" />\n            <availability from=\"{{StartDate4}}\" to=\"{{EndDate4}}\" quantity=\"18\" />\n            <availability from=\"{{StartDate5}}\" to=\"{{EndDate5}}\" quantity=\"23\" />\n         </inventory>\n      </room>\n   </inventoryUpdate>\n</message>"
						},
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/UpdateAvailabilitiesAndRates",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"UpdateAvailabilitiesAndRates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update availability and rates- Ignore inventory attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7905d3e1-b8fc-485e-88f4-02b5cb8bc034",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d1059c0b-b03a-413d-a492-e8bce0f8a06c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<message xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n   <authentication login=\"{{username}}\" password=\"{{password}}\" />\n   <inventoryUpdate hotelId=\"{{HotelCode}}\">\n      <room id=\"{{RoomTypeCode1}}\">\n         <inventory>\n            <availability from=\"{{StartDate1}}\" to=\"{{EndDate1}}\" quantity=\"5\" />\n            <availability from=\"{{StartDate2}}\" to=\"{{EndDate2}}\" quantity=\"10\" />\n            <availability from=\"{{StartDate3}}\" to=\"{{EndDate3}}\" quantity=\"15\" />\n            <availability from=\"{{StartDate4}}\" to=\"{{EndDate4}}\" quantity=\"20\" />\n            <availability from=\"{{StartDate5}}\" to=\"{{EndDate5}}\" quantity=\"25\" />\n         </inventory>\n         <rate currency=\"EUR\" rateCode=\"SBX\" rateName=\"API AVailPro Standard room\">\n            <planning from=\"{{StartDate1}}\" to=\"{{EndDate1}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"210\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate2}}\" to=\"{{EndDate2}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"273\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate3}}\" to=\"{{EndDate3}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"340.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate4}}\" to=\"{{EndDate4}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"294\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate5}}\" to=\"{{EndDate5}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"340.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n         </rate>\n      </room>\n      <room id=\"{{RoomTypeCode2}}\">\n          <rate currency=\"EUR\" rateCode=\"SBX\" rateName=\"API AVailPro Standard room\">\n            <planning from=\"{{StartDate1}}\" to=\"{{EndDate1}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"210\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate2}}\" to=\"{{EndDate2}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"273\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate3}}\" to=\"{{EndDate3}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"340.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate4}}\" to=\"{{EndDate4}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"294\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate5}}\" to=\"{{EndDate5}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"340.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n         </rate>\n      </room>\n   </inventoryUpdate>\n</message>"
						},
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/UpdateAvailabilitiesAndRates",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"UpdateAvailabilitiesAndRates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update availability and rates - Wrong credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7905d3e1-b8fc-485e-88f4-02b5cb8bc034",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Failure Type: 401\", function () {",
									"var expected = \"401\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains comment: Invalid credentials\", function () {",
									"var expected = \"Invalid credentials\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "655888c1-dff1-4f95-a849-4a905b2443bc",
								"exec": [
									"var password = \"pass\";",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<message xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n   <authentication login=\"{{username}}\" password=\"{{password}}\" />\n   <inventoryUpdate hotelId=\"{{HotelCode}}\">\n      <room id=\"{{RoomTypeCode1}}\">\n         <inventory>\n            <availability from=\"2019-11-01\" to=\"2019-11-03\" quantity=\"1\" />\n            <availability from=\"2019-11-04\" to=\"2019-11-06\" quantity=\"1\" />\n            <availability from=\"2019-11-07\" to=\"2019-11-10\" quantity=\"1\" />\n            <availability from=\"2019-11-11\" to=\"2019-11-14\" quantity=\"1\" />\n            <availability from=\"2019-11-15\" to=\"2019-11-17\" quantity=\"1\" />\n         </inventory>\n         <rate currency=\"EUR\" rateCode=\"SBX\" rateName=\"Smartbox Standard Rate\">\n            <planning from=\"2019-11-01\" to=\"2019-11-03\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"210\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"2019-11-04\" to=\"2019-11-06\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"273\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"2019-11-07\" to=\"2019-11-10\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"340.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"2019-11-11\" to=\"2019-11-14\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"294\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"2019-11-15\" to=\"2019-11-17\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"340.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n         </rate>\n      </room>\n      <room id=\"{{RoomTypeCode2}}\">\n         <inventory>\n            <availability from=\"2019-11-01\" to=\"2019-11-03\" quantity=\"1\" />\n            <availability from=\"2019-11-04\" to=\"2019-11-06\" quantity=\"1\" />\n            <availability from=\"2019-11-07\" to=\"2019-11-10\" quantity=\"1\" />\n            <availability from=\"2019-11-11\" to=\"2019-11-14\" quantity=\"1\" />\n            <availability from=\"2019-11-15\" to=\"2019-11-17\" quantity=\"1\" />\n         </inventory>\n         <rate currency=\"EUR\" rateCode=\"SBX\" rateName=\"Smartbox Standard Rate\">\n            <planning from=\"2019-11-01\" to=\"2019-11-03\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"190\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"2019-11-04\" to=\"2019-11-06\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"220\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"2019-11-07\" to=\"2019-11-10\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"300.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"2019-11-11\" to=\"2019-11-14\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"250\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"2019-11-15\" to=\"2019-11-17\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"310.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n         </rate>\n      </room>\n   </inventoryUpdate>\n</message>"
						},
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/UpdateAvailabilitiesAndRates",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"UpdateAvailabilitiesAndRates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update availability and rates - No Partner Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7905d3e1-b8fc-485e-88f4-02b5cb8bc034",
								"exec": [
									"var hotelcode = postman.getEnvironmentVariable(\"HotelCode\");",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Failure Type: 400\", function () {",
									"var expected = \"400\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"The partner with code `\"+hotelcode+\"`  has not been found\";",
									"pm.test(string, function () {",
									"var expected = string;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6cc02ed7-234c-4771-8b01-c3b056eb4b29",
								"exec": [
									"",
									"var hotelcode = \"123456\";",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var password = \"password\";",
									"",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var password = \"bgZrMq778W\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var password = \"password\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<message xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n   <authentication login=\"{{username}}\" password=\"{{password}}\" />\n   <inventoryUpdate hotelId=\"{{HotelCode}}\">\n      <room id=\"{{RoomTypeCode1}}\">\n         <inventory>\n            <availability from=\"2019-11-01\" to=\"2019-11-03\" quantity=\"1\" />\n            <availability from=\"2019-11-04\" to=\"2019-11-06\" quantity=\"1\" />\n            <availability from=\"2019-11-07\" to=\"2019-11-10\" quantity=\"1\" />\n            <availability from=\"2019-11-11\" to=\"2019-11-14\" quantity=\"1\" />\n            <availability from=\"2019-11-15\" to=\"2019-11-17\" quantity=\"1\" />\n         </inventory>\n         <rate currency=\"EUR\" rateCode=\"SBX\" rateName=\"Smartbox Standard Rate\">\n            <planning from=\"2019-11-01\" to=\"2019-11-03\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"210\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"2019-11-04\" to=\"2019-11-06\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"273\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"2019-11-07\" to=\"2019-11-10\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"340.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"2019-11-11\" to=\"2019-11-14\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"294\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"2019-11-15\" to=\"2019-11-17\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"340.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n         </rate>\n      </room>\n      <room id=\"{{RoomTypeCode2}}\">\n         <inventory>\n            <availability from=\"2019-11-01\" to=\"2019-11-03\" quantity=\"1\" />\n            <availability from=\"2019-11-04\" to=\"2019-11-06\" quantity=\"1\" />\n            <availability from=\"2019-11-07\" to=\"2019-11-10\" quantity=\"1\" />\n            <availability from=\"2019-11-11\" to=\"2019-11-14\" quantity=\"1\" />\n            <availability from=\"2019-11-15\" to=\"2019-11-17\" quantity=\"1\" />\n         </inventory>\n         <rate currency=\"EUR\" rateCode=\"SBX\" rateName=\"Smartbox Standard Rate\">\n            <planning from=\"2019-11-01\" to=\"2019-11-03\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"190\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"2019-11-04\" to=\"2019-11-06\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"220\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"2019-11-07\" to=\"2019-11-10\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"300.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"2019-11-11\" to=\"2019-11-14\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"250\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"2019-11-15\" to=\"2019-11-17\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"310.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n         </rate>\n      </room>\n   </inventoryUpdate>\n</message>"
						},
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/UpdateAvailabilitiesAndRates",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"UpdateAvailabilitiesAndRates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update availability and rates - No Product Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7905d3e1-b8fc-485e-88f4-02b5cb8bc034",
								"exec": [
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var hotelcode = postman.getEnvironmentVariable(\"HotelCode\");",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Failure Type: 400\", function () {",
									"var expected = \"400\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"The product code `\"+RoomTypeCode1+\"` for Partner `\"+hotelcode+\"` is not registered in SBX Channel Manager.\"",
									"pm.test(string, function () {",
									"var expected = string;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6cc02ed7-234c-4771-8b01-c3b056eb4b29",
								"exec": [
									"var RoomTypeCode1 = \"250\";",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"12345678\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00028216\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var hotelcode = \"00127978\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<message xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n   <authentication login=\"{{username}}\" password=\"{{password}}\" />\n   <inventoryUpdate hotelId=\"{{HotelCode}}\">\n      <room id=\"{{RoomTypeCode1}}\">\n         <inventory>\n            <availability from=\"2019-11-01\" to=\"2019-11-03\" quantity=\"1\" />\n            <availability from=\"2019-11-04\" to=\"2019-11-06\" quantity=\"1\" />\n            <availability from=\"2019-11-07\" to=\"2019-11-10\" quantity=\"1\" />\n            <availability from=\"2019-11-11\" to=\"2019-11-14\" quantity=\"1\" />\n            <availability from=\"2019-11-15\" to=\"2019-11-17\" quantity=\"1\" />\n         </inventory>\n         <rate currency=\"EUR\" rateCode=\"SBX\" rateName=\"Smartbox Standard Rate\">\n            <planning from=\"2019-11-01\" to=\"2019-11-03\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"210\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"2019-11-04\" to=\"2019-11-06\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"273\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"2019-11-07\" to=\"2019-11-10\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"340.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"2019-11-11\" to=\"2019-11-14\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"294\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"2019-11-15\" to=\"2019-11-17\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"340.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n         </rate>\n      </room>\n      <room id=\"{{RoomTypeCode2}}\">\n         <inventory>\n            <availability from=\"2019-11-01\" to=\"2019-11-03\" quantity=\"1\" />\n            <availability from=\"2019-11-04\" to=\"2019-11-06\" quantity=\"1\" />\n            <availability from=\"2019-11-07\" to=\"2019-11-10\" quantity=\"1\" />\n            <availability from=\"2019-11-11\" to=\"2019-11-14\" quantity=\"1\" />\n            <availability from=\"2019-11-15\" to=\"2019-11-17\" quantity=\"1\" />\n         </inventory>\n         <rate currency=\"EUR\" rateCode=\"SBX\" rateName=\"Smartbox Standard Rate\">\n            <planning from=\"2019-11-01\" to=\"2019-11-03\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"190\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"2019-11-04\" to=\"2019-11-06\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"220\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"2019-11-07\" to=\"2019-11-10\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"300.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"2019-11-11\" to=\"2019-11-14\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"250\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"2019-11-15\" to=\"2019-11-17\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"310.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n         </rate>\n      </room>\n   </inventoryUpdate>\n</message>"
						},
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/UpdateAvailabilitiesAndRates",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"UpdateAvailabilitiesAndRates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Push booking - Commit - AvialPro booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "240dc66d-4e6c-4965-adbe-7e14cf184e2c",
								"exec": [
									"if(pm.environment.name !=\"LOCAL\")",
									"{",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains status : success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"/*pm.test(\"Contains transaction\", function () {",
									"var expected = \"transaction\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});*/",
									"",
									"pm.test(\"Doesn't contain validation info error message\", function () {",
									"var expected = \"This form should not contain extra fields.\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									"",
									"pm.test(\"Doesn't contain date info error message\", function () {",
									"var expected = \"This value is not valid.\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									"}",
									"else",
									"{",
									"    pm.test.skip(\"LOCAL Environment wont work\", function(){",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "82015cff-f2e8-4851-99e5-26675f90be51",
								"exec": [
									"var randomId = Math.floor(Math.random() * 200000000);",
									"postman.setEnvironmentVariable(\"randomId\", randomId)",
									"",
									"var voucherNumber = Math.floor(Math.random() * 20000000);",
									"postman.setEnvironmentVariable(\"voucherNumber\", voucherNumber)",
									"",
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 53);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 54);",
									"var month = date3.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date3.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date3.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date3.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date3.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate1 = date3.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate);",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate1);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"TTDNpD3ujbxVSpycMLy3bgJGcPrXCZTRdmcZzmK4\";",
									"var RoomTypeCode1 = \"250419\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"wjrhqYajKs6M5ug7ygFDymnLwxc5f97ryhmq9FE7\";",
									"var RoomTypeCode1 = \"CP000000585\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"QexP2eYZRwPcyB5x5LjpnqzNw2U4mWDPzat5Fds7\";",
									"var RoomTypeCode1 = \"409904\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\",username);",
									"postman.setEnvironmentVariable(\"password\",password);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "QexP2eYZRwPcyB5x5LjpnqzNw2U4mWDPzat5Fds7",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"booking\":{\n      \"partnerCode\":\"{{HotelCode}}\",\n      \"status\":\"Commit\",\n      \"reservationId\":\"RESA-{{randomId}}\",\n      \"voucherNumber\": \"{{voucherNumber}}\",\n      \"createDate\":\"{{Date}}\",\n      \"lastModifyDate\":\"{{Date}}\",\n      \"dateStart\":\"{{StartDate}}\",\n      \"dateEnd\":\"{{EndDate1}}\",\n      \"totalAmount\":200,\n      \"currency\":\"EUR\",\n      \"requests\":\"Something i want to request\",\n      \"comments\":\"Something i need to comment about me and disabilities\",\n      \"roomTypes\":[\n         {\n            \"roomTypeCode\":\"{{RoomTypeCode1}}\",\n            \"totalAmount\":200,\n            \"currency\":\"EUR\",\n            \"rates\":[\n               {\n                  \"date\":\"{{StartDate}}\",\n                  \"amount\":0,\n                  \"currency\":\"EUR\"\n               },\n               {\n                  \"date\":\"{{EndDate}}\",\n                  \"amount\":100,\n                  \"currency\":\"EUR\"\n               }\n            ],\n            \"guests\":[\n               {\n                  \"isMain\":true,\n                  \"age\":23,\n                  \"name\":\"Carles\",\n                  \"surname\":\"Puigdemont\",\n                  \"email\":\"carles.puigdemont@brussels.com\",\n                  \"phone\":\"454325454\",\n                  \"address\":\"Brussels\",\n                  \"city\":\"Brussels\",\n                  \"zip\":\"R9R6+QX\",\n                  \"state\":\"Brussels\",\n                  \"country\":\"be\",\n                  \"countryCode\":\"Belgium\"\n               },\n               {\n                  \"isMain\":false,\n                  \"age\":36,\n                  \"name\":\"Pepito\",\n                  \"surname\":\"Palotes\",\n                  \"email\":\"pepito.palotes@brussels.com\",\n                  \"phone\":\"454325454\",\n                  \"address\":\"Brussels\",\n                  \"city\":\"Brussels\",\n                  \"zip\":\"R9R6+QX\",\n                  \"state\":\"Brussels\",\n                  \"country\":\"be\",\n                  \"countryCode\":\"Belgium\"\n               }\n            ]\n         }\n      ]\n   }\n}"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/PushBookings",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"PushBookings"
							]
						},
						"description": "AvailPro Booking."
					},
					"response": []
				},
				{
					"name": "Get Bookings (date)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "844ae724-58f2-4681-9cbc-018795cafb56",
								"exec": [
									"var randomId = postman.getEnvironmentVariable(\"randomId\");",
									"var voucherNumber = postman.getEnvironmentVariable(\"voucherNumber\");",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"if(pm.environment.name !=\"LOCAL\" && pm.environment.name !=\"SANDBOX_ENV\")",
									"{",
									"pm.test(\"Contains string: HotelId\", function () {",
									"var expected = \"hotelId\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains recent Commit booking with Reservation ID in Response body: RESA-\"+randomId;",
									"pm.test(string, function(){",
									"var expected = \"RESA-\"+randomId;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});",
									"",
									"var string = \"Contains vouchernumber: \"+voucherNumber+\" in GetBookings call\";",
									"pm.test(string, function(){",
									"var expected = voucherNumber;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});",
									"}",
									"else",
									"{",
									"    pm.test.skip(\"Doesn't work in this Environment\", function(){",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "159ac436-7ee1-4b0a-bd01-79e364fd64a0",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() - 1);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date1.getMilliseconds();",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 1);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date2.getMilliseconds();",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"availpro\";",
									"var password = \"password\";",
									"var hotelcode = \"12345678\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"availpro\";",
									"var password = \"bgZrMq778W\";",
									"var hotelcode = \"00028216\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"availpro\";",
									"var password = \"password\";",
									"var hotelcode = \"00127978\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									" setTimeout(function(){",
									"          console.log(\"Sleeping for 5 seconds before next request.\");",
									"  },5000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/GetBookings?login={{username}}&password={{password}}&from={{StartDate}}&to={{EndDate}}&hotelId={{HotelCode}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"GetBookings"
							],
							"query": [
								{
									"key": "login",
									"value": "{{username}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								},
								{
									"key": "from",
									"value": "{{StartDate}}"
								},
								{
									"key": "to",
									"value": "{{EndDate}}"
								},
								{
									"key": "hotelId",
									"value": "{{HotelCode}}"
								}
							]
						},
						"description": "Get bookings by start-end date."
					},
					"response": []
				},
				{
					"name": "Get Bookings (date) - Wrong date format",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "844ae724-58f2-4681-9cbc-018795cafb56",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"var string = \"Containds comment : Date format has to be Y-m-d\"",
									"pm.test(string, function () {",
									"var expected = \"Date format has to be Y-m-d\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "159ac436-7ee1-4b0a-bd01-79e364fd64a0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/GetBookings?login={{username}}&password={{password}}&from=0000-00-00&to=0000-00-00&hotelId={{HotelCode}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"GetBookings"
							],
							"query": [
								{
									"key": "login",
									"value": "{{username}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								},
								{
									"key": "from",
									"value": "0000-00-00"
								},
								{
									"key": "to",
									"value": "0000-00-00"
								},
								{
									"key": "hotelId",
									"value": "{{HotelCode}}"
								}
							]
						},
						"description": "Get bookings by start-end date."
					},
					"response": []
				},
				{
					"name": "Get Bookings (date) - StartDate > EndDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "844ae724-58f2-4681-9cbc-018795cafb56",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains comment: End Date must be greater than start date\", function () {",
									"var expected = \"End Date must be greater than start date\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "159ac436-7ee1-4b0a-bd01-79e364fd64a0",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 139);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/GetBookings?login={{username}}&password={{password}}&from={{StartDate}}&to={{EndDate}}&hotelId={{HotelCode}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"GetBookings"
							],
							"query": [
								{
									"key": "login",
									"value": "{{username}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								},
								{
									"key": "from",
									"value": "{{StartDate}}"
								},
								{
									"key": "to",
									"value": "{{EndDate}}"
								},
								{
									"key": "hotelId",
									"value": "{{HotelCode}}"
								}
							]
						},
						"description": "Get bookings by start-end date."
					},
					"response": []
				},
				{
					"name": "Get Bookings (date) - Wrong credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "844ae724-58f2-4681-9cbc-018795cafb56",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Failure Type: 401\", function () {",
									"var expected = \"401\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains comment: Invalid credentials\", function () {",
									"var expected = \"Invalid credentials\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e373fdb1-1afa-48e1-a770-4ee200f65644",
								"exec": [
									"var password = \"pass\";",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/GetBookings?login={{username}}&password={{password}}&from={{StartDate}}&to={{EndDate}}&hotelId={{HotelCode}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"GetBookings"
							],
							"query": [
								{
									"key": "login",
									"value": "{{username}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								},
								{
									"key": "from",
									"value": "{{StartDate}}"
								},
								{
									"key": "to",
									"value": "{{EndDate}}"
								},
								{
									"key": "hotelId",
									"value": "{{HotelCode}}"
								}
							]
						},
						"description": "Get bookings by start-end date."
					},
					"response": []
				},
				{
					"name": "Get Bookings (date) - All Partners",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "844ae724-58f2-4681-9cbc-018795cafb56",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "92eb7705-aae7-48d0-b4b5-324b94356bbd",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var password = \"password\";",
									"",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var password = \"bgZrMq778W\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var password = \"password\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/GetBookings?login={{username}}&password={{password}}&from={{StartDate}}&to={{EndDate}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"GetBookings"
							],
							"query": [
								{
									"key": "login",
									"value": "{{username}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								},
								{
									"key": "from",
									"value": "{{StartDate}}"
								},
								{
									"key": "to",
									"value": "{{EndDate}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Get bookings by start-end date."
					},
					"response": []
				},
				{
					"name": "Get Bookings (date) - All Partners - Wrong Date format",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "844ae724-58f2-4681-9cbc-018795cafb56",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"var string = \"Containds comment : Date format has to be Y-m-d\"",
									"pm.test(string, function () {",
									"var expected = \"Date format has to be Y-m-d\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "92eb7705-aae7-48d0-b4b5-324b94356bbd",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/GetBookings?login={{username}}&password={{password}}&from=0000-00-00&to=0000-00-00",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"GetBookings"
							],
							"query": [
								{
									"key": "login",
									"value": "{{username}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								},
								{
									"key": "from",
									"value": "0000-00-00"
								},
								{
									"key": "to",
									"value": "0000-00-00"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Get bookings by start-end date."
					},
					"response": []
				},
				{
					"name": "Get Bookings (date) - All Partners - StartDate > EndDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "844ae724-58f2-4681-9cbc-018795cafb56",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains comment: End Date must be greater than start date\", function () {",
									"var expected = \"End Date must be greater than start date\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "92eb7705-aae7-48d0-b4b5-324b94356bbd",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 139);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/GetBookings?login={{username}}&password={{password}}&from={{StartDate}}&to={{EndDate}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"GetBookings"
							],
							"query": [
								{
									"key": "login",
									"value": "{{username}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								},
								{
									"key": "from",
									"value": "{{StartDate}}"
								},
								{
									"key": "to",
									"value": "{{EndDate}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Get bookings by start-end date."
					},
					"response": []
				},
				{
					"name": "Get bookings (duration)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "844ae724-58f2-4681-9cbc-018795cafb56",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: HotelId\", function () {",
									"var expected = \"hotelId\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "76193828-bf08-4a13-8327-1acd3b413bea",
								"exec": [
									"var duration = \"5\";",
									"postman.setEnvironmentVariable(\"duration\", duration);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"availpro\";",
									"var password = \"password\";",
									"var hotelcode = \"12345678\";",
									"",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"availpro\";",
									"var password = \"bgZrMq778W\";",
									"var hotelcode = \"00028216\";",
									"}else if(pm.environment.name ==\"DEVINT\",\"LOCAL\")",
									"{",
									"var username = \"availpro\";",
									"var password = \"password\";",
									"var hotelcode = \"00127978\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/GetBookings?login={{username}}&password={{password}}&duration={{duration}}&hotelId={{HotelCode}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"GetBookings"
							],
							"query": [
								{
									"key": "login",
									"value": "{{username}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								},
								{
									"key": "duration",
									"value": "{{duration}}"
								},
								{
									"key": "hotelId",
									"value": "{{HotelCode}}"
								}
							]
						},
						"description": "Get bookings in the past X hours for the given partner"
					},
					"response": []
				},
				{
					"name": "Get bookings (duration) - Wrong credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "844ae724-58f2-4681-9cbc-018795cafb56",
								"exec": [
									"pm.test(\"Response is 403 - Forbidden\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Failure Type: 401\", function () {",
									"var expected = \"401\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains comment: Invalid credentials\", function () {",
									"var expected = \"Invalid credentials\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "22393fad-46c8-40d9-a864-7a3178a3e441",
								"exec": [
									"var password = \"pass\";",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/GetBookings?login={{username}}&password={{password}}&duration={{duration}}&hotelId={{HotelCode}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"GetBookings"
							],
							"query": [
								{
									"key": "login",
									"value": "{{username}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								},
								{
									"key": "duration",
									"value": "{{duration}}"
								},
								{
									"key": "hotelId",
									"value": "{{HotelCode}}"
								}
							]
						},
						"description": "Get bookings in the past X hours for the given partner"
					},
					"response": []
				}
			]
		},
		{
			"name": "EAI Data flows",
			"item": [
				{
					"name": "Broadcast Availability",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "70ffd558-bb64-436e-95d5-48bef436aa58",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"UpdatedDate\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date1.getMilliseconds();",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date2.getMilliseconds();",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 139);",
									"var month = date3.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date3.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date3.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date3.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date3.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date3.getMilliseconds();",
									"var startdate2 = date3.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"",
									"var date4 = new Date();",
									"date4.setDate(date4.getDate() + 158);",
									"var month = date4.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date4.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date4.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date4.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date4.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date4.getMilliseconds();",
									"var enddate2 = date4.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"",
									"var count1 = \"15\";",
									"var count2 = \"20\";",
									"postman.setEnvironmentVariable(\"Count1\", count1);",
									"postman.setEnvironmentVariable(\"Count2\", count2);",
									"postman.setEnvironmentVariable(\"StartDate1\",startdate1);",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate1);",
									"postman.setEnvironmentVariable(\"StartDate2\",startdate2);",
									"postman.setEnvironmentVariable(\"EndDate2\",enddate2);",
									"",
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"var hotelcode = \"76876876\";",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"09868\";",
									"var authusername = \"cmh\";",
									"var authpassword = \"B3vxi5uGTb\";",
									"postman.setEnvironmentVariable(\"authusername\", authusername);",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"} ",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"var hotelcode = \"00142835\";",
									"var RoomTypeCode1 = \"283023\";",
									"var RoomTypeCode2 = \"321942\";",
									"var authusername = \"cmh\";",
									"var authpassword = \";Z@5<XIg%dDciNT$^yn+\";",
									"postman.setEnvironmentVariable(\"authusername\", authusername);",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00019091\";",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"393333\";",
									"var authusername = \"cmh\";",
									"var authpassword = \"cmh\";",
									"postman.setEnvironmentVariable(\"authusername\", authusername);",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "74835da6-84ca-448a-8b3d-618c33115f39",
								"exec": [
									"pm.test(\"Response is 202 Accepted - Accepted (Will be performed asynchronously)\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"X-Transaction-Id\"), function () {",
									"    pm.expect(pm.response.to.have.headers(\"X-Transaction-Id\"));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{authpassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{authusername}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Basic Y21oOkIzdnhpNXVHVGI=",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"rateBand\": {\n            \"code\": \"SBX\",\n            \"partner\": {\n                \"id\": \"{{HotelCode}}\"\n            }\n        },\n        \"product\": {\n            \"id\": \"{{RoomTypeCode1}}\"\n        },\n        \"dateFrom\": \"{{StartDate1}}\",\n        \"dateTo\": \"{{EndDate1}}\",\n        \"updatedAt\": \"{{UpdatedDate}}\",\n        \"quantity\": {{Count1}}\n    },\n    {\n        \"rateBand\": {\n            \"code\": \"SBX\",\n            \"partner\": {\n                \"id\": \"{{HotelCode}}\"\n            }\n        },\n        \"product\": {\n            \"id\": \"{{RoomTypeCode2}}\"\n        },\n        \"dateFrom\": \"{{StartDate1}}\",\n        \"dateTo\": \"{{EndDate1}}\",\n        \"updatedAt\": \"{{UpdatedDate}}\",\n        \"quantity\": {{Count2}}\n    }\n]"
						},
						"url": {
							"raw": "{{eai_api}}/api/rest/eai/v0/broadcast/channel_room_availability",
							"host": [
								"{{eai_api}}"
							],
							"path": [
								"api",
								"rest",
								"eai",
								"v0",
								"broadcast",
								"channel_room_availability"
							]
						},
						"description": "EAI Update product endpoint"
					},
					"response": []
				},
				{
					"name": "Broadcast Availability - Wrong credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "70ffd558-bb64-436e-95d5-48bef436aa58",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"UpdatedDate\",date);",
									"",
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var authpassword = \"B3vxi5uGTb\";",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									"} ",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var authpassword = \";Z@5<XIg%dDciNT$^y\";",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var authpassword = \"B3vxi5uG\";",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "74835da6-84ca-448a-8b3d-618c33115f39",
								"exec": [
									"",
									"pm.test(\"Response is 401 - Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"X-Transaction-Id\"), function () {",
									"    pm.expect(pm.response.to.have.headers(\"X-Transaction-Id\"));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{authusername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{authpassword}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic Y21oOkIzdnhpNXVHVGI="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"rateBand\": {\n            \"code\": \"SBX\",\n            \"partner\": {\n                \"id\": \"{{HotelCode}}\"\n            }\n        },\n        \"product\": {\n            \"id\": \"{{RoomTypeCode1}}\"\n        },\n        \"dateFrom\": \"{{StartDate1}}\",\n        \"dateTo\": \"{{EndDate1}}\",\n        \"updatedAt\": \"{{UpdatedDate}}\",\n        \"quantity\": {{Count1}}\n    },\n    {\n        \"rateBand\": {\n            \"code\": \"SBX\",\n            \"partner\": {\n                \"id\": \"{{HotelCode}}\"\n            }\n        },\n        \"product\": {\n            \"id\": \"{{RoomTypeCode2}}\"\n        },\n        \"dateFrom\": \"{{StartDate1}}\",\n        \"dateTo\": \"{{EndDate1}}\",\n        \"updatedAt\": \"{{UpdatedDate}}\",\n        \"quantity\": {{Count2}}\n    }\n]"
						},
						"url": {
							"raw": "{{eai_api}}/api/rest/eai/v0/broadcast/channel_room_availability",
							"host": [
								"{{eai_api}}"
							],
							"path": [
								"api",
								"rest",
								"eai",
								"v0",
								"broadcast",
								"channel_room_availability"
							]
						},
						"description": "EAI Update product endpoint"
					},
					"response": []
				},
				{
					"name": "Broadcast Availability - Wrong Date format",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "70ffd558-bb64-436e-95d5-48bef436aa58",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"postman.setEnvironmentVariable(\"UpdatedDate\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date1.getMilliseconds();",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date2.getMilliseconds();",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 139);",
									"var month = date3.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date3.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date3.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date3.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date3.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date3.getMilliseconds();",
									"var startdate2 = date3.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"",
									"var date4 = new Date();",
									"date4.setDate(date4.getDate() + 158);",
									"var month = date4.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date4.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date4.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date4.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date4.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date4.getMilliseconds();",
									"var enddate2 = date4.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"",
									"postman.setEnvironmentVariable(\"StartDate1\",startdate1);",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate1);",
									"postman.setEnvironmentVariable(\"StartDate2\",startdate2);",
									"postman.setEnvironmentVariable(\"EndDate2\",enddate2);",
									"",
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var authpassword = \"B3vxi5uGTb\";",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									"} ",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var authpassword = \";Z@5<XIg%dDciNT$^yn+\";",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var authpassword = \"cmh\";",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "74835da6-84ca-448a-8b3d-618c33115f39",
								"exec": [
									"var date = postman.getEnvironmentVariable(\"UpdatedDate\");",
									"",
									"pm.test(\"Response is 400 - Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"X-Transaction-Id\"), function () {",
									"    pm.expect(pm.response.to.have.headers(\"X-Transaction-Id\"));",
									"}",
									"",
									"pm.test(\"Contains code error : 400\", function () {",
									"var contains = false;",
									"var expected = \"400\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error with description of wrong format date\", function () {",
									"var contains = false;",
									"var expected = date;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{authusername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{authpassword}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic Y21oOkIzdnhpNXVHVGI="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"rateBand\": {\n            \"code\": \"SBX\",\n            \"partner\": {\n                \"id\": \"{{HotelCode}}\"\n            }\n        },\n        \"product\": {\n            \"id\": \"{{RoomTypeCode1}}\"\n        },\n        \"dateFrom\": \"{{StartDate1}}\",\n        \"dateTo\": \"{{EndDate1}}\",\n        \"updatedAt\": \"{{UpdatedDate}}\",\n        \"quantity\": {{Count1}}\n    },\n    {\n        \"rateBand\": {\n            \"code\": \"SBX\",\n            \"partner\": {\n                \"id\": \"{{HotelCode}}\"\n            }\n        },\n        \"product\": {\n            \"id\": \"{{RoomTypeCode2}}\"\n        },\n        \"dateFrom\": \"{{StartDate1}}\",\n        \"dateTo\": \"{{EndDate1}}\",\n        \"updatedAt\": \"{{UpdatedDate}}\",\n        \"quantity\": {{Count2}}\n    }\n]"
						},
						"url": {
							"raw": "{{eai_api}}/api/rest/eai/v0/broadcast/channel_room_availability",
							"host": [
								"{{eai_api}}"
							],
							"path": [
								"api",
								"rest",
								"eai",
								"v0",
								"broadcast",
								"channel_room_availability"
							]
						},
						"description": "EAI Update product endpoint"
					},
					"response": []
				},
				{
					"name": "Broadcast Price",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "060dac6a-7863-4e87-8d03-acc4bc09e08c",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"UpdatedDate\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date1.getMilliseconds();",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date2.getMilliseconds();",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 139);",
									"var month = date3.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date3.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date3.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date3.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date3.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date3.getMilliseconds();",
									"var startdate2 = date3.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"",
									"var date4 = new Date();",
									"date4.setDate(date4.getDate() + 158);",
									"var month = date4.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date4.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date4.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date4.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date4.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date4.getMilliseconds();",
									"var enddate2 = date4.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"",
									"var Price1 = \"75\";",
									"var Price2 = \"85\";",
									"var Price3 = \"90\";",
									"var Price4 = \"110\";",
									"postman.setEnvironmentVariable(\"Price1\", Price1);",
									"postman.setEnvironmentVariable(\"Price2\", Price2);",
									"postman.setEnvironmentVariable(\"Price3\", Price3);",
									"postman.setEnvironmentVariable(\"Price4\", Price4);",
									"postman.setEnvironmentVariable(\"StartDate1\",startdate1);",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate1);",
									"postman.setEnvironmentVariable(\"StartDate2\",startdate2);",
									"postman.setEnvironmentVariable(\"EndDate2\",enddate2);",
									"",
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"var hotelcode = \"76876876\";",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"09868\";",
									"var authusername = \"cmh\";",
									"var authpassword = \"B3vxi5uGTb\";",
									"postman.setEnvironmentVariable(\"authusername\", authusername);",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"} ",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"var hotelcode = \"00142835\";",
									"var RoomTypeCode1 = \"283023\";",
									"var RoomTypeCode2 = \"321942\";",
									"var authusername = \"cmh\";",
									"var authpassword = \";Z@5<XIg%dDciNT$^yn+\";",
									"postman.setEnvironmentVariable(\"authusername\", authusername);",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00019091\";",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"393333\";",
									"var authusername = \"cmh\";",
									"var authpassword = \"cmh\";",
									"postman.setEnvironmentVariable(\"authusername\", authusername);",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7800c0f1-5341-423c-b1fd-a24ed4af6b2b",
								"exec": [
									"pm.test(\"Response is 202 Accepted - Accepted (Will be performed asynchronously)\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"X-Transaction-Id\"), function () {",
									"    pm.expect(pm.response.to.have.headers(\"X-Transaction-Id\"));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{authusername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{authpassword}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic Y21oOkIzdnhpNXVHVGI="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"rateBand\": {\n            \"code\": \"SBX\",\n            \"partner\": {\n                \"id\": \"{{HotelCode}}\"\n            }\n        },\n        \"product\": {\n            \"id\": \"{{RoomTypeCode1}}\"\n        },\n        \"dateFrom\": \"{{StartDate1}}\",\n        \"dateTo\": \"{{EndDate1}}\",\n        \"updatedAt\": \"{{UpdatedDate}}\",\n        \"price\": {\n            \"amount\": {{Price1}},\n            \"currencyCode\": \"EUR\"\n        }\n    },\n    {\n        \"rateBand\": {\n            \"code\": \"SBX\",\n            \"partner\": {\n                \"id\": \"{{HotelCode}}\"\n            }\n        },\n        \"product\": {\n            \"id\": \"{{RoomTypeCode1}}\"\n        },\n        \"dateFrom\": \"{{StartDate2}}\",\n        \"dateTo\": \"{{EndDate2}}\",\n        \"updatedAt\": \"{{UpdatedDate}}\",\n        \"price\": {\n            \"amount\": {{Price2}},\n            \"currencyCode\": \"EUR\"\n        }\n    },\n    {\n        \"rateBand\": {\n            \"code\": \"SBX\",\n            \"partner\": {\n                \"id\": \"{{HotelCode}}\"\n            }\n        },\n        \"product\": {\n            \"id\": \"{{RoomTypeCode2}}\"\n        },\n        \"dateFrom\": \"{{StartDate1}}\",\n        \"dateTo\": \"{{EndDate1}}\",\n        \"updatedAt\": \"{{UpdatedDate}}\",\n        \"price\": {\n            \"amount\": {{Price3}},\n            \"currencyCode\": \"EUR\"\n        }\n    },\n    {\n        \"rateBand\": {\n            \"code\": \"SBX\",\n            \"partner\": {\n                \"id\": \"{{HotelCode}}\"\n            }\n        },\n        \"product\": {\n            \"id\": \"{{RoomTypeCode2}}\"\n        },\n        \"dateFrom\": \"{{StartDate2}}\",\n        \"dateTo\": \"{{EndDate2}}\",\n        \"updatedAt\": \"{{UpdatedDate}}\",\n        \"price\": {\n            \"amount\": {{Price4}},\n            \"currencyCode\": \"EUR\"\n        }\n    }\n]"
						},
						"url": {
							"raw": "{{eai_api}}/api/rest/eai/v0/broadcast/channel_room_price",
							"host": [
								"{{eai_api}}"
							],
							"path": [
								"api",
								"rest",
								"eai",
								"v0",
								"broadcast",
								"channel_room_price"
							]
						},
						"description": "EAI Update product endpoint"
					},
					"response": []
				},
				{
					"name": "Broadcast Price - Wrong credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "060dac6a-7863-4e87-8d03-acc4bc09e08c",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"UpdatedDate\",date);",
									"",
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var authpassword = \"B3vxi5uGTb\";",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									"} ",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var authpassword = \";Z@5<XIg%dDciNT$^y\";",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var authpassword = \"B3vxi5uG\";",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7800c0f1-5341-423c-b1fd-a24ed4af6b2b",
								"exec": [
									"",
									"pm.test(\"Response is 401 - Unauthorized\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"X-Transaction-Id\"), function () {",
									"    pm.expect(pm.response.to.have.headers(\"X-Transaction-Id\"));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{authusername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{authpassword}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic Y21oOkIzdnhpNXVHVGI="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"rateBand\": {\n            \"code\": \"SBX\",\n            \"partner\": {\n                \"id\": \"{{HotelCode}}\"\n            }\n        },\n        \"product\": {\n            \"id\": \"{{RoomTypeCode1}}\"\n        },\n        \"dateFrom\": \"{{StartDate1}}\",\n        \"dateTo\": \"{{EndDate1}}\",\n        \"updatedAt\": \"{{UpdatedDate}}\",\n        \"price\": {\n            \"amount\": {{Price1}},\n            \"currencyCode\": \"EUR\"\n        }\n    },\n    {\n        \"rateBand\": {\n            \"code\": \"SBX\",\n            \"partner\": {\n                \"id\": \"{{HotelCode}}\"\n            }\n        },\n        \"product\": {\n            \"id\": \"{{RoomTypeCode1}}\"\n        },\n        \"dateFrom\": \"{{StartDate2}}\",\n        \"dateTo\": \"{{EndDate2}}\",\n        \"updatedAt\": \"{{UpdatedDate}}\",\n        \"price\": {\n            \"amount\": {{Price2}},\n            \"currencyCode\": \"EUR\"\n        }\n    },\n    {\n        \"rateBand\": {\n            \"code\": \"SBX\",\n            \"partner\": {\n                \"id\": \"{{HotelCode}}\"\n            }\n        },\n        \"product\": {\n            \"id\": \"{{RoomTypeCode2}}\"\n        },\n        \"dateFrom\": \"{{StartDate1}}\",\n        \"dateTo\": \"{{EndDate1}}\",\n        \"updatedAt\": \"{{UpdatedDate}}\",\n        \"price\": {\n            \"amount\": {{Price3}},\n            \"currencyCode\": \"EUR\"\n        }\n    },\n    {\n        \"rateBand\": {\n            \"code\": \"SBX\",\n            \"partner\": {\n                \"id\": \"{{HotelCode}}\"\n            }\n        },\n        \"product\": {\n            \"id\": \"{{RoomTypeCode2}}\"\n        },\n        \"dateFrom\": \"{{StartDate2}}\",\n        \"dateTo\": \"{{EndDate2}}\",\n        \"updatedAt\": \"{{UpdatedDate}}\",\n        \"price\": {\n            \"amount\": {{Price4}},\n            \"currencyCode\": \"EUR\"\n        }\n    }\n]"
						},
						"url": {
							"raw": "{{eai_api}}/api/rest/eai/v0/broadcast/channel_room_price",
							"host": [
								"{{eai_api}}"
							],
							"path": [
								"api",
								"rest",
								"eai",
								"v0",
								"broadcast",
								"channel_room_price"
							]
						},
						"description": "EAI Update product endpoint"
					},
					"response": []
				},
				{
					"name": "Broadcast Price - Wrong Date format",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "060dac6a-7863-4e87-8d03-acc4bc09e08c",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"postman.setEnvironmentVariable(\"UpdatedDate\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date1.getMilliseconds();",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date2.getMilliseconds();",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 139);",
									"var month = date3.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date3.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date3.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date3.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date3.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date3.getMilliseconds();",
									"var startdate2 = date3.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"",
									"var date4 = new Date();",
									"date4.setDate(date4.getDate() + 158);",
									"var month = date4.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date4.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date4.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date4.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date4.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date4.getMilliseconds();",
									"var enddate2 = date4.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"",
									"var Price1 = \"70\";",
									"var Price2 = \"80\";",
									"var Price3 = \"90\";",
									"var Price4 = \"100\";",
									"postman.setEnvironmentVariable(\"Price1\", Price1);",
									"postman.setEnvironmentVariable(\"Price2\", Price2);",
									"postman.setEnvironmentVariable(\"Price3\", Price3);",
									"postman.setEnvironmentVariable(\"Price4\", Price4);",
									"postman.setEnvironmentVariable(\"StartDate1\",startdate1);",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate1);",
									"postman.setEnvironmentVariable(\"StartDate2\",startdate2);",
									"postman.setEnvironmentVariable(\"EndDate2\",enddate2);",
									"",
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var authpassword = \"B3vxi5uGTb\";",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									"} ",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var authpassword = \";Z@5<XIg%dDciNT$^yn+\";",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var authpassword = \"cmh\";",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7800c0f1-5341-423c-b1fd-a24ed4af6b2b",
								"exec": [
									"var date = postman.getEnvironmentVariable(\"UpdatedDate\");",
									"",
									"pm.test(\"Response is 400 - Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"X-Transaction-Id\"), function () {",
									"    pm.expect(pm.response.to.have.headers(\"X-Transaction-Id\"));",
									"}",
									"",
									"pm.test(\"Contains code error : 400\", function () {",
									"var contains = false;",
									"var expected = \"400\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains error with description of wrong format date\", function () {",
									"var contains = false;",
									"var expected = date;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{authusername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{authpassword}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic Y21oOkIzdnhpNXVHVGI="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"rateBand\": {\n            \"code\": \"SBX\",\n            \"partner\": {\n                \"id\": \"{{HotelCode}}\"\n            }\n        },\n        \"product\": {\n            \"id\": \"{{RoomTypeCode1}}\"\n        },\n        \"dateFrom\": \"{{StartDate1}}\",\n        \"dateTo\": \"{{EndDate1}}\",\n        \"updatedAt\": \"{{UpdatedDate}}\",\n        \"price\": {\n            \"amount\": {{Price1}},\n            \"currencyCode\": \"EUR\"\n        }\n    },\n    {\n        \"rateBand\": {\n            \"code\": \"SBX\",\n            \"partner\": {\n                \"id\": \"{{HotelCode}}\"\n            }\n        },\n        \"product\": {\n            \"id\": \"{{RoomTypeCode1}}\"\n        },\n        \"dateFrom\": \"{{StartDate2}}\",\n        \"dateTo\": \"{{EndDate2}}\",\n        \"updatedAt\": \"{{UpdatedDate}}\",\n        \"price\": {\n            \"amount\": {{Price2}},\n            \"currencyCode\": \"EUR\"\n        }\n    },\n    {\n        \"rateBand\": {\n            \"code\": \"SBX\",\n            \"partner\": {\n                \"id\": \"{{HotelCode}}\"\n            }\n        },\n        \"product\": {\n            \"id\": \"{{RoomTypeCode2}}\"\n        },\n        \"dateFrom\": \"{{StartDate1}}\",\n        \"dateTo\": \"{{EndDate1}}\",\n        \"updatedAt\": \"{{UpdatedDate}}\",\n        \"price\": {\n            \"amount\": {{Price3}},\n            \"currencyCode\": \"EUR\"\n        }\n    },\n    {\n        \"rateBand\": {\n            \"code\": \"SBX\",\n            \"partner\": {\n                \"id\": \"{{HotelCode}}\"\n            }\n        },\n        \"product\": {\n            \"id\": \"{{RoomTypeCode2}}\"\n        },\n        \"dateFrom\": \"{{StartDate2}}\",\n        \"dateTo\": \"{{EndDate2}}\",\n        \"updatedAt\": \"{{UpdatedDate}}\",\n        \"price\": {\n            \"amount\": {{Price4}},\n            \"currencyCode\": \"EUR\"\n        }\n    }\n]"
						},
						"url": {
							"raw": "{{eai_api}}/api/rest/eai/v0/broadcast/channel_room_price",
							"host": [
								"{{eai_api}}"
							],
							"path": [
								"api",
								"rest",
								"eai",
								"v0",
								"broadcast",
								"channel_room_price"
							]
						},
						"description": "EAI Update product endpoint"
					},
					"response": []
				}
			]
		},
		{
			"name": "iResa API",
			"item": [
				{
					"name": "UpdateAvailabilities",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "88b81ef1-48ce-4a05-940f-5ea96e7e97a4",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 71);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									"",
									"",
									"var count1 = Math.floor(Math.random() * 20);",
									"var count2 = Math.floor(Math.random() * 20);",
									"",
									"if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00142835\";",
									"var RoomTypeCode1 = \"283023\";",
									"var RoomTypeCode2 = \"321942\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00019091\";",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"393333\";",
									"}",
									"else if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00019091\";",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"393333\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"Count1\", count1);",
									"postman.setEnvironmentVariable(\"Count2\", count2);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\",RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0da75ad4-e947-4d08-bbdb-369fa5f7c5fa",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: tokenLoginSession\", function () {",
									"var expected = \"tokenLoginSession\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Response status is not 401 - Unauthorized\", function () {",
									"    pm.response.to.not.have.status(401);",
									"});",
									"",
									"pm.test(\"Doesn't contain 401 Unauthorized Error message in Response body\", function () {",
									"var expected = \"401 - Unauthorized: Access is denied due to invalid credentials.\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ssoQ\":\"CM-API\",\r\n\t\"ssoP\":\"06c6a93c696029c2da48be5f58b44755\",\r\n    \"data\":{\r\n        \"partnerCode\":\"{{HotelCode}}\",\r\n        \"availabilities\":[\r\n            {\r\n                \"roomTypeCode\":\"{{RoomTypeCode1}}\",\r\n                \"roomTypes\":[\r\n                    {\r\n                        \"dateStart\":\"{{StartDate}}\",\r\n        \t\t\t\t\"dateEnd\":\"{{EndDate}}\",\r\n                        \"stock\":{{Count1}}\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"roomTypeCode\":\"{{RoomTypeCode2}}\",\r\n                \"roomTypes\":[\r\n                    {\r\n                        \"dateStart\":\"{{StartDate}}\",\r\n        \t\t\t\t\"dateEnd\":\"{{EndDate}}\",\r\n                        \"stock\":{{Count2}}\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    \"tokenUtilisateurSession\":\"\"\r\n}"
						},
						"url": {
							"raw": "{{iresa_host}}/apipro/UpdateAvailabilities/2",
							"host": [
								"{{iresa_host}}"
							],
							"path": [
								"apipro",
								"UpdateAvailabilities",
								"2"
							]
						},
						"description": "Update Availabilities API call from CMHUB. Its a direct call from CMHUB to iResa without EAI"
					},
					"response": []
				},
				{
					"name": "UpdateAvailabilities(EAI -> iResa Call)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "88b81ef1-48ce-4a05-940f-5ea96e7e97a4",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 71);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									"",
									"var count1 = Math.floor(Math.random() * 20);",
									"var count2 = Math.floor(Math.random() * 20);",
									"",
									"if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00142835\";",
									"var RoomTypeCode1 = \"283023\";",
									"var RoomTypeCode2 = \"321942\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00019091\";",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"393333\";",
									"}",
									"else if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00019091\";",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"393333\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"Count1\", count1);",
									"postman.setEnvironmentVariable(\"Count2\", count2);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\",RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0da75ad4-e947-4d08-bbdb-369fa5f7c5fa",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: tokenLoginSession\", function () {",
									"var expected = \"tokenLoginSession\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Response status is not 401 - Unauthorized\", function () {",
									"    pm.response.to.not.have.status(401);",
									"});",
									"",
									"pm.test(\"Doesn't contain 401 Unauthorized Error message in Response body\", function () {",
									"var expected = \"401 - Unauthorized: Access is denied due to invalid credentials.\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ssoQ\":\"eai\",\r\n\t\"ssoP\":\"d4bb9a52880499b2093b6a299f4632cd\",\r\n    \"data\":{\r\n        \"partnerCode\":\"{{HotelCode}}\",\r\n        \"availabilities\":[\r\n            {\r\n                \"roomTypeCode\":\"{{RoomTypeCode1}}\",\r\n                \"roomTypes\":[\r\n                    {\r\n                        \"dateStart\":\"{{StartDate}}\",\r\n        \t\t\t\t\"dateEnd\":\"{{EndDate}}\",\r\n                        \"stock\":{{Count1}}\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"roomTypeCode\":\"{{RoomTypeCode2}}\",\r\n                \"roomTypes\":[\r\n                    {\r\n                        \"dateStart\":\"{{StartDate}}\",\r\n        \t\t\t\t\"dateEnd\":\"{{EndDate}}\",\r\n                        \"stock\":{{Count2}}\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    \"tokenUtilisateurSession\":\"\"\r\n}"
						},
						"url": {
							"raw": "{{iresa_host}}/apipro/UpdateAvailabilities/2",
							"host": [
								"{{iresa_host}}"
							],
							"path": [
								"apipro",
								"UpdateAvailabilities",
								"2"
							]
						},
						"description": "Update availabilities call from EAI to iResa\n"
					},
					"response": []
				},
				{
					"name": "ReadAvailabilities",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f4c7c799-4eaa-49d9-885d-718e82ef1650",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a34ed76e-b300-47b5-b3f0-65fe309a1775",
								"exec": [
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"",
									"var count1 = postman.getEnvironmentVariable(\"Count1\");",
									"var count2 = postman.getEnvironmentVariable(\"Count2\");",
									"",
									"var response = JSON.parse(responseBody);",
									"",
									"var stock1 = response.data.roomTypes[0].stocks[0].stock;",
									"stock1 = stock1.toString();",
									"var stock2 = response.data.roomTypes[0].stocks[19].stock;",
									"stock2 = stock2.toString();",
									"",
									"var roomcode1 = response.data.roomTypes[0].roomTypeCode;",
									"",
									"var stock3 = response.data.roomTypes[1].stocks[0].stock;",
									"stock3 = stock3.toString();",
									"var stock4 = response.data.roomTypes[1].stocks[19].stock;",
									"stock4 = stock4.toString();",
									"",
									"var roomcode2 = response.data.roomTypes[1].roomTypeCode;",
									"",
									"pm.test(\"Response is success - 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Contains Count for Room 1 as expected at startdate\", function () {",
									"var expected = count1;",
									"pm.expect(stock1).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains Count for Room 1 as expected at end date\", function () {",
									"var expected = count1;",
									"pm.expect(stock2).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains Count for Room 2 as expected at startdate\", function () {",
									"var expected = count2;",
									"pm.expect(stock3).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains Count for Room 2 as expected at enddate\", function () {",
									"var expected = count2;",
									"pm.expect(stock4).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Room 1 : \"+RoomTypeCode1+\" as expected\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode1;",
									"pm.expect(roomcode1).to.include(expected);",
									"});",
									"",
									"string = \"Contains Room 2 : \"+RoomTypeCode2+\" as expected\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode2;",
									"pm.expect(roomcode2).to.include(expected);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ssoQ\":\"CM-API\",\n\t\"ssoP\":\"06c6a93c696029c2da48be5f58b44755\",\n    \"data\":\n    {\n    \t\"roomTypes\":[\n    \t\t{\n    \t\t\t\"roomTypeCode\":\"{{RoomTypeCode1}}\"\n    \t\t},\n    \t\t{\n    \t\t\t\"roomTypeCode\":\"{{RoomTypeCode2}}\"\n    \t\t}\n    \t],\n    \t\"partnerCode\":\"{{HotelCode}}\",\n    \t\"dateStart\":\"{{StartDate}}\",\n    \t\"dateEnd\":\"{{EndDate}}\",\n    \t\"allProductType\":false\n    },\n    \"tokenUtilisateurSession\":\"\"\n}"
						},
						"url": {
							"raw": "{{iresa_host}}/apipro/ReadAvailabilities/2",
							"host": [
								"{{iresa_host}}"
							],
							"path": [
								"apipro",
								"ReadAvailabilities",
								"2"
							]
						},
						"description": "Read Availabilities API call from CMHUB. Its a direct call from CMHUB to iResa without EAI"
					},
					"response": []
				},
				{
					"name": "ReadAvailabilities(EAI -> iResa call)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f4c7c799-4eaa-49d9-885d-718e82ef1650",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a34ed76e-b300-47b5-b3f0-65fe309a1775",
								"exec": [
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"",
									"var count1 = postman.getEnvironmentVariable(\"Count1\");",
									"var count2 = postman.getEnvironmentVariable(\"Count2\");",
									"",
									"var response = JSON.parse(responseBody);",
									"",
									"var stock1 = response.data.roomTypes[0].stocks[0].stock;",
									"stock1 = stock1.toString();",
									"var stock2 = response.data.roomTypes[0].stocks[19].stock;",
									"stock2 = stock2.toString();",
									"",
									"var roomcode1 = response.data.roomTypes[0].roomTypeCode;",
									"",
									"var stock3 = response.data.roomTypes[1].stocks[0].stock;",
									"stock3 = stock3.toString();",
									"var stock4 = response.data.roomTypes[1].stocks[19].stock;",
									"stock4 = stock4.toString();",
									"",
									"var roomcode2 = response.data.roomTypes[1].roomTypeCode;",
									"",
									"pm.test(\"Response is success - 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Contains Count for Room 1 as expected at startdate\", function () {",
									"var expected = count1;",
									"pm.expect(stock1).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains Count for Room 1 as expected at end date\", function () {",
									"var expected = count1;",
									"pm.expect(stock2).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains Count for Room 2 as expected at startdate\", function () {",
									"var expected = count2;",
									"pm.expect(stock3).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains Count for Room 2 as expected at enddate\", function () {",
									"var expected = count2;",
									"pm.expect(stock4).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Room 1 : \"+RoomTypeCode1+\" as expected\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode1;",
									"pm.expect(roomcode1).to.include(expected);",
									"});",
									"",
									"string = \"Contains Room 2 : \"+RoomTypeCode2+\" as expected\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode2;",
									"pm.expect(roomcode2).to.include(expected);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ssoQ\":\"eai\",\n\t\"ssoP\":\"d4bb9a52880499b2093b6a299f4632cd\",\n    \"data\":\n    {\n    \t\"roomTypes\":[\n    \t\t{\n    \t\t\t\"roomTypeCode\":\"{{RoomTypeCode1}}\"\n    \t\t},\n    \t\t{\n    \t\t\t\"roomTypeCode\":\"{{RoomTypeCode2}}\"\n    \t\t}\n    \t],\n    \t\"partnerCode\":\"{{HotelCode}}\",\n    \t\"dateStart\":\"{{StartDate}}\",\n    \t\"dateEnd\":\"{{EndDate}}\",\n    \t\"allProductType\":false\n    },\n    \"tokenUtilisateurSession\":\"\"\n}"
						},
						"url": {
							"raw": "{{iresa_host}}/apipro/ReadAvailabilities/2",
							"host": [
								"{{iresa_host}}"
							],
							"path": [
								"apipro",
								"ReadAvailabilities",
								"2"
							]
						},
						"description": "Read Availabilities call from EAI to iResa. "
					},
					"response": []
				},
				{
					"name": "UpdateRates",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6683faa0-310c-49c4-bf5c-b14dd66f83e7",
								"exec": [
									"var Price1 = 100;",
									"var Price2 = 150;",
									"",
									"postman.setEnvironmentVariable(\"Price1\", Price1);",
									"postman.setEnvironmentVariable(\"Price2\", Price2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "acc97c67-8997-484e-ae0d-5744e9b4e08e",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: tokenLoginSession\", function () {",
									"var expected = \"tokenLoginSession\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Response status is not 401 - Unauthorized\", function () {",
									"    pm.response.to.not.have.status(401);",
									"});",
									"",
									"pm.test(\"Doesn't contain 401 Unauthorized Error message in Response body\", function () {",
									"var expected = \"401 - Unauthorized: Access is denied due to invalid credentials.\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ssoQ\":\"CM-API\",\r\n\t\"ssoP\":\"06c6a93c696029c2da48be5f58b44755\",\r\n    \"data\":{\r\n        \"partnerCode\":\"{{HotelCode}}\",\r\n        \"rates\":[\r\n            {\r\n                \"roomTypeCode\":\"{{RoomTypeCode1}}\",\r\n                \"currency\":\"EUR\",\r\n                \"roomTypes\":[\r\n                    {\r\n                        \"dateStart\":\"{{StartDate}}\",\r\n        \t\t\t\t\"dateEnd\":\"{{EndDate}}\",\r\n                        \"amount\":{{Price1}}\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"roomTypeCode\":\"{{RoomTypeCode2}}\",\r\n                \"currency\":\"EUR\",\r\n                \"roomTypes\":[\r\n                    {\r\n                        \"dateStart\":\"{{StartDate}}\",\r\n        \t\t\t\t\"dateEnd\":\"{{EndDate}}\",\r\n                        \"amount\":{{Price2}}\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    \"tokenUtilisateurSession\":\"\"\r\n}"
						},
						"url": {
							"raw": "{{iresa_host}}/apipro/UpdateRates/2",
							"host": [
								"{{iresa_host}}"
							],
							"path": [
								"apipro",
								"UpdateRates",
								"2"
							]
						},
						"description": "Update Room Rates API call from CMHUB. Its a direct call from CMHUB to iResa without EAI"
					},
					"response": []
				},
				{
					"name": "UpdateRates(EAI -> iResa Call)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6683faa0-310c-49c4-bf5c-b14dd66f83e7",
								"exec": [
									"var Price1 = 100;",
									"var Price2 = 150;",
									"",
									"postman.setEnvironmentVariable(\"Price1\", Price1);",
									"postman.setEnvironmentVariable(\"Price2\", Price2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "acc97c67-8997-484e-ae0d-5744e9b4e08e",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: tokenLoginSession\", function () {",
									"var expected = \"tokenLoginSession\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Response status is not 401 - Unauthorized\", function () {",
									"    pm.response.to.not.have.status(401);",
									"});",
									"",
									"pm.test(\"Doesn't contain 401 Unauthorized Error message in Response body\", function () {",
									"var expected = \"401 - Unauthorized: Access is denied due to invalid credentials.\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ssoQ\":\"eai\",\r\n\t\"ssoP\":\"d4bb9a52880499b2093b6a299f4632cd\",\r\n    \"data\":{\r\n        \"partnerCode\":\"{{HotelCode}}\",\r\n        \"rates\":[\r\n            {\r\n                \"roomTypeCode\":\"{{RoomTypeCode1}}\",\r\n                \"currency\":\"EUR\",\r\n                \"roomTypes\":[\r\n                    {\r\n                        \"dateStart\":\"{{StartDate}}\",\r\n        \t\t\t\t\"dateEnd\":\"{{EndDate}}\",\r\n                        \"amount\":{{Price1}}\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"roomTypeCode\":\"{{RoomTypeCode2}}\",\r\n                \"currency\":\"EUR\",\r\n                \"roomTypes\":[\r\n                    {\r\n                        \"dateStart\":\"{{StartDate}}\",\r\n        \t\t\t\t\"dateEnd\":\"{{EndDate}}\",\r\n                        \"amount\":{{Price2}}\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    \"tokenUtilisateurSession\":\"\"\r\n}"
						},
						"url": {
							"raw": "{{iresa_host}}/apipro/UpdateRates/2",
							"host": [
								"{{iresa_host}}"
							],
							"path": [
								"apipro",
								"UpdateRates",
								"2"
							]
						},
						"description": "Update Room Rates API call from EAI to iResa\n"
					},
					"response": []
				},
				{
					"name": "ReadRates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de06ccdf-deb8-408d-ac2f-6d4e3be4ef37",
								"exec": [
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"",
									"var price1 = postman.getEnvironmentVariable(\"Price1\");",
									"var price2 = postman.getEnvironmentVariable(\"Price2\");",
									"",
									"var response = JSON.parse(responseBody);",
									"",
									"var rate1 = response.data.roomTypes[0].rates[0].amount;",
									"rate1 = rate1.toString();",
									"var rate2 = response.data.roomTypes[0].rates[19].amount;",
									"rate2 = rate2.toString();",
									"",
									"var roomcode1 = response.data.roomTypes[0].roomTypeCode;",
									"",
									"var rate3 = response.data.roomTypes[1].rates[0].amount;",
									"rate3 = rate3.toString();",
									"var rate4 = response.data.roomTypes[1].rates[19].amount;",
									"rate4 = rate4.toString();",
									"",
									"var roomcode2 = response.data.roomTypes[1].roomTypeCode;",
									"",
									"pm.test(\"Response is success - 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Contains Price for Room 1 as expected at startdate\", function () {",
									"var expected = rate1;",
									"pm.expect(price1).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains Price for Room 1 as expected at enddate\", function () {",
									"var expected = rate2;",
									"pm.expect(price1).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains Price for Room 2 as expected at startdate\", function () {",
									"var expected = rate3;",
									"pm.expect(price2).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains Price for Room 2 as expected at enddate\", function () {",
									"var expected = rate4;",
									"pm.expect(price2).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Room 1 : \"+RoomTypeCode1+\" as expected\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode1;",
									"pm.expect(roomcode1).to.include(expected);",
									"});",
									"",
									"string = \"Contains Room 2 : \"+RoomTypeCode2+\" as expected\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode2;",
									"pm.expect(roomcode2).to.include(expected);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6a048e77-6825-4ed0-8be2-b64431d47f22",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ssoQ\":\"CM-API\",\r\n\t\"ssoP\":\"06c6a93c696029c2da48be5f58b44755\",\r\n    \"data\":{\r\n        \"roomTypes\":[\r\n            {\r\n                \"roomTypeCode\":\"{{RoomTypeCode1}}\"\r\n            },\r\n            {\r\n                \"roomTypeCode\":\"{{RoomTypeCode2}}\"\r\n            }\r\n        ],\r\n        \"partnerCode\":\"{{HotelCode}}\",\r\n        \"dateStart\":\"{{StartDate}}\",\r\n        \"dateEnd\":\"{{EndDate}}\",\r\n        \"allProductType\":false\r\n    },\r\n    \"tokenUtilisateurSession\":\"\"\r\n}"
						},
						"url": {
							"raw": "{{iresa_host}}/apipro/ReadRates/2",
							"host": [
								"{{iresa_host}}"
							],
							"path": [
								"apipro",
								"ReadRates",
								"2"
							]
						},
						"description": "Read Room Rates API call from CMHUB. Its a direct call from CMHUB to iResa without EAI"
					},
					"response": []
				},
				{
					"name": "ReadRates(EAI -> iResa Call)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de06ccdf-deb8-408d-ac2f-6d4e3be4ef37",
								"exec": [
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"",
									"var price1 = postman.getEnvironmentVariable(\"Price1\");",
									"var price2 = postman.getEnvironmentVariable(\"Price2\");",
									"",
									"var response = JSON.parse(responseBody);",
									"",
									"var rate1 = response.data.roomTypes[0].rates[0].amount;",
									"rate1 = rate1.toString();",
									"var rate2 = response.data.roomTypes[0].rates[19].amount;",
									"rate2 = rate2.toString();",
									"",
									"var roomcode1 = response.data.roomTypes[0].roomTypeCode;",
									"",
									"var rate3 = response.data.roomTypes[1].rates[0].amount;",
									"rate3 = rate3.toString();",
									"var rate4 = response.data.roomTypes[1].rates[19].amount;",
									"rate4 = rate4.toString();",
									"",
									"var roomcode2 = response.data.roomTypes[1].roomTypeCode;",
									"",
									"pm.test(\"Response is success - 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Contains Price for Room 1 as expected at startdate\", function () {",
									"var expected = rate1;",
									"pm.expect(price1).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains Price for Room 1 as expected at enddate\", function () {",
									"var expected = rate2;",
									"pm.expect(price1).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains Price for Room 2 as expected at startdate\", function () {",
									"var expected = rate3;",
									"pm.expect(price2).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains Price for Room 2 as expected at enddate\", function () {",
									"var expected = rate4;",
									"pm.expect(price2).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Room 1 : \"+RoomTypeCode1+\" as expected\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode1;",
									"pm.expect(roomcode1).to.include(expected);",
									"});",
									"",
									"string = \"Contains Room 2 : \"+RoomTypeCode2+\" as expected\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode2;",
									"pm.expect(roomcode2).to.include(expected);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6a048e77-6825-4ed0-8be2-b64431d47f22",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"ssoQ\":\"eai\",\r\n\t\"ssoP\":\"d4bb9a52880499b2093b6a299f4632cd\",\r\n    \"data\":{\r\n        \"roomTypes\":[\r\n            {\r\n                \"roomTypeCode\":\"{{RoomTypeCode1}}\"\r\n            },\r\n            {\r\n                \"roomTypeCode\":\"{{RoomTypeCode2}}\"\r\n            }\r\n        ],\r\n        \"partnerCode\":\"{{HotelCode}}\",\r\n        \"dateStart\":\"{{StartDate}}\",\r\n        \"dateEnd\":\"{{EndDate}}\",\r\n        \"allProductType\":false\r\n    },\r\n    \"tokenUtilisateurSession\":\"\"\r\n}"
						},
						"url": {
							"raw": "{{iresa_host}}/apipro/ReadRates/2",
							"host": [
								"{{iresa_host}}"
							],
							"path": [
								"apipro",
								"ReadRates",
								"2"
							]
						},
						"description": "Read Room Rates API call from EAI to iResa"
					},
					"response": []
				},
				{
					"name": "Read Bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de06ccdf-deb8-408d-ac2f-6d4e3be4ef37",
								"exec": [
									"",
									"pm.test(\"Response is success - 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Doesn't show status as fail\", function () {",
									"var expected = \"fail\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6a048e77-6825-4ed0-8be2-b64431d47f22",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() -22);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate() - 1;",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day;",
									"postman.setEnvironmentVariable(\"startdate\",startdate)",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 20);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate() - 1;",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day;",
									"postman.setEnvironmentVariable(\"enddate\",enddate)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ssoQ\":\"CM-API\",\r\n\t\"ssoP\":\"06c6a93c696029c2da48be5f58b44755\",\r\n    \"data\":{\r\n        \"partnerCode\":\"{{HotelCode}}\",\r\n        \"dateStartLastModified\":\"{{StartDate}}\",\r\n        \"dateEndLastModified\":\"{{EndDate}}\",\r\n        \"allProductType\":false\r\n    },\r\n    \"tokenUtilisateurSession\":\"\"\r\n}"
						},
						"url": {
							"raw": "{{iresa_host}}/apipro/ReadBookings/2",
							"host": [
								"{{iresa_host}}"
							],
							"path": [
								"apipro",
								"ReadBookings",
								"2"
							]
						},
						"description": "Read Room Bookings call from CMHUB. Its a direct call from CMHUB to iResa without EAI"
					},
					"response": []
				},
				{
					"name": "GetAccomodations",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "88b81ef1-48ce-4a05-940f-5ea96e7e97a4",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 71);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									"",
									"",
									"var count1 = Math.floor(Math.random() * 20);",
									"var count2 = Math.floor(Math.random() * 20);",
									"",
									"if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00142835\";",
									"var RoomTypeCode1 = \"283023\";",
									"var RoomTypeCode2 = \"321942\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00019091\";",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"393333\";",
									"}",
									"else if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00019091\";",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"393333\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"Count1\", count1);",
									"postman.setEnvironmentVariable(\"Count2\", count2);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\",RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0da75ad4-e947-4d08-bbdb-369fa5f7c5fa",
								"exec": [
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: tokenLoginSession\", function () {",
									"var expected = \"tokenLoginSession\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Room 1 : \"+RoomTypeCode1+\" as expected\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"string = \"Contains Room 2 : \"+RoomTypeCode2+\" as expected\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode2;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ssoQ\":\"CM-API\",\r\n\t\"ssoP\":\"06c6a93c696029c2da48be5f58b44755\",\r\n    \"data\":{\r\n        \"partnerCode\":\"{{HotelCode}}\",\r\n        \"langCode\" :\"fr-FR\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{iresa_host}}/apipro/GetMainAccomodations/2",
							"host": [
								"{{iresa_host}}"
							],
							"path": [
								"apipro",
								"GetMainAccomodations",
								"2"
							]
						},
						"description": "To get rooms from iResa\n"
					},
					"response": []
				},
				{
					"name": "Update Partner - Disable Partner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "88b81ef1-48ce-4a05-940f-5ea96e7e97a4",
								"exec": [
									"if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00076880\";",
									"var RoomTypeCode1 = \"339581\";",
									"var RoomTypeCode2 = \"339580\";",
									"}",
									"else if(pm.environment.name == \"DEVINT\" || pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\",RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0da75ad4-e947-4d08-bbdb-369fa5f7c5fa",
								"exec": [
									"if(pm.environment.name ==\"PREPROD\")",
									"{",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: tokenLoginSession\", function () {",
									"var expected = \"tokenLoginSession\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Response status is not 401 - Unauthorized\", function () {",
									"    pm.response.to.not.have.status(401);",
									"});",
									"",
									"pm.test(\"Doesn't contain 401 Unauthorized Error message in Response body\", function () {",
									"var expected = \"401 - Unauthorized: Access is denied due to invalid credentials.\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									"}",
									"else",
									"{",
									"    pm.test.skip(\"Not valid in \"+pm.environment.name+\" Evironment\", function(){",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ssoQ\":\"CM-API\",\r\n\t\"ssoP\":\"06c6a93c696029c2da48be5f58b44755\",\r\n    \"data\":{\r\n    \t\"isCMMode\": \"False\",\r\n        \"partnerCode\":\"{{HotelCode}}\"\r\n    },\r\n    \"tokenUtilisateurSession\":\"\"\r\n}"
						},
						"url": {
							"raw": "{{iresa_host}}/apipro/UpdatePartnerCMMode/2",
							"host": [
								"{{iresa_host}}"
							],
							"path": [
								"apipro",
								"UpdatePartnerCMMode",
								"2"
							]
						},
						"description": "Update Partner Status to Enable and Disable. Sent through iresa to CMHUB."
					},
					"response": []
				},
				{
					"name": "UpdateAvailabilities - Shouldn't Update iResa",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "88b81ef1-48ce-4a05-940f-5ea96e7e97a4",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 71);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									"",
									"",
									"var count1 = Math.floor(Math.random() * 20);",
									"var count2 = Math.floor(Math.random() * 20);",
									"",
									"postman.setEnvironmentVariable(\"Count1\", count1);",
									"postman.setEnvironmentVariable(\"Count2\", count2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0da75ad4-e947-4d08-bbdb-369fa5f7c5fa",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: Fail\", function () {",
									"var expected = \"fail\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: tokenLoginSession\", function () {",
									"var expected = \"tokenLoginSession\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: a product does not match minimum criteria\", function () {",
									"var expected = \"a product does not match minimum criteria\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Response status is not 401 - Unauthorized\", function () {",
									"    pm.response.to.not.have.status(401);",
									"});",
									"",
									"pm.test(\"Doesn't contain 401 Unauthorized Error message in Response body\", function () {",
									"var expected = \"401 - Unauthorized: Access is denied due to invalid credentials.\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ssoQ\":\"CM-API\",\r\n\t\"ssoP\":\"06c6a93c696029c2da48be5f58b44755\",\r\n    \"data\":{\r\n        \"partnerCode\":\"{{HotelCode}}\",\r\n        \"availabilities\":[\r\n            {\r\n                \"roomTypeCode\":\"{{RoomTypeCode1}}\",\r\n                \"roomTypes\":[\r\n                    {\r\n                        \"dateStart\":\"{{StartDate}}\",\r\n        \t\t\t\t\"dateEnd\":\"{{EndDate}}\",\r\n                        \"stock\":{{Count1}}\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"roomTypeCode\":\"{{RoomTypeCode2}}\",\r\n                \"roomTypes\":[\r\n                    {\r\n                        \"dateStart\":\"{{StartDate}}\",\r\n        \t\t\t\t\"dateEnd\":\"{{EndDate}}\",\r\n                        \"stock\":{{Count2}}\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    \"tokenUtilisateurSession\":\"\"\r\n}"
						},
						"url": {
							"raw": "{{iresa_host}}/apipro/UpdateAvailabilities/2",
							"host": [
								"{{iresa_host}}"
							],
							"path": [
								"apipro",
								"UpdateAvailabilities",
								"2"
							]
						},
						"description": "Update Availabilities API call from CMHUB. Its a direct call from CMHUB to iResa without EAI"
					},
					"response": []
				},
				{
					"name": "Update Partner - Enable Partner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "88b81ef1-48ce-4a05-940f-5ea96e7e97a4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0da75ad4-e947-4d08-bbdb-369fa5f7c5fa",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: tokenLoginSession\", function () {",
									"var expected = \"tokenLoginSession\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Response status is not 401 - Unauthorized\", function () {",
									"    pm.response.to.not.have.status(401);",
									"});",
									"",
									"pm.test(\"Doesn't contain 401 Unauthorized Error message in Response body\", function () {",
									"var expected = \"401 - Unauthorized: Access is denied due to invalid credentials.\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ssoQ\":\"CM-API\",\r\n\t\"ssoP\":\"06c6a93c696029c2da48be5f58b44755\",\r\n    \"data\":{\r\n    \t\"isCMMode\": \"True\",\r\n        \"partnerCode\":\"{{HotelCode}}\"\r\n    },\r\n    \"tokenUtilisateurSession\":\"\"\r\n}"
						},
						"url": {
							"raw": "{{iresa_host}}/apipro/UpdatePartnerCMMode/2",
							"host": [
								"{{iresa_host}}"
							],
							"path": [
								"apipro",
								"UpdatePartnerCMMode",
								"2"
							]
						},
						"description": "Update Partner Status to Enable and Disable. Sent through iresa to CMHUB."
					},
					"response": []
				},
				{
					"name": "UpdateAvailabilities - Should Update in iResa",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "88b81ef1-48ce-4a05-940f-5ea96e7e97a4",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 71);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									"",
									"",
									"var count1 = Math.floor(Math.random() * 20);",
									"var count2 = Math.floor(Math.random() * 20);",
									"",
									"postman.setEnvironmentVariable(\"Count1\", count1);",
									"postman.setEnvironmentVariable(\"Count2\", count2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0da75ad4-e947-4d08-bbdb-369fa5f7c5fa",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: tokenLoginSession\", function () {",
									"var expected = \"tokenLoginSession\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Response status is not 401 - Unauthorized\", function () {",
									"    pm.response.to.not.have.status(401);",
									"});",
									"",
									"pm.test(\"Doesn't contain 401 Unauthorized Error message in Response body\", function () {",
									"var expected = \"401 - Unauthorized: Access is denied due to invalid credentials.\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ssoQ\":\"CM-API\",\r\n\t\"ssoP\":\"06c6a93c696029c2da48be5f58b44755\",\r\n    \"data\":{\r\n        \"partnerCode\":\"{{HotelCode}}\",\r\n        \"availabilities\":[\r\n            {\r\n                \"roomTypeCode\":\"{{RoomTypeCode1}}\",\r\n                \"roomTypes\":[\r\n                    {\r\n                        \"dateStart\":\"{{StartDate}}\",\r\n        \t\t\t\t\"dateEnd\":\"{{EndDate}}\",\r\n                        \"stock\":{{Count1}}\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"roomTypeCode\":\"{{RoomTypeCode2}}\",\r\n                \"roomTypes\":[\r\n                    {\r\n                        \"dateStart\":\"{{StartDate}}\",\r\n        \t\t\t\t\"dateEnd\":\"{{EndDate}}\",\r\n                        \"stock\":{{Count2}}\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    \"tokenUtilisateurSession\":\"\"\r\n}"
						},
						"url": {
							"raw": "{{iresa_host}}/apipro/UpdateAvailabilities/2",
							"host": [
								"{{iresa_host}}"
							],
							"path": [
								"apipro",
								"UpdateAvailabilities",
								"2"
							]
						},
						"description": "Update Availabilities API call from CMHUB. Its a direct call from CMHUB to iResa without EAI"
					},
					"response": []
				}
			],
			"description": "This API is used by CMHUB to update availability and rates in iResa, to get rooms for a partner from iResa and to get bookings.\n"
		},
		{
			"name": "Experience API",
			"item": [
				{
					"name": "Update Product - 2(No Partner exist)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e771bb7a-5f41-4fd2-a1ad-a96e97ed44b8",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains string: success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "effb7fac-8a81-4954-923a-9b41a5d78ebe",
								"exec": [
									"var randomId = Math.floor(Math.random() * 2000000);",
									"postman.setEnvironmentVariable(\"Identifier\", randomId)",
									"",
									"var randomId1 = Math.floor(Math.random() * 20);",
									"postman.setEnvironmentVariable(\"Id\", randomId1)",
									"",
									"var randomId2 = Math.floor(10000000 + Math.random() * 90000000);",
									"postman.setEnvironmentVariable(\"HotelCode\", randomId2);",
									"",
									"var username = \"eai\";",
									"postman.setEnvironmentVariable(\"username\", username);",
									"",
									"var Price = \"150\";",
									"postman.setEnvironmentVariable(\"Price\", Price);",
									"",
									"if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var password = \"ggn35xLM7r5pxB6cD4bWjEWPPnktm6\";",
									"}else if(pm.environment.name ==\"DEVINT\", \"SANDBOX_ENV\")",
									"{",
									"var password = \"17s8msLXKkMVy0mP0BlT0BN7bRsMNEEE\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"type\":\"experience\", \n   \"universe_id\":\"STA\", \n   \"identifier\":\"{{Identifier}}\", \n   \"name\":\"Experience Automation - {{Id}}\", \n   \"price\":{{Price}}, \n   \"description\":\"Experience Automation - {{Id}}\",\n   \"partner_code\":\"{{HotelCode}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/UpdateProduct",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"UpdateProduct"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						},
						"description": "Create new Experience or update experience when Partner doesnt exist\n\n"
					},
					"response": []
				},
				{
					"name": "Update Product - 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e771bb7a-5f41-4fd2-a1ad-a96e97ed44b8",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains string: success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "effb7fac-8a81-4954-923a-9b41a5d78ebe",
								"exec": [
									"var Identifier = Math.floor(Math.random() * 20000000);",
									"postman.setEnvironmentVariable(\"Identifier\", Identifier)",
									"",
									"var randomId1 = Math.floor(Math.random() * 20);",
									"postman.setEnvironmentVariable(\"Id\", randomId1)",
									"",
									"var Price = \"100\";",
									"postman.setEnvironmentVariable(\"Price\", Price);",
									"",
									"if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00019502\";",
									"}else if(pm.environment.name ==\"DEVINT\", \"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00019091\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"type\":\"experience\", \n   \"universe_id\":\"STA\", \n   \"identifier\":\"{{Identifier}}\", \n   \"name\":\"Experience Automation - {{Id}}\", \n   \"price\":{{Price}}, \n   \"description\":\"Experience Automation - {{Id}}\",\n   \"partner_code\":\"{{HotelCode}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/UpdateProduct",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"UpdateProduct"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						},
						"description": "Create new Experience or update experience\n"
					},
					"response": []
				},
				{
					"name": "Update Experience Price",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e771bb7a-5f41-4fd2-a1ad-a96e97ed44b8",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains string: success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "effb7fac-8a81-4954-923a-9b41a5d78ebe",
								"exec": [
									"var Price = \"200\";",
									"postman.setEnvironmentVariable(\"Price\", Price);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"type\":\"experience\", \n   \"universe_id\":\"STA\", \n   \"identifier\":\"{{Identifier}}\", \n   \"name\":\"Experience Automation - {{Id}}\", \n   \"price\":{{Price}}, \n   \"description\":\"Experience Automation - {{Id}}\",\n   \"partner_code\":\"{{HotelCode}}\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/UpdateProduct",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"UpdateProduct"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						},
						"description": "Update Price\n"
					},
					"response": []
				},
				{
					"name": "Update Product - Amount Commission",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e771bb7a-5f41-4fd2-a1ad-a96e97ed44b8",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains string: success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "effb7fac-8a81-4954-923a-9b41a5d78ebe",
								"exec": [
									"var Price = \"150\";",
									"postman.setEnvironmentVariable(\"Price\", Price);",
									"",
									"var Commission = \"15\";",
									"postman.setEnvironmentVariable(\"Commission\", Commission);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"identifier\":\"{{Identifier}}\", \n   \"price\":{{Price}}, \n   \"commission\":{{Commission}},\n   \"commission_type\":\"amount\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/UpdateProduct",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"UpdateProduct"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						},
						"description": "To Update Experience price and commission type Amount\n\n"
					},
					"response": []
				},
				{
					"name": "Update Product - Percentage Commission",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e771bb7a-5f41-4fd2-a1ad-a96e97ed44b8",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains string: success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "effb7fac-8a81-4954-923a-9b41a5d78ebe",
								"exec": [
									"var Commission = \"10\";",
									"postman.setEnvironmentVariable(\"Commission\", Commission);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"identifier\":\"{{Identifier}}\", \n   \"price\":{{Price1}}, \n   \"commission\":{{Commission}},\n   \"commission_type\":\"percentage\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/UpdateProduct",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"UpdateProduct"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						},
						"description": "To Update Experience price and commission type Percentage\n\n\n"
					},
					"response": []
				}
			],
			"description": "This API is used by CMHUB to update availability and rates in iResa, to get rooms for a partner from iResa and to get bookings.\n"
		},
		{
			"name": "ReservIt - XML API",
			"item": [
				{
					"name": "hotelDescription",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "action",
								"value": "OTA_HotelDescriptiveContentNotifRQ",
								"type": "text"
							},
							{
								"key": "service",
								"value": "HotelBooking",
								"type": "text"
							},
							{
								"key": "conversationid",
								"value": "CID-SMARTBOX123-123456789",
								"description": "CID-<CPAID><Compteur>-<RandomNumber>",
								"type": "text"
							},
							{
								"key": "messageid",
								"value": "CID-SMARTBOX123-123456789",
								"description": "CID-<CPAID><Compteur>-<RandomNumber>",
								"type": "text"
							},
							{
								"key": "cpaid",
								"value": "SMARTBOX",
								"type": "text"
							},
							{
								"key": "from",
								"value": "SMARTBOX",
								"type": "text"
							},
							{
								"key": "to",
								"value": "ritota",
								"type": "text"
							},
							{
								"key": "Content-Length",
								"value": "0",
								"description": "dynamic value",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "text/xml;charset=UTF-8"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "text"
							},
							{
								"key": "Pragma",
								"value": "no-cache",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "cmVzZXJ2aXRob3RlbDpwYXNzd29yZA==",
								"description": "base64(reservithotel:password)",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelDescriptiveContentNotifRQ EchoToken=\"E1542362272\" TimeStamp=\"2007-01-30T17:34:05.352+01:00\" Version=\"2006\" PrimaryLangID=\"en\">\n    <HotelDescriptiveContents ChainCode=\"12\" HotelCode=\"1052\" BrandName=\"RESERVIT\" BrandCode=\"12\">\n        <HotelDescriptiveContent CurrencyCode=\"EUR\" LanguageCode=\"fr\">\n            <HotelInfo>\n                <HotelName>LE GRILLON</HotelName>\n                <CategoryCodes>\n                    <LocationCategory Code=\"4\" CodeDetail=\"OTA\" />\n                </CategoryCodes>\n                <Descriptions>\n                    <Description CreatorID=\"HOTEL\">\n                        <Text Language=\"en\">At the side of Lake Chambon, in a cosy and comfortable setting, the\nhotel-restaurant \"Le Grillon\" welcomes you alone, as a couple, with your family\nor as part of a group. The hotel has been run for the past twenty\nyears by the same family. In the restaurant, the owner-chef is a\nmaster in the preparation of tasty, filling dishes! Terrace, pleasant garden,\nchildren's play area, garages.</Text>\n                        <Text Language=\"fr\">Sur les bords du lac Chambon, dans un cadre douillet et confortable,\nl'hôtel-restaurant\"Le Grillon\" vous accueille en couple, en famille ou en groupe.\nL'établissement est exploité depuis plus de vingt\nans par la même famille. Côté restaurant, le patron sait vous\nconcocter des petits plats roboratifs ! Terrasse,\njardin d'agrément, espace pour les enfants, garages.</Text>\n                    </Description>\n                    <Description CreatorID=\"LOCATION\">\n                        <Text Language=\"en\">A75 motorway, exit no6, or no14, direction Besse. N 89, col de\nVentouse, D5, direction Murol.</Text>\n                        <Text Language=\"fr\">A75, sortie no6, ou sortie no14, direction Besse. RN 89, col de\nVentouse, RD5 , direction Murol.</Text>\n                    </Description>\n                    <Description CreatorID=\"CLOSING\">\n                        <Text Language=\"en\">Hotel: fin vac. scol.\nToussaint/début fév. /\nRest.: fin vac. scol. Toussaint/début fév. /</Text>\n                        <Text Language=\"fr\">Hotel: fin vac. scol.\nToussaint/début fév. /\nRest.: fin vac. scol. Toussaint/début fév. /</Text>\n                    </Description>\n                </Descriptions>\n                <HotelInfoCodes>\n                    <HotelInfoCode Code=\"12\" CodeDetail=\"OTA\" Quantity=\"22\" />\n                    <HotelInfoCode Code=\"CHA\" CodeDetail=\"RIT\" Quantity=\"10\" />\n                    <HotelInfoCode Code=\"INA\" CodeDetail=\"RIT\" Quantity=\"2\" />\n                </HotelInfoCodes>\n                <Position Latitude=\"+45.5715\" Longitude=\"+002.8979\" />\n                <Services>\n                    <Service Code=\"53\" CodeDetail=\"OTA\" />\n                    <Service Code=\"68\" CodeDetail=\"OTA\" />\n                    <Service Code=\"70\" CodeDetail=\"OTA\" />\n                    <Service CodeDetail=\"CHAINOPTION\" InvCode=\"1\" ExistsCode=\"0\">\n                        <Description>\n                            <Text Language=\"EN\">breakfast</Text>\n                            <Text Language=\"FR\">petit-déjeuner</Text>\n                        </Description>\n                    </Service>\n                    <Service CodeDetail=\"CHAINOPTION\" InvCode=\"1\" ExistsCode=\"0\" MealPlanCode=\"PDJ\">\n                        <Description>\n                            <Text Language=\"EN\">breakfast</Text>\n                            <Text Language=\"FR\">petit-déjeuner</Text>\n                        </Description>\n                    </Service>\n                </Services>\n                <RelativePositions>\n                    <RelativePosition Name=\"Downtown\" Direction=\"place\" Distance=\"5 minute(s)\">\n                        <Transportations>\n                            <Transportation Amount=\"0\">\n                                <Descriptions>\n                                    <Description>\n                                        <Text Language=\"EN\">Close to city center.</Text>\n                                    </Description>\n                                </Descriptions>\n                            </Transportation>\n                        </Transportations>\n                    </RelativePosition>\n                </RelativePositions>\n                <Languages>\n                    <Language Language=\"EN\" />\n                </Languages>\n            </HotelInfo>\n            <FacilityInfo>\n                <MeetingRooms>\n                    <MeetingRoom>\n                        <Codes>\n                            <Code Code=\"88\" CodeDetail=\"OTA\" />\n                        </Codes>\n                    </MeetingRoom>\n                </MeetingRooms>\n                <GuestRooms>\n                    <GuestRoom>\n                        <Amenities>\n                            <Amenity RoomAmenityCode=\"20\" CodeDetail=\"OTA\" />\n                        </Amenities>\n                    </GuestRoom>\n                </GuestRooms>\n            </FacilityInfo>\n            <Policies>\n                <Policy DefaultValidBookingMinOffset=\"0\">\n                    <CancelPolicy>\n                        <CancelPenalty>\n                            <PenaltyDescription Name=\"CANCEL POLICY\">\n                                <Text Language=\"en\">- For a reservation guaranteed by credit card, cancellation\nwithout penalty up to\n48h00 before the arrival date. Passed 48h00 the first night will be\ncharged.\n- Deposit is not refundable in case of cancellation.\n- In case of no-show, the first night will be the minimum\ncharge. Some hotels will charge the entire stay during high season.\n- To cancel areservation, please e-mail us your\nreservation number at the following address: info@logis-de-france.fr. Your\ncancellation will be valid after you receive an e-mail from us confirming\nthe cancellation.\n- As mentioned by law #78-17 dated January 6th 1978 you have the right\nto access, to modify and to oppose to the data concerning yourself.</Text>\n                                <Text Language=\"fr\">- En cas de garantie\npar carte bancaire, le délai d'annulation\nsans frais est de 48H00 avant la date d'arrivée. Pour une\nannulation à moins de 48H00, le montant d'1 nuit sera débité.\n- En cas de garantie par versement d'arrhes, celles-ci ne sont pas remboursées en cas\nd'annulation.\n- En cas de no-show, le montant minimum d'une nuit sera débité.\nPour annuler votre réservation, merci de bien vouloir utiliser le site des Logis de France :\nwww.logis-de-france.fr et de cliquer sur :\nModifier une réservation. L'annulation de réservation est effective à\nréception d'un e-mail de notre part confirmant celle-ci. Conformément\naux dispositions de la loi du no78-17 du 6 janvier 1978, vous\ndisposez d'un droit d'accès, de rectification et d'opposition sur les données\nnominatives vous concernant.</Text>\n                            </PenaltyDescription>\n                        </CancelPenalty>\n                    </CancelPolicy>\n                    <GuaranteePaymentPolicy>\n                        <GuaranteePayment RetributionType=\"ResNotGuaranteed\">\n                            <AcceptedPayments>\n                                <AcceptedPayment>\n                                    <PaymentCard CardCode=\"AX\" CardNumber=\"0000000000000000\" ExpireDate=\"0101\" />\n                                </AcceptedPayment>\n                                <AcceptedPayment>\n                                    <PaymentCard CardCode=\"DN\" CardNumber=\"0000000000000000\" ExpireDate=\"0101\" />\n                                </AcceptedPayment>\n                                <AcceptedPayment>\n                                    <PaymentCard CardCode=\"MC\" CardNumber=\"0000000000000000\" ExpireDate=\"0101\" />\n                                </AcceptedPayment>\n                                <AcceptedPayment>\n                                    <PaymentCard CardCode=\"VA\" CardNumber=\"0000000000000000\" ExpireDate=\"0101\" />\n                                </AcceptedPayment>\n                            </AcceptedPayments>\n                        </GuaranteePayment>\n                    </GuaranteePaymentPolicy>\n                    <PolicyInfo CheckInTime=\"1970-01-01T13:00:00.000+01:00\" CheckOutTime=\"1970-01- 01T12:00:00.000+01:00\">\n                        <Description Name=\"BOOKING POLICY\">\n                            <Text Language=\"en\">- In order to guaranty your reservation we ask for your credit\ncard number or a deposit directly to the hotel.\n- It is highly appreciated to arrive to the hotel before 6:00 PM and to inform\nthe hotel in case of late arrival.\n- If a deposit is required, you have to send the requested\namount by the requested time for your reservation to be valid. Most part of our hotels\naccept deposit payment by credit card.\n- Please note that you will have to pay directly to the hotel for your entire stay.</Text>\n                            <Text Language=\"fr\">Afin de garantir votre réservation, nous vous demandons de nous communiquer\nvotre numéro de carte bancaire ou de verser des arrhes directement à l'hôtelier.\nIl est aimablement demandé de prévoir une arrivée à l'hôtel\navant 18h00 et de prévenir l'hôtelier en cas d'arrivée tardive.\nPour les réservations soumises à un versement d'arrhes, il est à noter\nque la réservation reste sous réserve de\nréception des arrhes dans les délais impartis.\nLe règlement s'effectue intégralement sur place par le client\nauprès de l'hôtelier.</Text>\n                        </Description>\n                    </PolicyInfo>\n                    <PetsPolicies>\n                        <PetsPolicy PetsPolicyCode=\"2\">\n                            <Description>\n                                <Text>Dogs only</Text>\n                            </Description>\n                        </PetsPolicy>\n                    </PetsPolicies>\n                </Policy>\n            </Policies>\n            <AreaInfo>\n                <Attractions>\n                    <Attraction AttractionCategoryCode=\"36\" CodeDetail=\"OTA\" />\n                </Attractions>\n            </AreaInfo>\n            <AffiliationInfo>\n                <DistribSystems>\n                    <DistribSystem ChainCode=\"12\" HotelCode=\"1052\">\n                        <CompanyName>Centrale de réservation Logis de\nFrance - Logis\nEurope</CompanyName>\n                    </DistribSystem>\n                </DistribSystems>\n                <Awards>\n                    <Award Provider=\"Stars\" Rating=\"2\" />\n                    <Award Provider=\"Chimneys\" Rating=\"2\" />\n                </Awards>\n            </AffiliationInfo>\n            <MultimediaObjects>\n                <MultimediaObject ContentCode=\"4\" CodeDetail=\"BIG\" Version=\"1\" ContentTitle=\"Room 25128- 106190\" ContentData=\"ROOM\" ContentID=\"25128-106190\" PictureCategoryCode=\"6\">\n                            −\n                    <URL>http://hroy.reservit.com//general/images/customer/10/room/25128-106190.jpg</URL>\n                    <Text Language=\"EN\">*-AMBASSADOR ROOM</Text>\n                    <Text Language=\"FR\">*-CHAMBRE AMBASSADOR</Text>\n                </MultimediaObject>\n                        −\n                <MultimediaObject ContentCode=\"4\" CodeDetail=\"SMALL\" Version=\"1\" ContentTitle=\"Room 25128-106190\" ContentData=\"ROOM\" ContentID=\"25128-106190\" PictureCategoryCode=\"6\">\n                            −\n                    <URL>http://hroy.reservit.com//general/images/customer/10/room/25128-\n106190_small.jpg</URL>\n                    <Text Language=\"EN\">*-AMBASSADOR ROOM</Text>\n                    <Text Language=\"FR\">*-CHAMBRE AMBASSADOR</Text>\n                </MultimediaObject>\n                <MultimediaObject ContentCode=\"12\" CodeDetail=\"1052\" Version=\"1\" ContentTitle=\"Virtual visit\" ContentData=\"VIRTUALVISIT\">\n                    <URL>http://www.hotel-grillon.com/virtual</URL>\n                </MultimediaObject>\n                <MultimediaObject ContentCode=\"4\" PictureCategoryCode=\"20\" CodeDetail=\"BIG\" Version=\"1\" ContentTitle=\"Hotel 1\" ContentData=\"HOTEL\">\n                    <URL>http://ldf.reservit.com/general/images/customer/12/hotel/1052/Lac_Chambon_Le_grillon_BD1_big.jpg</URL>\n                </MultimediaObject>\n                <MultimediaObject ContentCode=\"4\" PictureCategoryCode=\"20\" CodeDetail=\"SMALL\" Version=\"1\" ContentTitle=\"Hotel 1\" ContentData=\"HOTEL\">\n                    <URL>http://ldf.reservit.com/general/images/customer/12/hotel/1052/Lac_Chambon_Le_grillon_BD1_big_140x\n100_F3ECDB.jpg</URL>\n                </MultimediaObject>\n                <MultimediaObject ContentCode=\"4\" PictureCategoryCode=\"20\" CodeDetail=\"BIG\" Version=\"1\" ContentTitle=\"Hotel 3\" ContentData=\"HOTEL\">\n                    <URL>http://ldf.reservit.com/general/images/customer/12/hotel/1052/Lac_Chambon-Le_grillon-\nBD3.jpg</URL>\n                </MultimediaObject>\n                <MultimediaObject ContentCode=\"4\" PictureCategoryCode=\"20\" CodeDetail=\"SMALL\" Version=\"1\" ContentTitle=\"Hotel 3\" ContentData=\"HOTEL\">\n                    <URL>http://ldf.reservit.com/general/images/customer/12/hotel/1052/Lac_Chambon-Le_grillon-\nBD3_small.jpg</URL>\n                </MultimediaObject>\n            </MultimediaObjects>\n            <ContactInfos>\n                <ContactInfo>\n                    <Names>\n                        <Name>\n                            <Surname>Philippe Planeix</Surname>\n                        </Name>\n                    </Names>\n                    <Addresses>\n                        <Address ID=\"63077\">\n                            <AddressLine>Lac Chambon.</AddressLine>\n                            <CityName>CHAMBON SUR LAC</CityName>\n                            <PostalCode>63790</PostalCode>\n                            <CountryName Code=\"FR\">FRANCE</CountryName>\n                        </Address>\n                    </Addresses>\n                    <Phones>\n                        <Phone CountryAccessCode=\"33\" PhoneNumber=\"473886066\" PhoneLocationType=\"3\" AreaCityCode=\"0\" />\n                    </Phones>\n                    <Emails>\n                        <Email EmailType=\"2\">info@hotel-grillon.com</Email>\n                    </Emails>\n                    <URLs>\n                        <URL>http://www.hotel-grillon.com</URL>\n                    </URLs>\n                </ContactInfo>\n            </ContactInfos>\n            <TPA_Extensions>\n                <MaxReservationTime>14:00:00.000+01:00</MaxReservationTime>\n                <HotelRestaurant ID=\"229554\" Status=\"close\" />\n                <RITInternalCodesFacilities>\n                    <RITInternalCodeFacility RITCode=\"59\" RITTopic=\"Lang\" OTACode=\"0\" OTACodeName=\"EN\" CanBeUsedForSearch=\"true\">English</RITInternalCodeFacility>\n                    <RITInternalCodeFacility RITCode=\"292\" RITTopic=\"Hotel\" OTACode=\"20\" OTACodeType=\"RMA\" OTACodeName=\"Color\" CanBeUsedForSearch=\"true\">TV in all\nrooms</RITInternalCodeFacility>\n                    <RITInternalCodeFacility RITCode=\"295\" RITTopic=\"Hotel\" OTACode=\"53\" OTACodeType=\"HAC\" OTACodeName=\"Indoor parking\" CanBeUsedForSearch=\"true\">Covered car\npark</RITInternalCodeFacility>\n                    <RITInternalCodeFacility RITCode=\"296\" RITTopic=\"Hotel\" OTACode=\"68\" OTACodeType=\"HAC\" OTACodeName=\"Parking\" CanBeUsedForSearch=\"true\">Car\npark</RITInternalCodeFacility>\n                    <RITInternalCodeFacility RITCode=\"300\" RITTopic=\"Activity\" OTACode=\"36\" OTACodeType=\"ACC\" OTACodeName=\"Park\" CanBeUsedForSearch=\"true\">Park or\nGarden</RITInternalCodeFacility>\n                    <RITInternalCodeFacility RITCode=\"307\" RITTopic=\"Activity\" OTACode=\"70\" OTACodeType=\"HAC\" OTACodeName=\"Playground\" CanBeUsedForSearch=\"true\">Children's\npalyground</RITInternalCodeFacility>\n                    <RITInternalCodeFacility RITCode=\"311\" RITTopic=\"Hotel\" OTACode=\"2\" OTACodeType=\"PET\" OTACodeName=\"Dogs only\" CanBeUsedForSearch=\"true\">Animals allowed in\nrestaurant</RITInternalCodeFacility>\n                    <RITInternalCodeFacility RITCode=\"312\" RITTopic=\"Hotel\" OTACode=\"2\" OTACodeType=\"PET\" OTACodeName=\"Dogs only\" CanBeUsedForSearch=\"true\">Animals allowed in\nrooms</RITInternalCodeFacility>\n                    <RITInternalCodeFacility RITCode=\"314\" RITTopic=\"Hotel\" OTACode=\"88\" OTACodeType=\"MRC\" OTACodeName=\"Meeting\" CanBeUsedForSearch=\"true\">Meeting and seminars\nfacilities</RITInternalCodeFacility>\n                    <RITInternalCodeFacility RITCode=\"322\" RITTopic=\"Activity\" CanBeUsedForSearch=\"true\">Business Stopovers</RITInternalCodeFacility>\n                    <RITInternalCodeFacility RITCode=\"690\" RITTopic=\"Hotel\" CanBeUsedForSearch=\"true\">Wifi</RITInternalCodeFacility>\n                    <RITInternalCodeFacility RITCode=\"719\" RITTopic=\"Label\" CanBeUsedForSearch=\"true\">Qualité Tourisme</RITInternalCodeFacility>\n                    <RITInternalCodeFacility RITCode=\"12004\" RITTopic=\"Les Envies\" RITTopicID=\"21\" CanBeUsedForSearch=\"true\" CanBeUsedInHotelDescription=\"true\">sport</RITInternalCodeFacility>\n                    <Description Language=\"FR\" CreatorID=\"1706\">\n                        <Text Language=\"FR\">desc Cinema chaine</Text>\n                    </Description>\n                </RITInternalCodesFacilities>\n                <MinMaxRates CurrencyCode=\"EUR\" MinRate=\"38.00\" MaxRate=\"50.00\" />\n                <MinMaxRatesBreakfast CurrencyCode=\"EUR\" MinRate=\"8.00\" />\n                <MinMaxRatesMenu CurrencyCode=\"EUR\" MinRate=\"15.00\" MaxRate=\"35.00\" />\n                <MinMaxRatesChildMenu CurrencyCode=\"EUR\" MinRate=\"10.00\" MaxRate=\"10.00\" />\n                <MinMaxRatesHalfBoard CurrencyCode=\"EUR\" MinRate=\"42.00\" MaxRate=\"50.00\" />\n                <MinMaxRatesBusinessStopover CurrencyCode=\"EUR\" MinRate=\"52.00\" MaxRate=\"52.00\" />\n                <MinMaxRatesSoilMenu CurrencyCode=\"EUR\" MinRate=\"20.00\" MaxRate=\"20.00\" />\n                <RITZoneIdCodes>\n                    <RITZoneIdCode ZoneIdLevel=\"0\" ZoneIdValue=\"0\">\n                        <Name LangCode=\"EN\">WORLD</Name>\n                        <Name LangCode=\"FR\">MONDE</Name>\n                    </RITZoneIdCode>\n                    <RITZoneIdCode ZoneIdLevel=\"1\" ZoneIdValue=\"1\">\n                        <Name LangCode=\"EN\">EUROPE</Name>\n                        <Name LangCode=\"FR\">EUROPE</Name>\n                    </RITZoneIdCode>\n                    <RITZoneIdCode ZoneIdLevel=\"2\" ZoneIdValue=\"11\">\n                        <Name LangCode=\"EN\">FRANCE</Name>\n                        <Name LangCode=\"FR\">FRANCE</Name>\n                    </RITZoneIdCode>\n                    <RITZoneIdCode ZoneIdLevel=\"3\" ZoneIdValue=\"121\">\n                        <Name LangCode=\"FR\">LANGUEDOC ROUSSILLON</Name>\n                    </RITZoneIdCode>\n                    <RITZoneIdCode ZoneIdLevel=\"4\" ZoneIdValue=\"1130\">\n                        <Name LangCode=\"FR\">30-GARD</Name>\n                    </RITZoneIdCode>\n                    <RITZoneIdCode ZoneIdLevel=\"5\" ZoneIdValue=\"6291\">\n                        <Name LangCode=\"FR\">BARJAC</Name>\n                    </RITZoneIdCode>\n                </RITZoneIdCodes>\n                <ServiceAdditionalProperties>\n                    <ServiceAdditionalProperty AllowOptionPartner=\"true\" AllowPartnerModifPrice=\"false\" Exists=\"true\" InvCode=\"2\" IsIncludedInRoomPrice=\"false\" IsOverwriteRoomPrice=\"false\">\n                        <OffersAssignment>\n                            <OfferAssignment InvTypeCode=\"184493-502259\" RatePlanCode=\"278-0\" />\n                            <OfferAssignment InvTypeCode=\"184493-502259\" RatePlanCode=\"278-98556\" />\n                            <OfferAssignment InvTypeCode=\"184493-502259\" RatePlanCode=\"278-98558\" />\n                            <OfferAssignment InvTypeCode=\"184493-502259\" RatePlanCode=\"278-98559\" />\n                            <OfferAssignment InvTypeCode=\"184493-502260\" RatePlanCode=\"278-0\" />\n                            <OfferAssignment InvTypeCode=\"184493-502260\" RatePlanCode=\"278-98556\" />\n                            <OfferAssignment InvTypeCode=\"184493-502260\" RatePlanCode=\"278-98558\" />\n                            <OfferAssignment InvTypeCode=\"184493-502260\" RatePlanCode=\"278-98559\" />\n                            <OfferAssignment InvTypeCode=\"184493-502261\" RatePlanCode=\"278-0\" />\n                            <OfferAssignment InvTypeCode=\"184493-502261\" RatePlanCode=\"278-98556\" />\n                            <OfferAssignment InvTypeCode=\"184493-502261\" RatePlanCode=\"278-98558\" />\n                            <OfferAssignment InvTypeCode=\"184493-502261\" RatePlanCode=\"278-98559\" />\n                        </OffersAssignment>\n                        <MandatoryStatus AlwaysMandatory=\"false\" />\n                        <OccupancyValidity FirstPax=\"1\" IsForAdult=\"true\" IsForChild=\"true\" IsForInfant=\"true\" IsPricePerPax=\"true\" RequestPax=\"true\" />\n                        <NightConstraint>\n                            <ClassicService IsPricePerNight=\"true\" RequestNight=\"false\" />\n                        </NightConstraint>\n                    </ServiceAdditionalProperty>\n                </ServiceAdditionalProperties>\n            </TPA_Extensions>\n        </HotelDescriptiveContent>\n    </HotelDescriptiveContents>\n</OTA_HotelDescriptiveContentNotifRQ>"
						},
						"url": {
							"raw": "{{schema}}{{host}}{{path}}/api/ext/xml/reservit/v1",
							"host": [
								"{{schema}}{{host}}{{path}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"reservit",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "hotelDescription - min",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "action",
								"type": "text",
								"value": "OTA_HotelDescriptiveContentNotifRQ"
							},
							{
								"key": "service",
								"type": "text",
								"value": "HotelBooking"
							},
							{
								"description": "CID-<CPAID><Compteur>-<RandomNumber>",
								"key": "conversationid",
								"type": "text",
								"value": "CID-SMARTBOX123-123456789"
							},
							{
								"description": "CID-<CPAID><Compteur>-<RandomNumber>",
								"key": "messageid",
								"type": "text",
								"value": "CID-SMARTBOX123-123456789"
							},
							{
								"key": "cpaid",
								"type": "text",
								"value": "SMARTBOX"
							},
							{
								"key": "from",
								"type": "text",
								"value": "SMARTBOX"
							},
							{
								"key": "to",
								"type": "text",
								"value": "ritota"
							},
							{
								"description": "dynamic value",
								"key": "Content-Length",
								"type": "text",
								"value": "0",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "text/xml;charset=UTF-8"
							},
							{
								"key": "Cache-Control",
								"type": "text",
								"value": "no-cache"
							},
							{
								"key": "Pragma",
								"type": "text",
								"value": "no-cache"
							},
							{
								"description": "base64(reservithotel:password)",
								"key": "Authorization",
								"type": "text",
								"value": "cmVzZXJ2aXRob3RlbDpwYXNzd29yZA=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>      \n<OTA_HotelDescriptiveContentNotifRQ EchoToken=\"E1542362272\" TimeStamp=\"2007-01-30T17:34:05.352+01:00\" Version=\"2006\" PrimaryLangID=\"en\">\n    <HotelDescriptiveContents ChainCode=\"12\" HotelCode=\"1052\" BrandName=\"RESERVIT\" BrandCode=\"12\">\n    </HotelDescriptiveContents>\n</OTA_HotelDescriptiveContentNotifRQ>"
						},
						"url": {
							"raw": "{{schema}}{{host}}{{path}}/api/ext/xml/reservit/v1",
							"host": [
								"{{schema}}{{host}}{{path}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"reservit",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "hotelStatus - ignored",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4884c2b3-f50e-4dc4-8419-574cd30c07f0",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "action",
								"value": "OTA_HotelSummaryNotifRQ",
								"type": "text"
							},
							{
								"key": "service",
								"value": "HotelBooking",
								"type": "text"
							},
							{
								"key": "conversationid",
								"value": "CID-SMARTBOX123-123456789",
								"type": "text"
							},
							{
								"key": "messageid",
								"value": "CID-SMARTBOX123-123456789",
								"type": "text"
							},
							{
								"key": "cpaid",
								"value": "SMARTBOX",
								"type": "text"
							},
							{
								"key": "from",
								"value": "SMARTBOX",
								"type": "text"
							},
							{
								"key": "to",
								"value": "ritota",
								"type": "text"
							},
							{
								"key": "Content-Length",
								"value": "0",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "text/xml;charset=UTF-8",
								"type": "text"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "text"
							},
							{
								"key": "Pragma",
								"value": "no-cache",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "cmVzZXJ2aXRob3RlbDpwYXNzd29yZA==",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>      \n<OTA_HotelSummaryNotifRQ EchoToken=\"132465#abc\" SequenceNmbr=\"1\" TimeStamp=\"2005-08-17T09:30:47-05:00\" Target=\"Production\" Version=\"2002A.T12 \" PrimaryLangID=\"en\" HotelCode=\"1052\" ChainCode=\"12\">\n    <HotelSummaryMessages>\n        <HotelSummaryMessage StatusType=\"Open\" ArrivalsOnlyFlag=\"false\">\n            <RateMin Amount=\"100\" CurrencyCode=\"EUR\" />\n            <RateMax Amount=\"250\" CurrencyCode=\"EUR\" />\n        </HotelSummaryMessage>\n    </HotelSummaryMessages>\n</OTA_HotelSummaryNotifRQ>"
						},
						"url": {
							"raw": "{{schema}}{{host}}{{path}}/api/ext/xml/reservit/v1",
							"host": [
								"{{schema}}{{host}}{{path}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"reservit",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "accomodations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c15b678a-9c9d-45cb-81a8-aae3b6749106",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "action",
								"value": "OTA_HotelInvNotifRQ",
								"type": "text"
							},
							{
								"key": "service",
								"value": "HotelBooking",
								"type": "text"
							},
							{
								"key": "conversationid",
								"value": "CID-SMARTBOX123-123456789",
								"type": "text"
							},
							{
								"key": "messageid",
								"value": "CID-SMARTBOX123-123456789",
								"type": "text"
							},
							{
								"key": "cpaid",
								"value": "SMARTBOX",
								"type": "text"
							},
							{
								"key": "from",
								"value": "SMARTBOX",
								"type": "text"
							},
							{
								"key": "to",
								"value": "ritota",
								"type": "text"
							},
							{
								"key": "Content-Length",
								"value": "0",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "text/xml;charset=UTF-8",
								"type": "text"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "text"
							},
							{
								"key": "Pragma",
								"value": "no-cache",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "cmVzZXJ2aXRob3RlbDpwYXNzd29yZA==",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelInvNotifRQ AltLangID=\"FR\" EchoToken=\"E475060469\" PrimaryLangID=\"EN\" RetransmissionIndicator=\"true\" SequenceNmbr=\"1\" Target=\"Production\" TimeStamp=\"2008-12-01T10:18:35.094+01:00\" TransactionIdentifier=\"Rooms\" TransactionStatusCode=\"Start\" Version=\"2008\">\n    <SellableProducts xmlns=\"http://www.opentravel.org/OTA/2008/01\" ChainCode=\"2\" HotelCode=\"257090\">\n        <SellableProduct InvGroupingCode=\"197731\" InvNotifType=\"New\" InvStatusType=\"Initial\" IsRoom=\"true\">\n            <GuestRoom>\n                <Occupancy MaxOccupancy=\"2\" MinOccupancy=\"2\" />\n                <Room RoomTypeCode=\"197731-537168\" />\n                <Description>\n                    <Text Language=\"de\">CHAMBRE 2 PERS EN TWIN : CHAMBRE 2 PERS EN TWIN</Text>\n                    <Text Language=\"nl\">CHAMBRE 2 PERS EN TWIN : CHAMBRE 2 PERS EN TWIN</Text>\n                    <Text Language=\"it\">CHAMBRE 2 PERS EN TWIN : CHAMBRE 2 PERS EN TWIN</Text>\n                    <Text Language=\"es\">CHAMBRE 2 PERS EN TWIN : CHAMBRE 2 PERS EN TWIN</Text>\n                    <Text Language=\"en\">CHAMBRE 2 PERS EN TWIN : CHAMBRE 2 PERS EN TWIN</Text>\n                    <Text Language=\"fr\">CHAMBRE 2 PERS EN TWIN : CHAMBRE 2 PERS EN TWIN</Text>\n                </Description>\n            </GuestRoom>\n            <Description>\n                <Text Language=\"Reservit\">NbPaxBasisPrice=2</Text>\n                <Text Language=\"Reservit\">MaxNumAdults=2</Text>\n                <Text Language=\"Reservit\">MaxNumChildren=2</Text>\n                <Text Language=\"Reservit\">MaxNumInfants=99</Text>\n                <Text Language=\"Reservit\">MaxNumJuniors=99</Text>\n                <Text Language=\"Reservit\">MaxSeniors=99</Text>\n                <Text Language=\"Reservit\">MaxPaxWithoutInfants=2</Text>\n                <Text Language=\"Reservit\">FreeChild=0</Text>\n                <Text Language=\"Reservit\">FreeInfant=0</Text>\n                <Text Language=\"Reservit\">FreeJunior=0</Text>\n                <Text Language=\"Reservit\">MinNight=0</Text>\n                <Text Language=\"Reservit\">MaxNight=0</Text>\n                <Text Language=\"Reservit\">PricePerPax=0</Text>\n                <Text Language=\"Reservit\">Services=BREAKFAST</Text>\n                <Text Language=\"Reservit\">Services=HALFBOARD</Text>\n                <Text Language=\"Reservit\">Services=FULLBOARD</Text>\n                <Text Language=\"Reservit\">DOWBeginPermitted=Mo1Tu1We1Th1Fr1Sa1Su1</Text>\n                <Text Language=\"Reservit\">PricePerStay=0</Text>\n                <Text Language=\"de\">CHAMBRE 2 LITS : CHAMBRE 2 LITS</Text>\n                <Text Language=\"nl\">CHAMBRE 2 LITS : CHAMBRE 2 LITS</Text>\n                <Text Language=\"it\">CHAMBRE 2 LITS : CHAMBRE 2 LITS</Text>\n                <Text Language=\"es\">CHAMBRE 2 LITS : CHAMBRE 2 LITS</Text>\n                <Text Language=\"en\">CHAMBRE 2 LITS : CHAMBRE 2 LITS</Text>\n                <Text Language=\"fr\">CHAMBRE 2 LITS : CHAMBRE 2 LITS</Text>\n            </Description>\n        </SellableProduct>\n        <SellableProduct InvGroupingCode=\"70549\" InvNotifType=\"New\" InvStatusType=\"Initial\" IsRoom=\"true\">\n            <GuestRoom>\n                <Occupancy MaxOccupancy=\"4\" MinOccupancy=\"4\" />\n                <Room RoomTypeCode=\"70549-187912\" />\n                <Description>\n                    <Text Language=\"de\">CHAMBRE QUADRUPLE* : CHAMBRE QUADRUPLE*</Text>\n                    <Text Language=\"nl\">CHAMBRE QUADRUPLE* : CHAMBRE QUADRUPLE*</Text>\n                    <Text Language=\"it\">CHAMBRE QUADRUPLE* : CHAMBRE QUADRUPLE*</Text>\n                    <Text Language=\"es\">CHAMBRE QUADRUPLE* : CHAMBRE QUADRUPLE*</Text>\n                    <Text Language=\"en\">CHAMBRE QUADRUPLE* : CHAMBRE QUADRUPLE*</Text>\n                    <Text Language=\"fr\">CHAMBRE QUADRUPLE* : CHAMBRE QUADRUPLE*</Text>\n                </Description>\n            </GuestRoom>\n            <Description>\n                <Text Language=\"Reservit\">NbPaxBasisPrice=4</Text>\n                <Text Language=\"Reservit\">MaxNumAdults=4</Text>\n                <Text Language=\"Reservit\">MaxNumChildren=3</Text>\n                <Text Language=\"Reservit\">MaxNumInfants=99</Text>\n                <Text Language=\"Reservit\">MaxNumJuniors=99</Text>\n                <Text Language=\"Reservit\">MaxSeniors=99</Text>\n                <Text Language=\"Reservit\">MaxPaxWithoutInfants=4</Text>\n                <Text Language=\"Reservit\">FreeChild=0</Text>\n                <Text Language=\"Reservit\">FreeInfant=0</Text>\n                <Text Language=\"Reservit\">FreeJunior=0</Text>\n                <Text Language=\"Reservit\">MinNight=0</Text>\n                <Text Language=\"Reservit\">MaxNight=0</Text>\n                <Text Language=\"Reservit\">PricePerPax=0</Text>\n                <Text Language=\"Reservit\">Services=BREAKFAST</Text>\n                <Text Language=\"Reservit\">Services=HALFBOARD</Text>\n                <Text Language=\"Reservit\">Services=FULLBOARD</Text>\n                <Text Language=\"Reservit\">DOWBeginPermitted=Mo1Tu1We1Th1Fr1Sa1Su1</Text>\n                <Text Language=\"Reservit\">PricePerStay=0</Text>\n                <Text Language=\"de\">CHAMBRE QUADRUPLE : CHAMBRE QUADRUPLE</Text>\n                <Text Language=\"nl\">CHAMBRE QUADRUPLE : CHAMBRE QUADRUPLE</Text>\n                <Text Language=\"it\">CHAMBRE QUADRUPLE : CHAMBRE QUADRUPLE</Text>\n                <Text Language=\"es\">CHAMBRE QUADRUPLE : CHAMBRE QUADRUPLE</Text>\n                <Text Language=\"en\">CHAMBRE QUADRUPLE : CHAMBRE QUADRUPLE</Text>\n                <Text Language=\"fr\">CHAMBRE QUADRUPLE : CHAMBRE QUADRUPLE</Text>\n            </Description>\n        </SellableProduct>\n    </SellableProducts>\n</OTA_HotelInvNotifRQ>"
						},
						"url": {
							"raw": "{{schema}}{{host}}{{path}}/api/ext/xml/reservit/v1",
							"host": [
								"{{schema}}{{host}}{{path}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"reservit",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "inventories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6d4e44c-1dfd-4dbe-8de9-82df22c5274b",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "action",
								"value": "OTA_HotelInvCountNotifRQ",
								"type": "text"
							},
							{
								"key": "service",
								"value": "HotelBooking",
								"type": "text"
							},
							{
								"key": "conversationid",
								"value": "CID-SMARTBOX123-123456789",
								"type": "text"
							},
							{
								"key": "messageid",
								"value": "CID-SMARTBOX123-123456789",
								"type": "text"
							},
							{
								"key": "cpaid",
								"value": "SMARTBOX",
								"type": "text"
							},
							{
								"key": "from",
								"value": "SMARTBOX",
								"type": "text"
							},
							{
								"key": "to",
								"value": "ritota",
								"type": "text"
							},
							{
								"key": "Content-Length",
								"value": "0",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "text/xml;charset=UTF-8",
								"type": "text"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "text"
							},
							{
								"key": "Pragma",
								"value": "no-cache",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "cmVzZXJ2aXRob3RlbDpwYXNzd29yZA==",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelInvCountNotifRQ EchoToken=\"132465#abc\" SequenceNmbr=\"1\" TimeStamp=\"2018-08-17T09:30:47-05:00\" Target=\"Production\" Version=\"2002A.T12\" PrimaryLangID=\"en\">\n    <InvCounts ChainCode=\"12\" HotelCode=\"1052\">\n        <Inventory>\n            <StatusApplicationControl InvBlockCodeApply=\"DoesNotApply\" Start=\"2018-10-15\" End=\"2018-10-28\" Mon=\"1\" Tue=\"1\" Weds=\"1\" Thur=\"1\" Fri=\"0\" Sat=\"0\" Sun=\"0\" RatePlanCode=\"10\" InvTypeCode=\"70546-187903\" IsRoom=\"1\" />\n            <InvCount CountType=\"Physical\" Count=\"10\" />\n        </Inventory>\n    </InvCounts>\n</OTA_HotelInvCountNotifRQ>"
						},
						"url": {
							"raw": "{{schema}}{{host}}{{path}}/api/ext/xml/reservit/v1",
							"host": [
								"{{schema}}{{host}}{{path}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"reservit",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "rates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e771bb7a-5f41-4fd2-a1ad-a96e97ed44b8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "action",
								"value": "OTA_HotelRateAmountNotifRQ",
								"type": "text"
							},
							{
								"key": "service",
								"value": "HotelBooking",
								"type": "text"
							},
							{
								"key": "conversationid",
								"value": "CID-SMARTBOX123-123456789",
								"type": "text"
							},
							{
								"key": "messageid",
								"value": "CID-SMARTBOX123-123456789",
								"type": "text"
							},
							{
								"key": "cpaid",
								"value": "SMARTBOX",
								"type": "text"
							},
							{
								"key": "from",
								"value": "SMARTBOX",
								"type": "text"
							},
							{
								"key": "to",
								"value": "ritota",
								"type": "text"
							},
							{
								"key": "Content-Length",
								"value": "0",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "text/xml;charset=UTF-8",
								"type": "text"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "text"
							},
							{
								"key": "Pragma",
								"value": "no-cache",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "cmVzZXJ2aXRob3RlbDpwYXNzd29yZA==",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelRateAmountNotifRQ>\n  <RateAmountMessages HotelCode = \"1052\">\n    <RateAmountMessage>\n      <StatusApplicationControl RatePlanCode = \"SBX\" InvTypeCode = \"70546-187903\" IsRoom = \"true\"/>\n      <Rates>\n        <Rate Start = \"2018-10-01\" End = \"2018-10-03\" CurrencyCode = \"EUR\">\n          <BaseByGuestAmts>\n            <BaseByGuestAmt AmountAfterTax = \"140\"/>\n          </BaseByGuestAmts>\n        </Rate>\n        <Rate Start = \"2018-10-04\" End = \"2018-10-07\" CurrencyCode = \"EUR\">\n          <BaseByGuestAmts>\n            <BaseByGuestAmt AmountAfterTax = \"145\"/>\n          </BaseByGuestAmts>\n        </Rate>\n      </Rates>\n    </RateAmountMessage>\n  </RateAmountMessages>\n</OTA_HotelRateAmountNotifRQ>"
						},
						"url": {
							"raw": "{{schema}}{{host}}{{path}}/api/ext/xml/reservit/v1",
							"host": [
								"{{schema}}{{host}}{{path}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"reservit",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "pricingRules - ignored",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cb54a6a6-48e6-4513-b3f5-54280d1c61c7",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "action",
								"value": "OTA_HotelBookingRuleNotifRQ",
								"type": "text"
							},
							{
								"key": "service",
								"value": "HotelBooking",
								"type": "text"
							},
							{
								"key": "conversationid",
								"value": "CID-SMARTBOX123-123456789",
								"type": "text"
							},
							{
								"key": "messageid",
								"value": "CID-SMARTBOX123-123456789",
								"type": "text"
							},
							{
								"key": "cpaid",
								"value": "SMARTBOX",
								"type": "text"
							},
							{
								"key": "from",
								"value": "SMARTBOX",
								"type": "text"
							},
							{
								"key": "to",
								"value": "ritota",
								"type": "text"
							},
							{
								"key": "Content-Length",
								"value": "0",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "text/xml;charset=UTF-8",
								"type": "text"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "text"
							},
							{
								"key": "Pragma",
								"value": "no-cache",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "cmVzZXJ2aXRob3RlbDpwYXNzd29yZA==",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelBookingRuleNotifRQ EchoToken=\"132465#abc\" SequenceNmbr=\"1\" TimeStamp=\"2014-02-17T09:30:47-05:00\" Target=\"Production\" Version=\"2008\" PrimaryLangID=\"en\">\n    <RuleMessages ChainCode=\"2\" HotelCode=\"1523\">\n        <RuleMessage>\n            <BookingRules>\n                <BookingRule MinAdvancedBookingOffset=\"P1Y2M3DT10H30M\">\n                    <AcceptableGuarantees>\n                        <AcceptableGuarantee RetributionType=\"ResNotGuaranteed\" GuaranteePolicyType=\"GuaranteesRequired\">\n                            <Deadline OffsetTimeUnit=\"Hour\" OffsetUnitMultiplier=\"21\" />\n                            <GuaranteeDescription>\n                                <Text Language=\"en\">The maximum check\n                            in time is 21 hour.</Text>\n                            </GuaranteeDescription>\n                        </AcceptableGuarantee>\n                    </AcceptableGuarantees>\n                    <CancelPenalties>\n                        <CancelPenalty>\n                            <PenaltyDescription>\n                                <Text Language=\"en\">For a reservation\n                            guaranted by credit card,\n                            cancellation without penalty up to 3\n                            days before the arrival date (72\n                            hours). Passed 3 days the first\n                            night will be charged.</Text>\n                            </PenaltyDescription>\n                        </CancelPenalty>\n                    </CancelPenalties>\n                    <RequiredPayments>\n                        <GuaranteePayment RetributionType=\"ResAutoCancelled\">\n                            <AcceptedPayments>\n                                <AcceptedPayment>\n                                    <PaymentCard CardCode=\"VA\" CardNumber=\"0000000000000000\" ExpireDate=\"0101\" />\n                                </AcceptedPayment>\n                                <AcceptedPayment>\n                                    <BankAcct AcctType=\"Check\" />\n                                </AcceptedPayment>\n                            </AcceptedPayments>\n                        </GuaranteePayment>\n                    </RequiredPayments>\n                    <LengthsOfStay>\n                        <LengthOfStay Time=\"0\" TimeUnit=\"Year\" />\n                    </LengthsOfStay>\n                </BookingRule>\n            </BookingRules>\n        </RuleMessage>\n    </RuleMessages>\n</OTA_HotelBookingRuleNotifRQ>"
						},
						"url": {
							"raw": "{{schema}}{{host}}{{path}}/api/ext/xml/reservit/v1",
							"host": [
								"{{schema}}{{host}}{{path}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"reservit",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SBX API - Integration",
			"item": [
				{
					"name": "PIng",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n  <soap:Body>\n  \t\n\t<ota:OTA_PingRQ EchoToken=\"123\" Version=\"1.0\" TimeStamp=\"2016-05-26T11:11:50-04:00\" xmlns=\"http://www.opentravel.org/OTA/2003/05\">\n      <ota:EchoData>Are you there?</ota:EchoData>\n\t</ota:OTA_PingRQ>\n\t\n  </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "HotelAvailRQ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5da26ced-ce04-42da-8990-85b91cfa04e2",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "15600f50-796a-478d-bd1e-7dc0e31a8009",
								"exec": [
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"var hotelcode = \"76876876\";",
									"var experienceid = \"3453455\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"var hotelcode = \"00142835\";",
									"var experienceid = \"115623\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"var hotelcode = \"00019091\";",
									"var experienceid = \"623787\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"ExperienceId\",experienceid)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelAvailRQ>\n\t\t<ota:AvailRequestSegments>\n\t\t\t<ota:AvailRequestSegment AvailReqType = \"Room\">\n\t\t\t\t<ota:HotelSearchCriteria>\n\t\t\t\t\t<ota:Criterion>\n\t\t\t\t\t\t<ota:HotelRef HotelCode=\"{{HotelCode}}\" />\n\t\t\t\t\t</ota:Criterion>\n\t\t\t\t</ota:HotelSearchCriteria>\n\t\t\t</ota:AvailRequestSegment>\n\t\t</ota:AvailRequestSegments>\n\t</ota:OTA_HotelAvailRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "HotelRateAmountNotif",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e771bb7a-5f41-4fd2-a1ad-a96e97ed44b8",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "effb7fac-8a81-4954-923a-9b41a5d78ebe",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"var month = date2.getMonth() + 1;",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 71);",
									"var month = date3.getMonth() + 1;",
									"var startdate2 = date3.getFullYear() + \"-\" + month + \"-\" + date3.getDate();",
									"",
									"var date4 = new Date();",
									"date4.setDate(date4.getDate() + 90);",
									"var month = date4.getMonth() + 1;",
									"var enddate2 = date4.getFullYear() + \"-\" + month + \"-\" + date4.getDate();",
									"",
									"var Price1 = \"120\";",
									"var Price2 = \"130\";",
									"var Price3 = \"90\";",
									"var Price4 = \"95\";",
									"postman.setEnvironmentVariable(\"Price1\", Price1);",
									"postman.setEnvironmentVariable(\"Price2\", Price2);",
									"postman.setEnvironmentVariable(\"Price3\", Price3);",
									"postman.setEnvironmentVariable(\"Price4\", Price4);",
									"postman.setEnvironmentVariable(\"StartDate1\",startdate1);",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate1);",
									"postman.setEnvironmentVariable(\"StartDate2\",startdate2);",
									"postman.setEnvironmentVariable(\"EndDate2\",enddate2);",
									"",
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var RoomTypeCode1 = \"09836\";",
									"var RoomTypeCode2 = \"09868\";",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"} ",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var RoomTypeCode1 = \"321942\";",
									"var RoomTypeCode2 = \"283023\";",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"393333\";",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n         <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelRateAmountNotifRQ>\n\t  <ota:RateAmountMessages HotelCode = \"{{HotelCode}}\">\n\t    <ota:RateAmountMessage>\n\t      <ota:StatusApplicationControl RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode1}}\" IsRoom = \"true\"/>\n\t      <ota:Rates>\n\t        <ota:Rate Start = \"{{StartDate1}}\" End = \"{{EndDate1}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"{{Price1}}\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t        <ota:Rate Start = \"{{StartDate2}}\" End = \"{{EndDate2}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"{{Price2}}\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t      </ota:Rates>\n\t    </ota:RateAmountMessage>\n\t    <ota:RateAmountMessage>\n\t      <ota:StatusApplicationControl RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode2}}\" IsRoom = \"true\"/>\n\t      <ota:Rates>\n\t        <ota:Rate Start = \"{{StartDate1}}\" End = \"{{EndDate1}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"{{Price3}}\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t        <ota:Rate Start = \"{{StartDate2}}\" End = \"{{EndDate2}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"{{Price4}}\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t      </ota:Rates>\n\t    </ota:RateAmountMessage>\n\t  </ota:RateAmountMessages>\n\t</ota:OTA_HotelRateAmountNotifRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Update rates for a room"
					},
					"response": []
				},
				{
					"name": "HotelRatePlanRQ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9766c4eb-37d2-4cbb-b655-a27072593f93",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 90);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6675d827-404e-4838-8dae-2ad642239f65",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var price1 = postman.getEnvironmentVariable('Price1');",
									"var price2 = postman.getEnvironmentVariable('Price2');",
									"var price3 = postman.getEnvironmentVariable('Price3');",
									"var price4 = postman.getEnvironmentVariable('Price4');",
									"",
									"var roomtype1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['0']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['40']['$']['InvTypeCode'];",
									"var getprice1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['0']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax'];",
									"var getprice2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['20']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax'];",
									"var getprice3 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['40']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax'];",
									"var getprice4 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['60']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Read availabilties - Contains first Roomtypecode: \"+RoomTypeCode1+\" as expected\";",
									"pm.test(string, function () {",
									"expected = RoomTypeCode1;",
									"pm.expect(roomtype1).to.include(expected);",
									"});",
									"",
									"string = \"Read availabilties - Contains second Roomtypecode: \"+RoomTypeCode2+\" as expected\"",
									"pm.test(string, function () {",
									"expected = RoomTypeCode2;",
									"pm.expect(roomtype2).to.include(expected);",
									"});",
									"",
									"string = \"Read room rates for first Roomtypecode: \"+RoomTypeCode1+\" - Same for first 20 consecutive days as expected\";",
									"pm.test(string, function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=0;i<20; i++)",
									"{",
									"if(getprice1 == price1 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"string = \"Read room rates for first Roomtypecode: \"+RoomTypeCode1+\" - Same for 21 to 40 days as expected\"",
									"pm.test(string, function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=20;i<40; i++)",
									"{",
									"if(getprice2 == price2 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"string = \"Read room rates for second Roomtypecode: \"+RoomTypeCode2+\" - Same for first 20 consecutive days as expected\"",
									"pm.test(string, function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=40;i<60; i++)",
									"{",
									"if(getprice3 == price3 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"string = \"Read room rates for second Roomtypecode: \"+RoomTypeCode2+\" - Same for 21 to 40 days as expected\";",
									"pm.test(string, function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=60;i<80; i++)",
									"{",
									"if(getprice4 == price4 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelRatePlanRQ EchoToken=\"echo\"> \n\t\t<ota:RatePlans>\n\t\t\t<ota:RatePlan>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\"/>\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/> \n\t\t\t\t<ota:RatePlanCandidates>\n\t\t\t\t\t<ota:RatePlanCandidate RatePlanCode = \"SBX\"/> \n\t\t\t\t</ota:RatePlanCandidates>\n\t\t\t</ota:RatePlan>\n\t\t</ota:RatePlans>\n\t</ota:OTA_HotelRatePlanRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get rates for the given partner between a start and end date"
					},
					"response": []
				},
				{
					"name": "HotelInvCountNotif",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99da692b-ca4a-43da-ac4f-68a244d563f3",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8e968c46-a238-4ef9-a89b-4c87c9760aa6",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									"",
									"var count1 = 20;",
									"var count2 = 15;",
									"",
									"postman.setEnvironmentVariable(\"count1\", count1);",
									"postman.setEnvironmentVariable(\"count2\", count2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n          <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n<soap:Body>\n\n<ota:OTA_HotelInvCountNotifRQ>\n  <ota:Inventories HotelCode = \"{{HotelCode}}\">\n  \n    <ota:Inventory>\n      <ota:StatusApplicationControl Start = \"{{StartDate}}\" End = \"{{EndDate}}\" RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode1}}\" IsRoom = \"true\"/>\n      <ota:InvCounts>\n        <ota:InvCount CountType = \"2\" Count = \"{{count1}}\"/>\n      </ota:InvCounts>\n    </ota:Inventory>\n    \n    <ota:Inventory>\n      <ota:StatusApplicationControl Start = \"{{StartDate}}\" End = \"{{EndDate}}\" RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode2}}\" IsRoom = \"true\"/>\n      <ota:InvCounts>\n        <ota:InvCount CountType = \"2\" Count = \"{{count2}}\"/>\n      </ota:InvCounts>\n    </ota:Inventory>\n    \n  </ota:Inventories>\n</ota:OTA_HotelInvCountNotifRQ>\n\n</soap:Body>\n</soap:Envelope>\n"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Update availability"
					},
					"response": []
				},
				{
					"name": "HotelInvCountRQ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "598c606d-c9c5-436a-b8c5-40ddeae1a1b4",
								"exec": [
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate);",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c5ee397-460b-4d7e-b249-02f3a250410a",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var count1 = postman.getEnvironmentVariable('count1');",
									"var count2 = postman.getEnvironmentVariable('count2');",
									"",
									"var roomtype1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var getcount1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"var getcount2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains HoteCode value\", function () {",
									"expected = HotelCode;",
									"  pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains first Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode1;",
									"pm.expect(roomtype1).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains second Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode2;",
									"pm.expect(roomtype2).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties for first Roomtypecode - Available for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=0;i<20; i++)",
									"{",
									"if(getcount1 == count1 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties for second Roomtypecode - Available for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=20;i<40; i++)",
									"{",
									"if(getcount2 == count2 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelInvCountRQ>\n\t\t<ota:HotelInvCountRequests>\n\t\t\t<ota:HotelInvCountRequest>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\" />\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/>\n\t\t\t\t<ota:RoomTypeCandidates>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode1}}\"/>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode2}}\"/>\n\t\t\t\t</ota:RoomTypeCandidates>\n\t\t\t</ota:HotelInvCountRequest>\n\t\t</ota:HotelInvCountRequests>\n\t</ota:OTA_HotelInvCountRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get availability data for a given partner and rooms between start and end date."
					},
					"response": []
				},
				{
					"name": "Push booking - Commit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "240dc66d-4e6c-4965-adbe-7e14cf184e2c",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains status : success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"/*pm.test(\"Contains transaction\", function () {",
									"var expected = \"transaction\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});*/",
									"",
									"pm.test(\"Doesn't contain validation info error message\", function () {",
									"var expected = \"This form should not contain extra fields.\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									"",
									"pm.test(\"Doesn't contain date info error message\", function () {",
									"var expected = \"This value is not valid.\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "82015cff-f2e8-4851-99e5-26675f90be51",
								"exec": [
									"var randomId1 = Math.floor(Math.random() * 200000000);",
									"postman.setEnvironmentVariable(\"randomId1\", randomId1)",
									"",
									"var voucherNumber1 = Math.floor(Math.random() * 20000000);",
									"postman.setEnvironmentVariable(\"voucherNumber1\", voucherNumber1)",
									"",
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 53);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 54);",
									"var month = date3.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date3.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date3.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date3.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date3.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate1 = date3.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate);",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate1);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"TTDNpD3ujbxVSpycMLy3bgJGcPrXCZTRdmcZzmK4\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"wjrhqYajKs6M5ug7ygFDymnLwxc5f97ryhmq9FE7\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"QexP2eYZRwPcyB5x5LjpnqzNw2U4mWDPzat5Fds7\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\",username);",
									"postman.setEnvironmentVariable(\"password\",password);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "QexP2eYZRwPcyB5x5LjpnqzNw2U4mWDPzat5Fds7",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"booking\":{\n      \"partnerCode\":\"{{HotelCode}}\",\n      \"status\":\"Commit\",\n      \"reservationId\":\"RESA-{{randomId1}}\",\n      \"voucherNumber\": \"{{voucherNumber1}}\",\n      \"experienceId\":\"{{ExperienceId}}\",\n      \"createDate\":\"{{Date}}\",\n      \"lastModifyDate\":\"{{Date}}\",\n      \"dateStart\":\"{{StartDate}}\",\n      \"dateEnd\":\"{{EndDate1}}\",\n      \"totalAmount\":200,\n      \"currency\":\"EUR\",\n      \"requests\":\"Something i want to request\",\n      \"comments\":\"Something i need to comment about me and disabilities\",\n      \"roomTypes\":[\n         {\n            \"roomTypeCode\":\"{{RoomTypeCode1}}\",\n            \"totalAmount\":200,\n            \"currency\":\"EUR\",\n            \"rates\":[\n               {\n                  \"date\":\"{{StartDate}}\",\n                  \"amount\":0,\n                  \"currency\":\"EUR\"\n               },\n               {\n                  \"date\":\"{{EndDate}}\",\n                  \"amount\":100,\n                  \"currency\":\"EUR\"\n               }\n            ],\n            \"guests\":[\n               {\n                  \"isMain\":true,\n                  \"age\":23,\n                  \"name\":\"Carles\",\n                  \"surname\":\"Puigdemont\",\n                  \"email\":\"carles.puigdemont@brussels.com\",\n                  \"phone\":\"454325454\",\n                  \"address\":\"Brussels\",\n                  \"city\":\"Brussels\",\n                  \"zip\":\"R9R6+QX\",\n                  \"state\":\"Brussels\",\n                  \"country\":\"be\",\n                  \"countryCode\":\"Belgium\"\n               },\n               {\n                  \"isMain\":false,\n                  \"age\":36,\n                  \"name\":\"Pepito\",\n                  \"surname\":\"Palotes\",\n                  \"email\":\"pepito.palotes@brussels.com\",\n                  \"phone\":\"454325454\",\n                  \"address\":\"Brussels\",\n                  \"city\":\"Brussels\",\n                  \"zip\":\"R9R6+QX\",\n                  \"state\":\"Brussels\",\n                  \"country\":\"be\",\n                  \"countryCode\":\"Belgium\"\n               }\n            ]\n         }\n      ]\n   }\n}"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/PushBookings",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"PushBookings"
							]
						},
						"description": "Get booking data for a given partner between start & end date."
					},
					"response": []
				},
				{
					"name": "Push booking - Commit- Upsell_room",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "240dc66d-4e6c-4965-adbe-7e14cf184e2c",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains status : success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Doesn't contain validation info error message\", function () {",
									"var expected = \"This form should not contain extra fields.\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									"",
									"pm.test(\"Doesn't contain date info error message\", function () {",
									"var expected = \"This value is not valid.\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "82015cff-f2e8-4851-99e5-26675f90be51",
								"exec": [
									"var randomId2 = Math.floor(Math.random() * 200000000);",
									"postman.setEnvironmentVariable(\"randomId2\", randomId2)",
									"",
									"var voucherNumber2 = Math.floor(Math.random() * 20000000);",
									"postman.setEnvironmentVariable(\"voucherNumber2\", voucherNumber2)",
									"",
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 53);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 54);",
									"var month = date3.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date3.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date3.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date3.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date3.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate1 = date3.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate);",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate1);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"TTDNpD3ujbxVSpycMLy3bgJGcPrXCZTRdmcZzmK4\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"wjrhqYajKs6M5ug7ygFDymnLwxc5f97ryhmq9FE7\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"QexP2eYZRwPcyB5x5LjpnqzNw2U4mWDPzat5Fds7\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\",username);",
									"postman.setEnvironmentVariable(\"password\",password);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "QexP2eYZRwPcyB5x5LjpnqzNw2U4mWDPzat5Fds7",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"booking\":{\n      \"partnerCode\":\"{{HotelCode}}\",\n      \"status\":\"Commit\",\n      \"reservationId\":\"RESA-{{randomId2}}\",\n      \"voucherNumber\": \"{{voucherNumber2}}\",\n      \"experienceId\":\"{{ExperienceId}}\",\n      \"createDate\":\"{{Date}}\",\n      \"lastModifyDate\":\"{{Date}}\",\n      \"dateStart\":\"{{StartDate}}\",\n      \"dateEnd\":\"{{EndDate1}}\",\n      \"totalAmount\":100,\n      \"currency\":\"EUR\",\n      \"requests\":\"Something i want to request\",\n      \"comments\":\"Something i need to comment about me and disabilities\",\n      \"roomTypes\":[\n         {\n            \"roomTypeCode\":\"{{RoomTypeCode1}}\",\n            \"totalAmount\":0,\n            \"currency\":\"EUR\",\n            \"rates\":[\n               {\n                  \"date\":\"{{StartDate}}\",\n                  \"amount\":0,\n                  \"currency\":\"EUR\"\n               }\n            ],\n            \"guests\":[\n               {\n                  \"isMain\":true,\n                  \"age\":23,\n                  \"name\":\"Carles\",\n                  \"surname\":\"Puigdemont\",\n                  \"email\":\"carles.puigdemont@brussels.com\",\n                  \"phone\":\"454325454\",\n                  \"address\":\"Brussels\",\n                  \"city\":\"Brussels\",\n                  \"zip\":\"R9R6+QX\",\n                  \"state\":\"Brussels\",\n                  \"country\":\"be\",\n                  \"countryCode\":\"Belgium\"\n               }\n            ]\n         },\n          {\n            \"roomTypeCode\":\"{{RoomTypeCode1}}\",\n            \"totalAmount\":100,\n            \"currency\":\"EUR\",\n            \"rates\":[\n               {\n                  \"date\":\"{{StartDate}}\",\n                  \"amount\":100,\n                  \"currency\":\"EUR\"\n               }\n            ],\n            \"guests\":[\n               {\n                  \"isMain\":true,\n                  \"age\":23,\n                  \"name\":\"Carles\",\n                  \"surname\":\"Puigdemont\",\n                  \"email\":\"carles.puigdemont@brussels.com\",\n                  \"phone\":\"454325454\",\n                  \"address\":\"Brussels\",\n                  \"city\":\"Brussels\",\n                  \"zip\":\"R9R6+QX\",\n                  \"state\":\"Brussels\",\n                  \"country\":\"be\",\n                  \"countryCode\":\"Belgium\"\n               }\n            ]\n         }\n      ]\n   }\n}"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/PushBookings",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"PushBookings"
							]
						},
						"description": "Push booking with Upsell Room"
					},
					"response": []
				},
				{
					"name": "ReadRQ - Bookings(DataType - LastUpdateDate)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "240dc66d-4e6c-4965-adbe-7e14cf184e2c",
								"exec": [
									"var randomId1 = postman.getEnvironmentVariable(\"randomId1\");",
									"var randomId2 = postman.getEnvironmentVariable(\"randomId2\");",
									"var voucherNumber1 = postman.getEnvironmentVariable(\"voucherNumber1\");",
									"var voucherNumber2 = postman.getEnvironmentVariable(\"voucherNumber2\");",
									"",
									"var jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"var agecode = jsonData['env:Envelope']['env:Body']['ns2:OTA_ResRetrieveRS']['ns2:ReservationsList']['ns2:HotelReservation']['0']['ns2:ResGuests']['ns2:ResGuest']['0']['$']['AgeQualifyingCode'];",
									"",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Success\", function () {",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: ReservationsList\", function () {",
									"var expected = \"ReservationsList\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Upsell night Commit booking with Reservation ID in Response body: RESA-\"+randomId1;",
									"pm.test(string, function(){",
									"var expected = \"RESA-\"+randomId1;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});",
									"",
									"var string = \"Contains Upsell Room Commit booking with Reservation ID in Response body: RESA-\"+randomId2;",
									"pm.test(string, function(){",
									"var expected = \"RESA-\"+randomId2;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});",
									"",
									"var string = \"Contains Voucher number 1: \"+voucherNumber1+\" in response\";",
									"pm.test(string, function(){",
									"var expected = voucherNumber1;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});",
									"",
									"var string = \"Contains Voucher number 2: \"+voucherNumber2+\" in response\";",
									"pm.test(string, function(){",
									"var expected = voucherNumber2;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});",
									"",
									"pm.test(\"AgeQuailtyingCode is 10\", function(){",
									"var expected = 10;",
									"pm.expect(agecode).to.include(expected);   ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "82015cff-f2e8-4851-99e5-26675f90be51",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() - 3);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\"+01:00\";",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 2);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\"+01:00\";",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"",
									" setTimeout(function(){",
									"          console.log(\"Sleeping for 5 seconds before next request.\");",
									"  },5000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_ReadRQ>\n\t\t<ota:ReadRequests>\n\t\t\t<ota:HotelReadRequest HotelCode = \"{{HotelCode}}\">\n\t\t\t\t<ota:SelectionCriteria Start = \"{{StartDate}}\" End = \"{{EndDate}}\" DateType = \"LastUpdateDate\"/>\n\t\t\t</ota:HotelReadRequest>\n\t\t</ota:ReadRequests>\n\t</ota:OTA_ReadRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get booking data for a given partner between start & end date based on 'LastUpdateDate'"
					},
					"response": []
				},
				{
					"name": "ReadRQ - Bookings(DataType - CreateDate)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "240dc66d-4e6c-4965-adbe-7e14cf184e2c",
								"exec": [
									"var randomId1 = postman.getEnvironmentVariable(\"randomId1\");",
									"var randomId2 = postman.getEnvironmentVariable(\"randomId2\");",
									"var voucherNumber1 = postman.getEnvironmentVariable(\"voucherNumber1\");",
									"var voucherNumber2 = postman.getEnvironmentVariable(\"voucherNumber2\");",
									"",
									"var jsonData = xml2Json(responseBody);",
									"var agecode = jsonData['env:Envelope']['env:Body']['ns2:OTA_ResRetrieveRS']['ns2:ReservationsList']['ns2:HotelReservation']['0']['ns2:ResGuests']['ns2:ResGuest']['0']['$']['AgeQualifyingCode'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Success\", function () {",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: ReservationsList\", function () {",
									"var expected = \"ReservationsList\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Upsell night Commit booking with Reservation ID in Response body: RESA-\"+randomId1;",
									"pm.test(string, function(){",
									"var expected = \"RESA-\"+randomId1;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});",
									"",
									"var string = \"Contains Upsell Room Commit booking with Reservation ID in Response body: RESA-\"+randomId2;",
									"pm.test(string, function(){",
									"var expected = \"RESA-\"+randomId2;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});",
									"",
									"var string = \"Contains Voucher number 1: \"+voucherNumber1+\" in response\";",
									"pm.test(string, function(){",
									"var expected = voucherNumber1;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});",
									"",
									"var string = \"Contains Voucher number 2: \"+voucherNumber2+\" in response\";",
									"pm.test(string, function(){",
									"var expected = voucherNumber2;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});",
									"",
									"pm.test(\"AgeQuailtyingCode is 10\", function(){",
									"var expected = 10;",
									"pm.expect(agecode).to.include(expected);   ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "82015cff-f2e8-4851-99e5-26675f90be51",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() - 5);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\"+01:00\";",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 1);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\"+01:00\";",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_ReadRQ>\n\t\t<ota:ReadRequests>\n\t\t\t<ota:HotelReadRequest HotelCode = \"{{HotelCode}}\">\n\t\t\t\t<ota:SelectionCriteria Start = \"{{StartDate}}\" End = \"{{EndDate}}\" DateType = \"CreateDate\"/>\n\t\t\t</ota:HotelReadRequest>\n\t\t</ota:ReadRequests>\n\t</ota:OTA_ReadRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get booking data for a given partner between start & end date based on 'CreateDate'"
					},
					"response": []
				},
				{
					"name": "ReadRQ - Bookings(DataType - DepartureDate)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "240dc66d-4e6c-4965-adbe-7e14cf184e2c",
								"exec": [
									"var randomId1 = postman.getEnvironmentVariable(\"randomId1\");",
									"var randomId2 = postman.getEnvironmentVariable(\"randomId2\");",
									"var voucherNumber1 = postman.getEnvironmentVariable(\"voucherNumber1\");",
									"var voucherNumber2 = postman.getEnvironmentVariable(\"voucherNumber2\");",
									"",
									"var jsonData = xml2Json(responseBody);",
									"var agecode = jsonData['env:Envelope']['env:Body']['ns2:OTA_ResRetrieveRS']['ns2:ReservationsList']['ns2:HotelReservation']['0']['ns2:ResGuests']['ns2:ResGuest']['0']['$']['AgeQualifyingCode'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Success\", function () {",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: ReservationsList\", function () {",
									"var expected = \"ReservationsList\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Upsell night Commit booking with Reservation ID in Response body: RESA-\"+randomId1;",
									"pm.test(string, function(){",
									"var expected = \"RESA-\"+randomId1;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});",
									"",
									"var string = \"Contains Upsell Room Commit booking with Reservation ID in Response body: RESA-\"+randomId2;",
									"pm.test(string, function(){",
									"var expected = \"RESA-\"+randomId2;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});",
									"",
									"var string = \"Contains Voucher number 1: \"+voucherNumber1+\" in response\";",
									"pm.test(string, function(){",
									"var expected = voucherNumber1;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});",
									"",
									"var string = \"Contains Voucher number 2: \"+voucherNumber2+\" in response\";",
									"pm.test(string, function(){",
									"var expected = voucherNumber2;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});",
									"",
									"pm.test(\"AgeQuailtyingCode is 10\", function(){",
									"var expected = 10;",
									"pm.expect(agecode).to.include(expected);   ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "82015cff-f2e8-4851-99e5-26675f90be51",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 53);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 55);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_ReadRQ>\n\t\t<ota:ReadRequests>\n\t\t\t<ota:HotelReadRequest HotelCode = \"{{HotelCode}}\">\n\t\t\t\t<ota:SelectionCriteria Start = \"{{StartDate}}\" End = \"{{EndDate}}\" DateType = \"DepartureDate\"/>\n\t\t\t</ota:HotelReadRequest>\n\t\t</ota:ReadRequests>\n\t</ota:OTA_ReadRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get booking data for a given partner between start & end date based on 'DepartureDate'"
					},
					"response": []
				},
				{
					"name": "ReadRQ - Bookings(DataType - ArrivalDate)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "240dc66d-4e6c-4965-adbe-7e14cf184e2c",
								"exec": [
									"var randomId1 = postman.getEnvironmentVariable(\"randomId1\");",
									"var randomId2 = postman.getEnvironmentVariable(\"randomId2\");",
									"var voucherNumber1 = postman.getEnvironmentVariable(\"voucherNumber1\");",
									"var voucherNumber2 = postman.getEnvironmentVariable(\"voucherNumber2\");",
									"",
									"var jsonData = xml2Json(responseBody);",
									"var agecode = jsonData['env:Envelope']['env:Body']['ns2:OTA_ResRetrieveRS']['ns2:ReservationsList']['ns2:HotelReservation']['0']['ns2:ResGuests']['ns2:ResGuest']['0']['$']['AgeQualifyingCode'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Success\", function () {",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"AgeQuailtyingCode is 10\", function(){",
									"var expected = 10;",
									"pm.expect(agecode).to.include(expected);   ",
									"});",
									"",
									"pm.test(\"Contains string: ReservationsList\", function () {",
									"var expected = \"ReservationsList\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Upsell night Commit booking with Reservation ID in Response body: RESA-\"+randomId1;",
									"pm.test(string, function(){",
									"var expected = \"RESA-\"+randomId1;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});",
									"",
									"var string = \"Contains Upsell Room Commit booking with Reservation ID in Response body: RESA-\"+randomId2;",
									"pm.test(string, function(){",
									"var expected = \"RESA-\"+randomId2;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});",
									"",
									"var string = \"Contains Voucher number 1: \"+voucherNumber1+\" in response\";",
									"pm.test(string, function(){",
									"var expected = voucherNumber1;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});",
									"",
									"var string = \"Contains Voucher number 2: \"+voucherNumber2+\" in response\";",
									"pm.test(string, function(){",
									"var expected = voucherNumber2;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "82015cff-f2e8-4851-99e5-26675f90be51",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 50);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 52);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_ReadRQ>\n\t\t<ota:ReadRequests>\n\t\t\t<ota:HotelReadRequest HotelCode = \"{{HotelCode}}\">\n\t\t\t\t<ota:SelectionCriteria Start = \"{{StartDate}}\" End = \"{{EndDate}}\" DateType = \"ArrivalDate\"/>\n\t\t\t</ota:HotelReadRequest>\n\t\t</ota:ReadRequests>\n\t</ota:OTA_ReadRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get booking data for a given partner between start & end date based on 'ArrivalDate'"
					},
					"response": []
				},
				{
					"name": "ReadRQ - Bookings - With Timezone",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "240dc66d-4e6c-4965-adbe-7e14cf184e2c",
								"exec": [
									"var randomId1 = postman.getEnvironmentVariable(\"randomId1\");",
									"var randomId2 = postman.getEnvironmentVariable(\"randomId2\");",
									"var voucherNumber1 = postman.getEnvironmentVariable(\"voucherNumber1\");",
									"var voucherNumber2 = postman.getEnvironmentVariable(\"voucherNumber2\");",
									"",
									"var jsonData = xml2Json(responseBody);",
									"var agecode = jsonData['env:Envelope']['env:Body']['ns2:OTA_ResRetrieveRS']['ns2:ReservationsList']['ns2:HotelReservation']['0']['ns2:ResGuests']['ns2:ResGuest']['0']['$']['AgeQualifyingCode'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Success\", function () {",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: ReservationsList\", function () {",
									"var expected = \"ReservationsList\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Upsell night Commit booking with Reservation ID in Response body: RESA-\"+randomId1;",
									"pm.test(string, function(){",
									"var expected = \"RESA-\"+randomId1;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});",
									"",
									"var string = \"Contains Upsell Room Commit booking with Reservation ID in Response body: RESA-\"+randomId2;",
									"pm.test(string, function(){",
									"var expected = \"RESA-\"+randomId2;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});",
									"",
									"var string = \"Contains Voucher number 1: \"+voucherNumber1+\" in response\";",
									"pm.test(string, function(){",
									"var expected = voucherNumber1;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});",
									"",
									"var string = \"Contains Voucher number 2: \"+voucherNumber2+\" in response\";",
									"pm.test(string, function(){",
									"var expected = voucherNumber2;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});",
									"",
									"pm.test(\"AgeQuailtyingCode is 10\", function(){",
									"var expected = 10;",
									"pm.expect(agecode).to.include(expected);   ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "82015cff-f2e8-4851-99e5-26675f90be51",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() - 5);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date1.getMilliseconds();",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\"+01:00\";",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 1);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date2.getMilliseconds();",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\"+01:00\";",
									"",
									"postman.setEnvironmentVariable(\"UpdatedStartDate\",startdate );",
									"postman.setEnvironmentVariable(\"UpdatedEndDate\",enddate);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_ReadRQ>\n\t\t<ota:ReadRequests>\n\t\t\t<ota:HotelReadRequest HotelCode = \"{{HotelCode}}\">\n\t\t\t\t<ota:SelectionCriteria Start = \"{{UpdatedStartDate}}\" End = \"{{UpdatedEndDate}}\" DateType = \"LastUpdateDate\"/>\n\t\t\t</ota:HotelReadRequest>\n\t\t</ota:ReadRequests>\n\t</ota:OTA_ReadRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get booking data for a given partner when dates are passed with timezone. For Example : 2019-06-28T14:05:17+01:00"
					},
					"response": []
				},
				{
					"name": "Push booking - Cancel",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "240dc66d-4e6c-4965-adbe-7e14cf184e2c",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains status : success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"/*pm.test(\"Contains transaction\", function () {",
									"var expected = \"transaction\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});*/",
									"",
									"pm.test(\"Doesn't contain validation info error message\", function () {",
									"var expected = \"This form should not contain extra fields.\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									"",
									"pm.test(\"Doesn't contain date info error message\", function () {",
									"var expected = \"This value is not valid.\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "82015cff-f2e8-4851-99e5-26675f90be51",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 53);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 54);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date3.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date3.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date3.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date3.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate1 = date3.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate);",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate1);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"TTDNpD3ujbxVSpycMLy3bgJGcPrXCZTRdmcZzmK4\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"wjrhqYajKs6M5ug7ygFDymnLwxc5f97ryhmq9FE7\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"QexP2eYZRwPcyB5x5LjpnqzNw2U4mWDPzat5Fds7\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\",username);",
									"postman.setEnvironmentVariable(\"password\",password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic ZWFpOjE3czhtc0xYS2tNVnkwbVAwQmxUMEJON2JSc01ORUVF",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"booking\":{\n      \"partnerCode\":\"{{HotelCode}}\",\n      \"status\":\"Cancel\",\n      \"reservationId\":\"RESA-{{randomId2}}\",\n      \"voucherNumber\": \"{{voucherNumber2}}\",\n      \"experienceId\":\"{{ExperienceId}}\",\n      \"createDate\":\"{{Date}}\",\n      \"lastModifyDate\":\"{{Date}}\",\n      \"dateStart\":\"{{StartDate}}\",\n      \"dateEnd\":\"{{EndDate1}}\",\n      \"totalAmount\":200,\n      \"currency\":\"EUR\",\n      \"requests\":\"Something i want to request\",\n      \"comments\":\"Something i need to comment about me and disabilities\",\n      \"roomTypes\":[\n         {\n            \"roomTypeCode\":\"{{RoomTypeCode1}}\",\n            \"totalAmount\":200,\n            \"currency\":\"EUR\",\n            \"rates\":[\n               {\n                  \"date\":\"{{StartDate}}\",\n                  \"amount\":0,\n                  \"currency\":\"EUR\"\n               },\n               {\n                  \"date\":\"{{EndDate}}\",\n                  \"amount\":100,\n                  \"currency\":\"EUR\"\n               }\n            ],\n            \"guests\":[\n               {\n                  \"isMain\":true,\n                  \"age\":23,\n                  \"name\":\"Carles\",\n                  \"surname\":\"Puigdemont\",\n                  \"email\":\"carles.puigdemont@brussels.com\",\n                  \"phone\":\"454325454\",\n                  \"address\":\"Brussels\",\n                  \"city\":\"Brussels\",\n                  \"zip\":\"R9R6+QX\",\n                  \"state\":\"Brussels\",\n                  \"country\":\"be\",\n                  \"countryCode\":\"Belgium\"\n               },\n               {\n                  \"isMain\":false,\n                  \"age\":36,\n                  \"name\":\"Pepito\",\n                  \"surname\":\"Palotes\",\n                  \"email\":\"pepito.palotes@brussels.com\",\n                  \"phone\":\"454325454\",\n                  \"address\":\"Brussels\",\n                  \"city\":\"Brussels\",\n                  \"zip\":\"R9R6+QX\",\n                  \"state\":\"Brussels\",\n                  \"country\":\"be\",\n                  \"countryCode\":\"Belgium\"\n               }\n            ]\n         }\n      ]\n   }\n}"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/PushBookings",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"PushBookings"
							]
						},
						"description": "Get booking data for a given partner between start & end date."
					},
					"response": []
				},
				{
					"name": "ReadRQ - Bookings - Must include Cancel booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "240dc66d-4e6c-4965-adbe-7e14cf184e2c",
								"exec": [
									"var randomId2 = postman.getEnvironmentVariable(\"randomId2\");",
									"var randomId1 = postman.getEnvironmentVariable(\"randomId1\");",
									"var voucherNumber1 = postman.getEnvironmentVariable(\"voucherNumber1\");",
									"var voucherNumber2 = postman.getEnvironmentVariable(\"voucherNumber2\");",
									"",
									"var jsonData = xml2Json(responseBody);",
									"var agecode = jsonData['env:Envelope']['env:Body']['ns2:OTA_ResRetrieveRS']['ns2:ReservationsList']['ns2:HotelReservation']['0']['ns2:ResGuests']['ns2:ResGuest']['0']['$']['AgeQualifyingCode'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Success\", function () {",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"AgeQuailtyingCode is 10\", function(){",
									"var expected = 10;",
									"pm.expect(agecode).to.include(expected);   ",
									"});",
									"",
									"pm.test(\"Contains string: ReservationsList\", function () {",
									"var expected = \"ReservationsList\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Upsell night Commit booking with Reservation ID in Response body: RESA-\"+randomId1;",
									"pm.test(string, function(){",
									"var expected = \"RESA-\"+randomId1;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});",
									"",
									"var string = \"Contains Upsell Room Cancel booking with Reservation ID in Response body: RESA-\"+randomId2;",
									"pm.test(string, function(){",
									"var expected = \"RESA-\"+randomId2;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});",
									"",
									"var string = \"Contains Voucher number 1: \"+voucherNumber1+\" in response\";",
									"pm.test(string, function(){",
									"var expected = voucherNumber1;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});",
									"",
									"var string = \"Contains Voucher number 2: \"+voucherNumber2+\" in response\";",
									"pm.test(string, function(){",
									"var expected = voucherNumber2;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "82015cff-f2e8-4851-99e5-26675f90be51",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() - 3);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 1);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day",
									"",
									"postman.setEnvironmentVariable(\"UpdatedStartDate\",startdate);",
									"postman.setEnvironmentVariable(\"UpdatedEndDate\",enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"",
									" setTimeout(function(){",
									"          console.log(\"Sleeping for 5 seconds before next request.\");",
									"  },5000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_ReadRQ>\n\t\t<ota:ReadRequests>\n\t\t\t<ota:HotelReadRequest HotelCode = \"{{HotelCode}}\">\n\t\t\t\t<ota:SelectionCriteria Start = \"{{UpdatedStartDate}}\" End = \"{{UpdatedEndDate}}\" DateType = \"LastUpdateDate\"/>\n\t\t\t</ota:HotelReadRequest>\n\t\t</ota:ReadRequests>\n\t</ota:OTA_ReadRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get booking data for a given partner between start & end date."
					},
					"response": []
				}
			]
		},
		{
			"name": "EAI Partner & Room creation and Smartbox API Validation",
			"item": [
				{
					"name": "Partner Data - YieldPlanet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "db33f0b3-bd0d-48d2-8b5f-2fa2f69f8956",
								"exec": [
									"var randomId = Math.floor(Math.random() * 20000000);",
									"postman.setEnvironmentVariable(\"randomId\", randomId)",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"eai\";",
									"var password = \"17s8msLXKkMVy0mP0BlT0BN7bRsMNEEE\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"eai\";",
									"var password = \"ggn35xLM7r5pxB6cD4bWjEWPPnktm6\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"eai\";",
									"var password = \"17s8msLXKkMVy0mP0BlT0BN7bRsMNEEE\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "27e1f7fc-3654-427b-b8c3-91dd31fe455a",
								"exec": [
									"pm.test(\"Status : 200 - Response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains success in response body\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Basic ZWFpOjE3czhtc0xYS2tNVnkwbVAwQmxUMEJON2JSc01ORUVF",
								"disabled": true
							},
							{
								"key": "password",
								"value": "17s8msLXKkMVy0mP0BlT0BN7bRsMNEEE",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"id\": \"12345677\",\n\t\"displayName\": \"Yield Planet\",\n\t\"description\": \"description\",\n\t\"status\": \"partner\",\n\t\"channelManagerHubApiKey\": \"sadsadsadsa\",\n\t\"isChannelManagerEnabled\": true,\n\t\"channelManagerCode\": \"yieldplanet\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/UpdatePartner",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"UpdatePartner"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product data - Room1 Creation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4103da45-3217-4c11-84f1-849d192f53fa",
								"exec": [
									"var roomcode1 = Math.floor(Math.random() * 200000);",
									"postman.setEnvironmentVariable(\"RoomCode1\", roomcode1)",
									"",
									"var hotelcode = postman.getEnvironmentVariable(\"randomId\");",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8edaab2e-2bbe-4b35-bdba-4372b5850632",
								"exec": [
									"pm.test(\"Status : 200 - Response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains success in response body\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"productCode\": \"{{RoomCode1}}\",\n\t\"productName\": \"Standard room\",\n\t\"productBrief\": \"Standard room\",\n\t\"isSellable\": false,\n\t\"isReservable\": false,\n\t\"partnerCode\": \"{{HotelCode}}\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/UpdateProduct",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"UpdateProduct"
							]
						},
						"description": "EAI Update product endpoint"
					},
					"response": []
				},
				{
					"name": "Product data - Room2 Creation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4103da45-3217-4c11-84f1-849d192f53fa",
								"exec": [
									"var roomcode2 = Math.floor(Math.random() * 200000);",
									"postman.setEnvironmentVariable(\"RoomCode2\", roomcode2)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9628ce79-f27f-4ed6-8c7c-e7c9159a33b3",
								"exec": [
									"pm.test(\"Status : 200 - Response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains success in response body\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"productCode\": \"{{RoomCode2}}\",\n\t\"productName\": \"Standard room\",\n\t\"productBrief\": \"Standard room\",\n\t\"isSellable\": false,\n\t\"isReservable\": false,\n\t\"partnerCode\": \"{{HotelCode}}\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/UpdateProduct",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"UpdateProduct"
							]
						},
						"description": "EAI Update product endpoint"
					},
					"response": []
				},
				{
					"name": "Get Rooms(HotelAvailRQ)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5da26ced-ce04-42da-8990-85b91cfa04e2",
								"exec": [
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomCode2\");",
									"",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"string = \"Contains Room 1 : \"+RoomTypeCode1+\" as expected\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"string = \"Contains Room 2 : \"+RoomTypeCode2+\" as expected\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode2;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "15600f50-796a-478d-bd1e-7dc0e31a8009",
								"exec": [
									"var username = postman.getEnvironmentVariable(\"HotelCode\");",
									"",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = username;",
									"var password = \"password\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelAvailRQ>\n\t\t<ota:AvailRequestSegments>\n\t\t\t<ota:AvailRequestSegment AvailReqType = \"Room\">\n\t\t\t\t<ota:HotelSearchCriteria>\n\t\t\t\t\t<ota:Criterion>\n\t\t\t\t\t\t<ota:HotelRef HotelCode=\"{{HotelCode}}\" />\n\t\t\t\t\t</ota:Criterion>\n\t\t\t\t</ota:HotelSearchCriteria>\n\t\t\t</ota:AvailRequestSegment>\n\t\t</ota:AvailRequestSegments>\n\t</ota:OTA_HotelAvailRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Room Rates(HotelRateAmountNotif)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e771bb7a-5f41-4fd2-a1ad-a96e97ed44b8",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "effb7fac-8a81-4954-923a-9b41a5d78ebe",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"var month = date2.getMonth() + 1;",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 71);",
									"var month = date3.getMonth() + 1;",
									"var startdate2 = date3.getFullYear() + \"-\" + month + \"-\" + date3.getDate();",
									"",
									"var date4 = new Date();",
									"date4.setDate(date4.getDate() + 90);",
									"var month = date4.getMonth() + 1;",
									"var enddate2 = date4.getFullYear() + \"-\" + month + \"-\" + date4.getDate();",
									"",
									"var Price1 = \"120\";",
									"var Price2 = \"130\";",
									"var Price3 = \"90\";",
									"var Price4 = \"95\";",
									"postman.setEnvironmentVariable(\"Price1\", Price1);",
									"postman.setEnvironmentVariable(\"Price2\", Price2);",
									"postman.setEnvironmentVariable(\"Price3\", Price3);",
									"postman.setEnvironmentVariable(\"Price4\", Price4);",
									"postman.setEnvironmentVariable(\"StartDate1\",startdate1);",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate1);",
									"postman.setEnvironmentVariable(\"StartDate2\",startdate2);",
									"postman.setEnvironmentVariable(\"EndDate2\",enddate2);",
									"",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomCode2\");",
									"",
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"} ",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n         <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelRateAmountNotifRQ>\n\t  <ota:RateAmountMessages HotelCode = \"{{HotelCode}}\">\n\t    <ota:RateAmountMessage>\n\t      <ota:StatusApplicationControl RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode1}}\" IsRoom = \"true\"/>\n\t      <ota:Rates>\n\t        <ota:Rate Start = \"{{StartDate1}}\" End = \"{{EndDate1}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"{{Price1}}\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t        <ota:Rate Start = \"{{StartDate2}}\" End = \"{{EndDate2}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"{{Price2}}\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t      </ota:Rates>\n\t    </ota:RateAmountMessage>\n\t    <ota:RateAmountMessage>\n\t      <ota:StatusApplicationControl RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode2}}\" IsRoom = \"true\"/>\n\t      <ota:Rates>\n\t        <ota:Rate Start = \"{{StartDate1}}\" End = \"{{EndDate1}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"{{Price3}}\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t        <ota:Rate Start = \"{{StartDate2}}\" End = \"{{EndDate2}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"{{Price4}}\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t      </ota:Rates>\n\t    </ota:RateAmountMessage>\n\t  </ota:RateAmountMessages>\n\t</ota:OTA_HotelRateAmountNotifRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Update rates for a room"
					},
					"response": []
				},
				{
					"name": "Read Room Rates(HotelRatePlanRQ)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9766c4eb-37d2-4cbb-b655-a27072593f93",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 90);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6675d827-404e-4838-8dae-2ad642239f65",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var price1 = postman.getEnvironmentVariable('Price1');",
									"var price2 = postman.getEnvironmentVariable('Price2');",
									"var price3 = postman.getEnvironmentVariable('Price3');",
									"var price4 = postman.getEnvironmentVariable('Price4');",
									"",
									"var roomtype1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['0']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['40']['$']['InvTypeCode'];",
									"var getprice1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['0']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax'];",
									"var getprice2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['20']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax'];",
									"var getprice3 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['40']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax'];",
									"var getprice4 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['60']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains first Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode1;",
									"pm.expect(roomtype1).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains second Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode2;",
									"pm.expect(roomtype2).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read room rates for first Roomtypecode - Same for first 20 consecutive days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=0;i<20; i++)",
									"{",
									"if(getprice1 == price1 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read room rates for first Roomtypecode - Same for 21 to 40 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=20;i<40; i++)",
									"{",
									"if(getprice2 == price2 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read room rates for second Roomtypecode - Same for first 20 consecutive days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=40;i<60; i++)",
									"{",
									"if(getprice3 == price3 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read room rates for second Roomtypecode - Same for 21 to 40 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=60;i<80; i++)",
									"{",
									"if(getprice4 == price4 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelRatePlanRQ EchoToken=\"echo\"> \n\t\t<ota:RatePlans>\n\t\t\t<ota:RatePlan>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\"/>\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/> \n\t\t\t\t<ota:RatePlanCandidates>\n\t\t\t\t\t<ota:RatePlanCandidate RatePlanCode = \"SBX\"/> \n\t\t\t\t</ota:RatePlanCandidates>\n\t\t\t</ota:RatePlan>\n\t\t</ota:RatePlans>\n\t</ota:OTA_HotelRatePlanRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get rates for the given partner between a start and end date"
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelInvCountNotif)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99da692b-ca4a-43da-ac4f-68a244d563f3",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8e968c46-a238-4ef9-a89b-4c87c9760aa6",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									"",
									"var count1 = 5;",
									"var count2 = 10",
									"",
									"postman.setEnvironmentVariable(\"count1\", count1);",
									"postman.setEnvironmentVariable(\"count2\", count2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n          <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n<soap:Body>\n\n<ota:OTA_HotelInvCountNotifRQ>\n  <ota:Inventories HotelCode = \"{{HotelCode}}\">\n  \n    <ota:Inventory>\n      <ota:StatusApplicationControl Start = \"{{StartDate}}\" End = \"{{EndDate}}\" RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode1}}\" IsRoom = \"true\"/>\n      <ota:InvCounts>\n        <ota:InvCount CountType = \"2\" Count = \"{{count1}}\"/>\n      </ota:InvCounts>\n    </ota:Inventory>\n    \n    <ota:Inventory>\n      <ota:StatusApplicationControl Start = \"{{StartDate}}\" End = \"{{EndDate}}\" RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode2}}\" IsRoom = \"true\"/>\n      <ota:InvCounts>\n        <ota:InvCount CountType = \"2\" Count = \"{{count2}}\"/>\n      </ota:InvCounts>\n    </ota:Inventory>\n    \n  </ota:Inventories>\n</ota:OTA_HotelInvCountNotifRQ>\n\n</soap:Body>\n</soap:Envelope>\n"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Update availability"
					},
					"response": []
				},
				{
					"name": "Get Availabilities(HotelInvCountRQ)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "598c606d-c9c5-436a-b8c5-40ddeae1a1b4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c5ee397-460b-4d7e-b249-02f3a250410a",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var count1 = postman.getEnvironmentVariable('count1');",
									"var count2 = postman.getEnvironmentVariable('count2');",
									"",
									"console.log(jsonData);",
									"console.log('RoomTypeCode2',RoomTypeCode2)",
									"console.log('Count1 : ', jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:InvCounts']['ns2:InvCount']['$']['Count']);",
									"console.log('Count2 : ',jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:InvCounts']['ns2:InvCount']['$']['Count']);",
									"console.log(jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:StatusApplicationControl']['$']['InvTypeCode']);",
									"console.log(jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:StatusApplicationControl']['$']['InvTypeCode']);",
									"",
									"var roomtype1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var getcount1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"var getcount2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains HoteCode value\", function () {",
									"expected = HotelCode;",
									"  pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains first Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode1;",
									"pm.expect(roomtype1).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains second Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode2;",
									"pm.expect(roomtype2).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties for first Roomtypecode - Available for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=0;i<20; i++)",
									"{",
									"if(getcount1 == count1 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"    console.log(increment);",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties for second Roomtypecode - Available for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=20;i<40; i++)",
									"{",
									"if(getcount2 == count2 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"    console.log(increment);",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelInvCountRQ>\n\t\t<ota:HotelInvCountRequests>\n\t\t\t<ota:HotelInvCountRequest>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\" />\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/>\n\t\t\t\t<ota:RoomTypeCandidates>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode1}}\"/>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode2}}\"/>\n\t\t\t\t</ota:RoomTypeCandidates>\n\t\t\t</ota:HotelInvCountRequest>\n\t\t</ota:HotelInvCountRequests>\n\t</ota:OTA_HotelInvCountRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get availability data for a given partner and rooms between start and end date."
					},
					"response": []
				},
				{
					"name": "Update status - Success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "70ffd558-bb64-436e-95d5-48bef436aa58",
								"exec": [
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var authusername = \"eai\";",
									"var authpassword = \"17s8msLXKkMVy0mP0BlT0BN7bRsMNEEE\";",
									"} ",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var authusername = \"eai\";",
									"var authpassword = \"ggn35xLM7r5pxB6cD4bWjEWPPnktm6\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var authusername = \"eai\";",
									"var authpassword = \"17s8msLXKkMVy0mP0BlT0BN7bRsMNEEE\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"authusername\", authusername);",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "74835da6-84ca-448a-8b3d-618c33115f39",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains status : ok in response body\", function () {",
									"var expected = \"ok\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{authpassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{authusername}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Basic Y21oOkIzdnhpNXVHVGI=",
								"type": "text",
								"disabled": true
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"transaction_id\": \"5cd96dfea328e7.88914853\",\r\n    \"status\": \"success\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/UpdateStatus",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"UpdateStatus"
							]
						},
						"description": "EAI Update status of transaction. This is send back to CMHUB from EAI"
					},
					"response": []
				},
				{
					"name": "Update status - Failed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "70ffd558-bb64-436e-95d5-48bef436aa58",
								"exec": [
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var authusername = \"eai\";",
									"var authpassword = \"17s8msLXKkMVy0mP0BlT0BN7bRsMNEEE\";",
									"} ",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var authusername = \"eai\";",
									"var authpassword = \"ggn35xLM7r5pxB6cD4bWjEWPPnktm6\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var authusername = \"eai\";",
									"var authpassword = \"17s8msLXKkMVy0mP0BlT0BN7bRsMNEEE\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"authusername\", authusername);",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "74835da6-84ca-448a-8b3d-618c33115f39",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains status : ok in response body\", function () {",
									"var expected = \"ok\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{authpassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{authusername}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic Y21oOkIzdnhpNXVHVGI=",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"disabled": true
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"transaction_id\": \"5d42e4acebc8d6.50961970\",\r\n    \"status\": \"failed\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/UpdateStatus",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"UpdateStatus"
							]
						},
						"description": "EAI Update status of transaction. This is send back to CMHUB from EAI"
					},
					"response": []
				}
			],
			"description": "This API calls will create Partner and Rooms first for YieldPlanet CM. Then it will use same Partner and Rooms for updating availabilities and room rates\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e83b4ec7-00b0-4329-b84f-b1e3eb4e4b28",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "08e9537b-959f-4404-8040-a44299bf8fbb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "R2D2 API Integration",
			"item": [
				{
					"name": "Accept booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d6de6fe9-674a-42ca-89a2-18cccfb47f96",
								"exec": [
									"var randomId = Math.floor(Math.random() * 200000000);",
									"postman.setEnvironmentVariable(\"r2d2_reservation_id\", 'RESA-' + randomId);",
									"",
									"var voucherNumber = Math.floor(Math.random() * 20000000);",
									"postman.setEnvironmentVariable(\"r2d2_voucher_number\", voucherNumber)",
									"",
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"postman.setEnvironmentVariable(\"r2d2_date\",date);",
									"postman.setEnvironmentVariable(\"r2d2_created_at\",date);",
									"postman.setEnvironmentVariable(\"r2d2_updated_at\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 62);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 63);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"postman.setEnvironmentVariable(\"r2d2_start_date\",startdate );",
									"postman.setEnvironmentVariable(\"r2d2_end_date\",enddate);",
									"",
									"if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00602144\";",
									"var RoomTypeCode1 = \"620010\";",
									"var experienceid = \"924897\";",
									"var username = \"r2d2\";",
									"var password = \"NA8maUd9RQnx9FHbaTREpJe3wu8FCTsp\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00127978\";",
									"var RoomTypeCode1 = \"396872\";",
									"var experienceid = \"924896\";",
									"var username = \"r2d2\";",
									"var password = \"NA8maUd9RQnx9FHbaTREpJe3wu8FCTsp\";",
									"",
									"}",
									"else if(pm.environment.name ==\"LOCAL\")",
									"{",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"postman.setEnvironmentVariable(\"r2d2_partner\", hotelcode);",
									"postman.setEnvironmentVariable(\"r2d2_user\",username);",
									"postman.setEnvironmentVariable(\"r2d2_password\",password);",
									"postman.setEnvironmentVariable(\"r2d2_room\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"r2d2_experience_id\",experienceid)",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0d280372-573f-4350-af20-7ce53366d0d7",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"",
									"// Validate `reservation id`",
									"var reservation_id = pm.environment.get(\"r2d2_reservation_id\");",
									"pm.test(\"The reservation id is: \" + reservation_id, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.identifier).to.eql(reservation_id);",
									"});",
									"",
									"",
									"// Validate `status`",
									"pm.test(\"Status is: confirm\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('confirm');",
									"});",
									"",
									"// Validate `start_date`",
									"var start_date = pm.environment.get(\"r2d2_start_date\") + \"T00:00:00+00:00\";",
									"pm.test(\"Start date is: \" + start_date, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.start_date).to.eql(start_date);",
									"});",
									"",
									"// Validate `end_date`",
									"var end_date = pm.environment.get(\"r2d2_end_date\") + \"T00:00:00+00:00\";",
									"pm.test(\"End date is: \" + end_date, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.end_date).to.eql(end_date);",
									"});",
									"",
									"// Validate `partner`",
									"var partner = pm.environment.get('r2d2_partner');",
									"pm.test(\"Partner is: \" + partner, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.partner).to.eql(partner);",
									"});",
									"",
									"// Validate `created_at`",
									"var created_at = pm.environment.get('r2d2_created_at') + '+00:00';",
									"pm.test(\"Created at is: \" + created_at, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.created_at).to.eql(created_at);",
									"});",
									"",
									"// Validate `voucher_number`",
									"var voucher_number = pm.environment.get('r2d2_voucher_number');",
									"pm.test(\"Voucher number is: \" + voucher_number, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.voucher_number).to.eql(voucher_number);",
									"});",
									"",
									"// Validate `room`",
									"var room = pm.environment.get('r2d2_room');",
									"pm.test(\"Room is: \" + room, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.room_types[0].id).to.eql(room);",
									"});",
									"",
									"// Validate `daily_rate`",
									"pm.test(\"Booking date is: \" + start_date, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.room_types[0].daily_rates[0].date).to.eql(start_date);",
									"});",
									"",
									"pm.test(\"Daily rate is: 33.3\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.room_types[0].daily_rates[0].price).to.eql('33.3');",
									"});",
									"",
									"// Validate POST request successfully",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"});",
									"",
									"setTimeout(function(){}, 3000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{r2d2_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{r2d2_user}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"id\": \"{{r2d2_reservation_id}}\",\n    \"status\": \"confirm\",\n    \"start_date\": \"{{r2d2_start_date}}\",\n    \"end_date\": \"{{r2d2_end_date}}\",\n    \"partner_id\": \"{{r2d2_partner}}\",\n    \"created_at\": \"{{r2d2_created_at}}\",\n    \"updated_at\": \"{{r2d2_updated_at}}\",\n    \"currency\": \"EUR\",\n    \"voucher_number\": \"{{r2d2_voucher_number}}\",\n    \"price\": 33.3,\n    \"experience\": {\n        \"id\": \"555555\",\n        \"components\": [\n            {\n                \"name\": \"A great component 2\"\n            }\n        ],\n        \"price\": 33.3\n    },\n    \"room_types\": [\n        {\n            \"id\": \"{{r2d2_room}}\",\n            \"name\": \"The Greatest room ever\",\n            \"guests\": [\n                {\n                    \"is_main\": true,\n                    \"age\": 40,\n                    \"name\": \"Pepito 3\",\n                    \"surname\": \"Los Palotes\",\n                    \"email\": \"pepito.palote@smartbox.com\",\n                    \"phone\": \"6786786788\",\n                    \"country_code\": \"ES\"\n                },\n                {\n                    \"is_main\": false,\n                    \"age\": 30,\n                    \"name\": \"Luz 4\",\n                    \"surname\": \"Cuesta Mogollón\",\n                    \"email\": \"luz.cuesta@smartbox.com\",\n                    \"phone\": \"6786786788\",\n                    \"country_code\": \"ES\"\n                },\n                {\n                    \"is_main\": false,\n                    \"age\": 30,\n                    \"name\": \"Luz 5\",\n                    \"surname\": \"Cuesta Mogollón 2\",\n                    \"email\": \"luz.cuesta@smartbox.com\",\n                    \"phone\": \"6786786788\",\n                    \"country_code\": \"ES\"\n                }\n            ],\n            \"daily_rates\": [\n                {\n                    \"date\": \"{{r2d2_start_date}}\",\n                    \"price\": 33.3\n                }\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/booking",
							"host": [
								"{{host}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check accepted booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90b59a82-27ba-4636-8ef9-9947be1639bf",
								"exec": [
									"// Template endpoint user",
									"pm.environment.set(\"tmp_user\", \"booking\");",
									"",
									"// Template endpoint password",
									"pm.environment.set('tmp_password', 'nGVdcBcNs8C3pUG6eX82mUnxvkpVveU9');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e2924dfa-adfd-4b2d-98d6-89c45dd02278",
								"exec": [
									"// Response status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Booking has partner",
									"var partner = pm.environment.get(\"r2d2_partner\");",
									"pm.test(\"Booking have partner: \" + partner, function () {",
									"    pm.expect(pm.response.text()).to.include('bookings hotelId=\"' + partner + '\"');",
									"});",
									"",
									"// Booking has room ",
									"var room = pm.environment.get(\"r2d2_room\");",
									"pm.test(\"Booking has room: \" + room, function () {",
									"    pm.expect(pm.response.text()).to.include('<room id=\"' + room + '\">');",
									"});",
									"",
									"",
									"// Response contain reservation",
									"var reservation_id = pm.environment.get(\"r2d2_reservation_id\");",
									"pm.test(\"Response have booking: \" + reservation_id, function () {",
									"    pm.expect(pm.response.text()).to.include('booking id=\"' + reservation_id + '\"');",
									"});",
									"",
									"// Booking status is `Create`",
									"pm.test(\"Booking \" + reservation_id + ' has status: `Create`', function () {",
									"    pm.expect(pm.response.text()).to.include('action=\"Create\"');",
									"});",
									"",
									"// Booking has total amount: 33.3",
									"pm.test(\"Booking has total amount: 33.3\", function () {",
									"    pm.expect(pm.response.text()).to.include('totalAmount=\"33.3\"');",
									"});",
									"",
									"// Booking has booking date",
									"var start_date = pm.environment.get(\"r2d2_start_date\");",
									"pm.test(\"Booking has booking date: \" + start_date, function () {",
									"    pm.expect(pm.response.text()).to.include('<stay date=\"' + start_date + '\"');",
									"});",
									"",
									"// Booking has daily rate: 33.3",
									"pm.test(\"Booking has daily rate: 33.3\", function () {",
									"    pm.expect(pm.response.text()).to.include('unitPrice=\"33.3\"');",
									"});",
									"",
									"// Booking has guest: <guest firstName=\"Pepito 3\" lastName=\"Los Palotes\" />",
									"pm.test('Booking has guest: <guest firstName=\"Pepito 3\" lastName=\"Los Palotes\" />', function () {",
									"    pm.expect(pm.response.text()).to.include('firstName=\"Pepito 3\" lastName=\"Los Palotes\"');",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{tmp_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{tmp_user}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/templates/dedge/{{r2d2_reservation_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"templates",
								"dedge",
								"{{r2d2_reservation_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cancel booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b09c3fdc-1811-4e8c-87c0-de00ddd40c0a",
								"exec": [
									"",
									"// Validate POST request successfully",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"});",
									"",
									"",
									"// Validate \"status: success\"",
									"pm.test(\"Status is: success\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('success');",
									"});",
									"",
									"setTimeout(function(){}, 3000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{r2d2_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{r2d2_user}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/booking/{{r2d2_reservation_id}}/cancel",
							"host": [
								"{{host}}"
							],
							"path": [
								"booking",
								"{{r2d2_reservation_id}}",
								"cancel"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check cancelled booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ca6305b1-c483-4b39-bd86-5be5af455662",
								"exec": [
									"// Template endpoint user",
									"pm.environment.set(\"tmp_user\", \"booking\");",
									"",
									"// Template endpoint password",
									"pm.environment.set('tmp_password', 'nGVdcBcNs8C3pUG6eX82mUnxvkpVveU9');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a09374cb-d375-4982-ac32-b30bbfb6e507",
								"exec": [
									"// Response status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Response contain partner",
									"var partner = pm.environment.get(\"r2d2_partner\");",
									"pm.test(\"Response have partner id: \" + partner, function () {",
									"    pm.expect(pm.response.text()).to.include('bookings hotelId=\"' + partner + '\"');",
									"});",
									"",
									"// Response contain reservation",
									"var reservation_id = pm.environment.get(\"r2d2_reservation_id\");",
									"pm.test(\"Response have booking: \" + reservation_id, function () {",
									"    pm.expect(pm.response.text()).to.include('booking id=\"' + reservation_id + '\"');",
									"});",
									"",
									"// Booking status is `Cancel`",
									"pm.test(\"Booking \" + reservation_id + ' has status: `Cancel`', function () {",
									"    pm.expect(pm.response.text()).to.include('action=\"Cancel\"');",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{tmp_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{tmp_user}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/templates/dedge/{{r2d2_reservation_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"templates",
								"dedge",
								"{{r2d2_reservation_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "002_Accept booking with non-existing room on CMHUB",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bc997853-053a-4560-86a8-f9d1da038913",
								"exec": [
									"var randomId = Math.floor(Math.random() * 200000000);",
									"postman.setEnvironmentVariable(\"r2d2_002_reservation_id\", 'RESA-' + randomId);",
									"",
									"var voucherNumber = Math.floor(Math.random() * 20000000);",
									"postman.setEnvironmentVariable(\"r2d2_002_voucher_number\", voucherNumber)",
									"",
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"postman.setEnvironmentVariable(\"r2d2_002_date\",date);",
									"postman.setEnvironmentVariable(\"r2d2_002_created_at\",date);",
									"postman.setEnvironmentVariable(\"r2d2_002_updated_at\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 62);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 63);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"postman.setEnvironmentVariable(\"r2d2_002_start_date\",startdate );",
									"postman.setEnvironmentVariable(\"r2d2_002_end_date\",enddate);",
									"",
									"if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00802602\";",
									"var RoomTypeCode1 = \"620010\";",
									"var experienceid = \"924897\";",
									"var username = \"r2d2\";",
									"var password = \"NA8maUd9RQnx9FHbaTREpJe3wu8FCTsp\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00820024\";",
									"var RoomTypeCode1 = \"396872\";",
									"var experienceid = \"924896\";",
									"var username = \"r2d2\";",
									"var password = \"NA8maUd9RQnx9FHbaTREpJe3wu8FCTsp\";",
									"",
									"}",
									"else if(pm.environment.name ==\"LOCAL\")",
									"{",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"postman.setEnvironmentVariable(\"r2d2_002_partner\", hotelcode);",
									"postman.setEnvironmentVariable(\"r2d2_002_user\",username);",
									"postman.setEnvironmentVariable(\"r2d2_002_password\",password);",
									"postman.setEnvironmentVariable(\"r2d2_002_room\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"r2d2_002_experience_id\",experienceid)",
									"",
									"// Random room",
									"var random_room = Math.floor(Date.now() / 1000).toString();",
									"pm.environment.set(\"r2d2_002_random_room\", random_room);",
									"",
									"// Random room name",
									"pm.environment.set(\"r2d2_002_random_room_name\", \"Standard Room\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0d760acc-ae19-4f10-a176-4824d4b09fc0",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"",
									"// Validate `reservation id`",
									"var reservation_id = pm.environment.get(\"r2d2_002_reservation_id\");",
									"pm.test(\"The reservation id is: \" + reservation_id, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.identifier).to.eql(reservation_id);",
									"});",
									"",
									"",
									"// Validate `status`",
									"pm.test(\"Status is: confirm\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('confirm');",
									"});",
									"",
									"// Validate `start_date`",
									"var start_date = pm.environment.get(\"r2d2_002_start_date\") + \"T00:00:00+00:00\";",
									"pm.test(\"Start date is: \" + start_date, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.start_date).to.eql(start_date);",
									"});",
									"",
									"// Validate `end_date`",
									"var end_date = pm.environment.get(\"r2d2_002_end_date\") + \"T00:00:00+00:00\";",
									"pm.test(\"End date is: \" + end_date, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.end_date).to.eql(end_date);",
									"});",
									"",
									"// Validate `partner`",
									"var partner = pm.environment.get('r2d2_002_partner');",
									"pm.test(\"Partner is: \" + partner, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.partner).to.eql(partner);",
									"});",
									"",
									"// Validate `created_at`",
									"var created_at = pm.environment.get('r2d2_002_created_at') + '+00:00';",
									"pm.test(\"Created at is: \" + created_at, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.created_at).to.eql(created_at);",
									"});",
									"",
									"// Validate `voucher_number`",
									"var voucher_number = pm.environment.get('r2d2_002_voucher_number');",
									"pm.test(\"Voucher number is: \" + voucher_number, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.voucher_number).to.eql(voucher_number);",
									"});",
									"",
									"// Validate `room`",
									"var room = pm.environment.get('r2d2_002_random_room');",
									"pm.test(\"Room is: \" + room, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.room_types[0].id).to.eql(room);",
									"});",
									"",
									"// Validate `daily_rate`",
									"pm.test(\"Booking date is: \" + start_date, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.room_types[0].daily_rates[0].date).to.eql(start_date);",
									"});",
									"",
									"pm.test(\"Daily rate is: 33.3\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.room_types[0].daily_rates[0].price).to.eql('33.3');",
									"});",
									"",
									"// Validate POST request successfully",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"});",
									"",
									"setTimeout(function(){}, 3000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{r2d2_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{r2d2_user}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"id\": \"{{r2d2_002_reservation_id}}\",\n    \"status\": \"confirm\",\n    \"start_date\": \"{{r2d2_002_start_date}}\",\n    \"end_date\": \"{{r2d2_002_end_date}}\",\n    \"partner_id\": \"{{r2d2_002_partner}}\",\n    \"created_at\": \"{{r2d2_002_created_at}}\",\n    \"updated_at\": \"{{r2d2_002_updated_at}}\",\n    \"currency\": \"EUR\",\n    \"voucher_number\": \"{{r2d2_002_voucher_number}}\",\n    \"price\": 33.3,\n    \"experience\": {\n        \"id\": \"555555\",\n        \"components\": [\n            {\n                \"name\": \"A great component 2\"\n            }\n        ],\n        \"price\": 33.3\n    },\n    \"room_types\": [\n        {\n            \"id\": \"{{r2d2_002_random_room}}\",\n            \"name\": \"{{r2d2_002_random_room_name}}\",\n            \"guests\": [\n                {\n                    \"is_main\": true,\n                    \"age\": 40,\n                    \"name\": \"Pepito 3\",\n                    \"surname\": \"Los Palotes\",\n                    \"email\": \"pepito.palote@smartbox.com\",\n                    \"phone\": \"6786786788\",\n                    \"country_code\": \"ES\"\n                },\n                {\n                    \"is_main\": false,\n                    \"age\": 30,\n                    \"name\": \"Luz 4\",\n                    \"surname\": \"Cuesta Mogollón\",\n                    \"email\": \"luz.cuesta@smartbox.com\",\n                    \"phone\": \"6786786788\",\n                    \"country_code\": \"ES\"\n                },\n                {\n                    \"is_main\": false,\n                    \"age\": 30,\n                    \"name\": \"Luz 5\",\n                    \"surname\": \"Cuesta Mogollón 2\",\n                    \"email\": \"luz.cuesta@smartbox.com\",\n                    \"phone\": \"6786786788\",\n                    \"country_code\": \"ES\"\n                }\n            ],\n            \"daily_rates\": [\n                {\n                    \"date\": \"{{r2d2_002_start_date}}\",\n                    \"price\": 33.3\n                }\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/booking",
							"host": [
								"{{host}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "002_Check new room is created",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f579707-b7de-4e8f-a530-e1eb267d6068",
								"exec": [
									"",
									"// Partner",
									"var partner = pm.environment.get(\"r2d2_002_partner\");",
									" ",
									"// Random room",
									"var room = postman.getEnvironmentVariable(\"r2d2_002_random_room\");",
									"",
									"// Reponse 200",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Reponse Content Type Xml",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"// Response contain expected partner",
									"pm.test(\"Response contain partner: \" + partner, function () {",
									"    pm.expect(pm.response.text()).to.include('hotelId=\"' + partner + '\"'); ",
									"});",
									"",
									"// Response contain room",
									"pm.test(\"Reponse contain room: \" + room + \" - Standard Room\", function () {",
									"    pm.expect(pm.response.text()).to.include('<room code=\"' + room + '\" name=\"Standard Room\">');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "17acb96f-8106-42a8-8025-57973730071d",
								"exec": [
									"if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"availpro\";",
									"var password = \"bgZrMq778W\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"availpro\";",
									"var password = \"password\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"availpro_username\", username);",
									"postman.setEnvironmentVariable(\"availpro_password\", password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/GetHotel?login={{availpro_username}}&password={{availpro_password}}&hotelCode={{r2d2_002_partner}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"GetHotel"
							],
							"query": [
								{
									"key": "login",
									"value": "{{availpro_username}}"
								},
								{
									"key": "password",
									"value": "{{availpro_password}}"
								},
								{
									"key": "hotelCode",
									"value": "{{r2d2_002_partner}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "002_Accept booking don't override the name of existing room",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0044391d-c62a-4571-8855-20c2ae15f2ae",
								"exec": [
									"var randomId = Math.floor(Math.random() * 200000000);",
									"postman.setEnvironmentVariable(\"r2d2_002_reservation_id\", 'RESA-' + randomId);",
									"",
									"var voucherNumber = Math.floor(Math.random() * 20000000);",
									"postman.setEnvironmentVariable(\"r2d2_002_voucher_number\", voucherNumber)",
									"",
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"postman.setEnvironmentVariable(\"r2d2_002_date\",date);",
									"postman.setEnvironmentVariable(\"r2d2_002_created_at\",date);",
									"postman.setEnvironmentVariable(\"r2d2_002_updated_at\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 62);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 63);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"postman.setEnvironmentVariable(\"r2d2_002_start_date\",startdate );",
									"postman.setEnvironmentVariable(\"r2d2_002_end_date\",enddate);",
									"",
									"if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00802602\";",
									"var RoomTypeCode1 = \"620010\";",
									"var existingRoom = \"666666\";",
									"var existingRoomName = \"Best Room Ever\";",
									"var experienceid = \"924897\";",
									"var username = \"r2d2\";",
									"var password = \"NA8maUd9RQnx9FHbaTREpJe3wu8FCTsp\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00820024\";",
									"var RoomTypeCode1 = \"396872\";",
									"var existingRoom = \"222222\";",
									"var existingRoomName = \"The Greatest room ever 3\";",
									"var experienceid = \"924896\";",
									"var username = \"r2d2\";",
									"var password = \"NA8maUd9RQnx9FHbaTREpJe3wu8FCTsp\";",
									"",
									"}",
									"else if(pm.environment.name ==\"LOCAL\")",
									"{",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"postman.setEnvironmentVariable(\"r2d2_002_partner\", hotelcode);",
									"postman.setEnvironmentVariable(\"r2d2_002_user\",username);",
									"postman.setEnvironmentVariable(\"r2d2_002_password\",password);",
									"postman.setEnvironmentVariable(\"r2d2_002_room\", RoomTypeCode1);",
									"",
									"// Existing room",
									"pm.environment.set(\"r2d2_002_existing_room\", existingRoom);",
									"pm.environment.set(\"r2d2_002_existing_room_name\", existingRoomName);",
									"",
									"// New Existing room name",
									"pm.environment.set(\"r2d2_002_new_room_name\", \"New room name\");",
									"",
									"// Experience Id",
									"postman.setEnvironmentVariable(\"r2d2_002_experience_id\",experienceid)",
									"",
									"// Random room",
									"var random_room = Math.floor(Date.now() / 1000).toString();",
									"pm.environment.set(\"r2d2_002_random_room\", random_room);",
									"",
									"// Random room name",
									"pm.environment.set(\"r2d2_002_random_room_name\", \"Standard Room\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d4738c03-28fe-43e5-947b-c40032f408fc",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"",
									"// Validate `reservation id`",
									"var reservation_id = pm.environment.get(\"r2d2_002_reservation_id\");",
									"pm.test(\"The reservation id is: \" + reservation_id, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.identifier).to.eql(reservation_id);",
									"});",
									"",
									"",
									"// Validate `status`",
									"pm.test(\"Status is: confirm\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('confirm');",
									"});",
									"",
									"// Validate `start_date`",
									"var start_date = pm.environment.get(\"r2d2_002_start_date\") + \"T00:00:00+00:00\";",
									"pm.test(\"Start date is: \" + start_date, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.start_date).to.eql(start_date);",
									"});",
									"",
									"// Validate `end_date`",
									"var end_date = pm.environment.get(\"r2d2_002_end_date\") + \"T00:00:00+00:00\";",
									"pm.test(\"End date is: \" + end_date, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.end_date).to.eql(end_date);",
									"});",
									"",
									"// Validate `partner`",
									"var partner = pm.environment.get('r2d2_002_partner');",
									"pm.test(\"Partner is: \" + partner, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.partner).to.eql(partner);",
									"});",
									"",
									"// Validate `created_at`",
									"var created_at = pm.environment.get('r2d2_002_created_at') + '+00:00';",
									"pm.test(\"Created at is: \" + created_at, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.created_at).to.eql(created_at);",
									"});",
									"",
									"// Validate `voucher_number`",
									"var voucher_number = pm.environment.get('r2d2_002_voucher_number');",
									"pm.test(\"Voucher number is: \" + voucher_number, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.voucher_number).to.eql(voucher_number);",
									"});",
									"",
									"// Validate `room`",
									"var room = pm.environment.get('r2d2_002_existing_room');",
									"pm.test(\"Room is: \" + room, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.room_types[0].id).to.eql(room);",
									"});",
									"",
									"// Validate `daily_rate`",
									"pm.test(\"Booking date is: \" + start_date, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.room_types[0].daily_rates[0].date).to.eql(start_date);",
									"});",
									"",
									"pm.test(\"Daily rate is: 33.3\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.room_types[0].daily_rates[0].price).to.eql('33.3');",
									"});",
									"",
									"// Validate POST request successfully",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"setTimeout(function () { }, 3000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{r2d2_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{r2d2_user}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"id\": \"{{r2d2_002_reservation_id}}\",\n    \"status\": \"confirm\",\n    \"start_date\": \"{{r2d2_002_start_date}}\",\n    \"end_date\": \"{{r2d2_002_end_date}}\",\n    \"partner_id\": \"{{r2d2_002_partner}}\",\n    \"created_at\": \"{{r2d2_002_created_at}}\",\n    \"updated_at\": \"{{r2d2_002_updated_at}}\",\n    \"currency\": \"EUR\",\n    \"voucher_number\": \"{{r2d2_002_voucher_number}}\",\n    \"price\": 33.3,\n    \"experience\": {\n        \"id\": \"555555\",\n        \"components\": [\n            {\n                \"name\": \"A great component 2\"\n            }\n        ],\n        \"price\": 33.3\n    },\n    \"room_types\": [\n        {\n            \"id\": \"{{r2d2_002_existing_room}}\",\n            \"name\": \"{{r2d2_002_new_room_name}}\",\n            \"guests\": [\n                {\n                    \"is_main\": true,\n                    \"age\": 40,\n                    \"name\": \"Pepito 3\",\n                    \"surname\": \"Los Palotes\",\n                    \"email\": \"pepito.palote@smartbox.com\",\n                    \"phone\": \"6786786788\",\n                    \"country_code\": \"ES\"\n                },\n                {\n                    \"is_main\": false,\n                    \"age\": 30,\n                    \"name\": \"Luz 4\",\n                    \"surname\": \"Cuesta Mogollón\",\n                    \"email\": \"luz.cuesta@smartbox.com\",\n                    \"phone\": \"6786786788\",\n                    \"country_code\": \"ES\"\n                },\n                {\n                    \"is_main\": false,\n                    \"age\": 30,\n                    \"name\": \"Luz 5\",\n                    \"surname\": \"Cuesta Mogollón 2\",\n                    \"email\": \"luz.cuesta@smartbox.com\",\n                    \"phone\": \"6786786788\",\n                    \"country_code\": \"ES\"\n                }\n            ],\n            \"daily_rates\": [\n                {\n                    \"date\": \"{{r2d2_002_start_date}}\",\n                    \"price\": 33.3\n                }\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/booking",
							"host": [
								"{{host}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "002_Check the name of existing room is not overrided",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd6f05d1-f90d-41c7-ac39-e1ede547e74f",
								"exec": [
									"",
									"// Partner",
									"var partner = pm.environment.get(\"r2d2_002_partner\");",
									" ",
									"// Random room",
									"var room = postman.getEnvironmentVariable(\"r2d2_002_existing_room\");",
									"var room_name = pm.environment.get(\"r2d2_002_existing_room_name\");",
									"",
									"// Reponse 200",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Reponse Content Type Xml",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"// Response contain expected partner",
									"pm.test(\"Response contain partner: \" + partner, function () {",
									"    pm.expect(pm.response.text()).to.include('hotelId=\"' + partner + '\"'); ",
									"});",
									"",
									"// The name of existing room is not overrided",
									"pm.test(\"The name of existing room is not overrided: \" + room + \" - \" + room_name, function () {",
									"    pm.expect(pm.response.text()).to.include('<room code=\"' + room + '\" name=\"' + room_name + '\">');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "538df90f-dcf9-421a-aac3-e8d72f9aa943",
								"exec": [
									"if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"availpro\";",
									"var password = \"bgZrMq778W\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"availpro\";",
									"var password = \"password\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"availpro_username\", username);",
									"postman.setEnvironmentVariable(\"availpro_password\", password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/GetHotel?login={{availpro_username}}&password={{availpro_password}}&hotelCode={{r2d2_002_partner}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"GetHotel"
							],
							"query": [
								{
									"key": "login",
									"value": "{{availpro_username}}"
								},
								{
									"key": "password",
									"value": "{{availpro_password}}"
								},
								{
									"key": "hotelCode",
									"value": "{{r2d2_002_partner}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "003_Update availabilities and prices for a room",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "edd3ecb7-f5ba-4bd7-9473-610c8c00b256",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cad16641-f3c6-4d4a-8a94-ecf3e4174dee",
								"exec": [
									"",
									"// Availpro credential",
									"if(pm.environment.name ==\"PREPROD\")",
									"{",
									"    var username = \"availpro\";",
									"    var password = \"bgZrMq778W\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"    var username = \"availpro\";",
									"    var password = \"password\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"availpro_username\", username);",
									"postman.setEnvironmentVariable(\"availpro_password\", password);",
									"",
									"// Partner & room",
									"if(pm.environment.name ==\"PREPROD\")",
									"{",
									"    var partner = \"00802602\";",
									"    var room = \"402206\";",
									"",
									"} else if(pm.environment.name ==\"DEVINT\") {",
									"    ",
									"    var partner = \"00820024\";",
									"    var room = \"460262\";",
									"}",
									"",
									"pm.environment.set(\"r2d2_003_partner\", partner);",
									"pm.environment.set(\"r2d2_003_room\", room);",
									"",
									"// Start-date & End-date",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 62);",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 63);",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day;",
									"",
									"pm.environment.set(\"r2d2_003_start_date\", startdate);",
									"pm.environment.set(\"r2d2_003_end_date\", enddate);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<message xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n    <authentication login=\"{{availpro_username}}\" password=\"{{availpro_password}}\" />\n    <inventoryUpdate hotelId=\"{{r2d2_003_partner}}\">\n        <room id=\"{{r2d2_003_room}}\">\n            <inventory>\n                <availability from=\"{{r2d2_003_start_date}}\" to=\"{{r2d2_003_end_date}}\" quantity=\"16\" />\n            </inventory>\n            <rate currency=\"EUR\" rateCode=\"SBX\" rateName=\"Smartbox Standard Rate\">\n                <planning from=\"{{r2d2_003_start_date}}\" to=\"{{r2d2_003_end_date}}\" minimumStay=\"1\" maximumStay=\"16\" unitPrice=\"119.9\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            </rate>\n        </room>\n    </inventoryUpdate>\n</message>",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/UpdateAvailabilitiesAndRates",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"UpdateAvailabilitiesAndRates"
							]
						}
					},
					"response": []
				},
				{
					"name": "003_Get Availability",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "80077680-d9ac-476f-a143-1559b6ba8b13",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3062d821-3b2e-441c-bbaf-6c935afdc65f",
								"exec": [
									"// Status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//",
									"var start_date = pm.environment.get(\"r2d2_003_start_date\");",
									"var end_date = pm.environment.get(\"r2d2_003_end_date\");",
									"",
									"// First response element",
									"pm.test(\"First reponse element is date: \" + start_date, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].date).to.eql(start_date);",
									"});",
									"",
									"pm.test(\"Availability of date \" + start_date + ' is: 16', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].quantity).to.eql(16);",
									"});",
									"",
									"// Second response element",
									"pm.test(\"Second reponse element is date: \" + end_date, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].date).to.eql(end_date);",
									"});",
									"",
									"pm.test(\"Availability of date \" + end_date + ' is: 16', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].quantity).to.eql(16);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{r2d2_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{r2d2_user}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/r2d2/availability/{{r2d2_003_room}}?start={{r2d2_003_start_date}}&end={{r2d2_003_end_date}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"r2d2",
								"availability",
								"{{r2d2_003_room}}"
							],
							"query": [
								{
									"key": "start",
									"value": "{{r2d2_003_start_date}}"
								},
								{
									"key": "end",
									"value": "{{r2d2_003_end_date}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "003_Get Price",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eed1d759-17f4-4910-b170-9274402c92db",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e98ecc2e-5c82-4399-904b-aa614cf1a356",
								"exec": [
									"// Status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//",
									"var start_date = pm.environment.get(\"r2d2_003_start_date\");",
									"var end_date = pm.environment.get(\"r2d2_003_end_date\");",
									"",
									"// First response element",
									"pm.test(\"First reponse element is date: \" + start_date, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].date).to.eql(start_date);",
									"});",
									"",
									"pm.test(\"Price of date \" + start_date + ' is: 119.9', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].quantity).to.eql(119.9);",
									"});",
									"",
									"// Second response element",
									"pm.test(\"Second reponse element is date: \" + end_date, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].date).to.eql(end_date);",
									"});",
									"",
									"pm.test(\"Availability of date \" + end_date + ' is: 119.9', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[1].quantity).to.eql(119.9);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{r2d2_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{r2d2_user}}",
									"type": "string"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/r2d2/price/{{r2d2_003_room}}?start={{r2d2_003_start_date}}&end={{r2d2_003_end_date}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"r2d2",
								"price",
								"{{r2d2_003_room}}"
							],
							"query": [
								{
									"key": "start",
									"value": "{{r2d2_003_start_date}}"
								},
								{
									"key": "end",
									"value": "{{r2d2_003_end_date}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b04c3c47-ce81-46b1-a197-e2ab9bc3e1bb",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "200146a4-0428-495a-8ca9-111e2e4f21fc",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}