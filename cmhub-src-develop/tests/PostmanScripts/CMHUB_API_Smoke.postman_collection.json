{
	"info": {
		"_postman_id": "444fec47-4dcc-4687-aaf4-55d3a7712962",
		"name": "CMHUB_API_Smoke",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "SBX API - OTA 2007B",
			"item": [
				{
					"name": "Update availabilities(HotelInvCountNotif)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99da692b-ca4a-43da-ac4f-68a244d563f3",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8e968c46-a238-4ef9-a89b-4c87c9760aa6",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate);",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									"",
									"if(pm.environment.name==\"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"var hotelcode = \"76876876\";",
									"var RoomTypeCode1 = \"09836\";",
									"var RoomTypeCode2 = \"09868\";",
									"var count1 = 5;",
									"var count2 = 10",
									"",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"var hotelcode = \"00142835\";",
									"var RoomTypeCode1 = \"321942\";",
									"var RoomTypeCode2 = \"283023\";",
									"var count1 = 5;",
									"var count2 = 10",
									"    ",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"var hotelcode = \"00019091\";",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"393333\";",
									"var count1 = 5;",
									"var count2 = 10;",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"count1\", count1);",
									"postman.setEnvironmentVariable(\"count2\", count2);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\",RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n          <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n<soap:Body>\n\n<ota:OTA_HotelInvCountNotifRQ>\n  <ota:Inventories HotelCode = \"{{HotelCode}}\">\n  \n    <ota:Inventory>\n      <ota:StatusApplicationControl Start = \"{{StartDate}}\" End = \"{{EndDate}}\" RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode1}}\" IsRoom = \"true\"/>\n      <ota:InvCounts>\n        <ota:InvCount CountType = \"2\" Count = \"{{count1}}\"/>\n      </ota:InvCounts>\n    </ota:Inventory>\n    \n    <ota:Inventory>\n      <ota:StatusApplicationControl Start = \"{{StartDate}}\" End = \"{{EndDate}}\" RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode2}}\" IsRoom = \"true\"/>\n      <ota:InvCounts>\n        <ota:InvCount CountType = \"2\" Count = \"{{count2}}\"/>\n      </ota:InvCounts>\n    </ota:Inventory>\n    \n  </ota:Inventories>\n</ota:OTA_HotelInvCountNotifRQ>\n\n</soap:Body>\n</soap:Envelope>\n"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Update availability"
					},
					"response": []
				},
				{
					"name": "Get Availabilities(HotelInvCountRQ)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "598c606d-c9c5-436a-b8c5-40ddeae1a1b4",
								"exec": [
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									"",
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"var hotelcode = \"76876876\";",
									"var RoomTypeCode1 = \"09836\";",
									"var RoomTypeCode2 = \"09868\";",
									"} ",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"var hotelcode = \"00142835\";",
									"var RoomTypeCode1 = \"321942\";",
									"var RoomTypeCode2 = \"283023\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"var hotelcode = \"00019091\"; ",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"393333\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c5ee397-460b-4d7e-b249-02f3a250410a",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var count1 = postman.getEnvironmentVariable('count1');",
									"var count2 = postman.getEnvironmentVariable('count2');",
									"",
									"console.log(jsonData);",
									"console.log('RoomTypeCode2',RoomTypeCode2)",
									"console.log('Count1 : ', jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:InvCounts']['ns2:InvCount']['$']['Count']);",
									"console.log('Count2 : ',jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:InvCounts']['ns2:InvCount']['$']['Count']);",
									"console.log(jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:StatusApplicationControl']['$']['InvTypeCode']);",
									"console.log(jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:StatusApplicationControl']['$']['InvTypeCode']);",
									"",
									"var roomtype1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var getcount1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"var getcount2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains HoteCode value\", function () {",
									"expected = HotelCode;",
									"  pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains first Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode1;",
									"pm.expect(roomtype1).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains second Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode2;",
									"pm.expect(roomtype2).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties for first Roomtypecode - Available for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=0;i<20; i++)",
									"{",
									"if(getcount1 == count1 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"    console.log(increment);",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties for second Roomtypecode - Available for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=20;i<40; i++)",
									"{",
									"if(getcount2 == count2 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"    console.log(increment);",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelInvCountRQ>\n\t\t<ota:HotelInvCountRequests>\n\t\t\t<ota:HotelInvCountRequest>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\" />\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/>\n\t\t\t\t<ota:RoomTypeCandidates>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode1}}\"/>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode2}}\"/>\n\t\t\t\t</ota:RoomTypeCandidates>\n\t\t\t</ota:HotelInvCountRequest>\n\t\t</ota:HotelInvCountRequests>\n\t</ota:OTA_HotelInvCountRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get availability data for a given partner and rooms between start and end date."
					},
					"response": []
				},
				{
					"name": "Get Bookings(ReadRQ)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "240dc66d-4e6c-4965-adbe-7e14cf184e2c",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Success\", function () {",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: ReservationsList\", function () {",
									"var expected = \"ReservationsList\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "82015cff-f2e8-4851-99e5-26675f90be51",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 30);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 180);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate);",
									"",
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"var hotelcode = \"76876876\";",
									"",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"var hotelcode = \"00142835\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"var hotelcode = \"00019091\"; ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate);",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_ReadRQ>\n\t\t<ota:ReadRequests>\n\t\t\t<ota:HotelReadRequest HotelCode = \"{{HotelCode}}\">\n\t\t\t\t<ota:SelectionCriteria Start = \"{{StartDate}}\" End = \"{{EndDate}}\" DateType = \"LastUpdateDate\"/>\n\t\t\t</ota:HotelReadRequest>\n\t\t</ota:ReadRequests>\n\t</ota:OTA_ReadRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get booking data for a given partner between start & end date."
					},
					"response": []
				}
			]
		},
		{
			"name": "SmartHotel - OTA 2016A",
			"item": [
				{
					"name": "Update Availabilities(HotelInvCountNotif)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f54da45c-39bd-42e5-a147-73a2f90d36b5",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 79);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 98);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"a61ce1a0-cfe9-46cb-948d-cbc8f3f63d00\";",
									"var password = \"Sma180119!\";",
									"var hotelcode = \"12345666\";",
									"var RoomTypeCode2 = \"232457\";",
									"var RoomTypeCode1 = \"232456\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"a61ce1a0-cfe9-46cb-948d-cbc8f3f63d00\";",
									"var password = \"Sma180119!\";",
									"var hotelcode = \"00543681\";",
									"var RoomTypeCode1 = \"974181\";",
									"var RoomTypeCode2 = \"974178\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"smarthotel\";",
									"var password = \"smarthotel\";",
									"var hotelcode = \"00063498\";",
									"var RoomTypeCode1 = \"312149\";",
									"var RoomTypeCode2 = \"398599\";  ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "303427c2-df3a-47d0-aaa5-d563b661947f",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains message Success\", function () {",
									"var contains = false;",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test.skip(\"Contains attribute UniqueID\", function () {",
									"var contains = false;",
									"var expected = \"UniqueID\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test.skip(\"Contains attribute Type\", function () {",
									"var contains = false;",
									"var expected = \"Type\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelInvCountNotifRQ EchoToken=\"Example123\" PrimaryLangID=\"eng\" Target=\"Production\" TimeStamp=\"2018-07-29T07:38:54.729Z\" Version=\"1.0\">\n   <POS>\n      <Source>\n          <RequestorID ID=\"{{username}}\" MessagePassword=\"{{password}}\" />\n      </Source>\n   </POS>\n   <Inventories HotelCode=\"{{HotelCode}}\">\n      <Inventory>\n         <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode1}}\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\" Mon=\"true\" Tue=\"true\" Weds=\"true\" />\n         <InvCounts>\n            <InvCount Count=\"5\" CountType=\"1\" />\n         </InvCounts>\n      </Inventory>\n      <Inventory>\n         <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode2}}\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\" Mon=\"true\" Fri=\"true\" />\n         <InvCounts>\n            <InvCount Count=\"5\" CountType=\"1\" />\n         </InvCounts>\n      </Inventory>\n   </Inventories>\n</OTA_HotelInvCountNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/smarthotel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"smarthotel"
							]
						},
						"description": "Update Availability"
					},
					"response": []
				},
				{
					"name": "Update Availabilities - Stop sale(Close)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f54da45c-39bd-42e5-a147-73a2f90d36b5",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 79);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 98);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"a61ce1a0-cfe9-46cb-948d-cbc8f3f63d00\";",
									"var password = \"Sma180119!\";",
									"var hotelcode = \"12345666\";",
									"var RoomTypeCode2 = \"232457\";",
									"var RoomTypeCode1 = \"232456\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"a61ce1a0-cfe9-46cb-948d-cbc8f3f63d00\";",
									"var password = \"Sma180119!\";",
									"var hotelcode = \"00543681\";",
									"var RoomTypeCode1 = \"974181\";",
									"var RoomTypeCode2 = \"974178\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"smarthotel\";",
									"var password = \"smarthotel\";",
									"var hotelcode = \"00063498\";",
									"var RoomTypeCode1 = \"312149\";",
									"var RoomTypeCode2 = \"398599\"; ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "303427c2-df3a-47d0-aaa5-d563b661947f",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains message Success\", function () {",
									"var contains = false;",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test.skip(\"Contains attribute UniqueID\", function () {",
									"var contains = false;",
									"var expected = \"UniqueID\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test.skip(\"Contains attribute Type\", function () {",
									"var contains = false;",
									"var expected = \"Type\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelBookingRuleNotifRQ EchoToken=\"Example123\" PrimaryLangID=\"eng\" Target=\"Production\" TimeStamp=\"2018-07-29T07:38:54.729Z\" Version=\"1.0\">\n<POS>\n  <Source>\n    <RequestorID ID=\"{{username}}\" MessagePassword=\"{{password}}\"></RequestorID>\n  </Source>\n</POS>\n  <RuleMessages HotelCode=\"{{HotelCode}}\">\n    <RuleMessage>\n      <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode1}}\"\nRatePlanCode=\"1\" RateTier=\"1\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\" Mon=\"true\" Weds=\"true\" />\n      <BookingRules>\n        <BookingRule>\n          <RestrictionStatus Restriction=\"Master\" Status=\"Close\" />\n        </BookingRule>\n      </BookingRules>\n    </RuleMessage>\n  </RuleMessages>\n</OTA_HotelBookingRuleNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/smarthotel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"smarthotel"
							]
						},
						"description": "Update Availability - Stop sale"
					},
					"response": []
				},
				{
					"name": "Update Availabilities - Stop sale(Open) ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f54da45c-39bd-42e5-a147-73a2f90d36b5",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 49);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 68);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"a61ce1a0-cfe9-46cb-948d-cbc8f3f63d00\";",
									"var password = \"Sma180119!\";",
									"var hotelcode = \"12345666\";",
									"var RoomTypeCode2 = \"232457\";",
									"var RoomTypeCode1 = \"232456\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"a61ce1a0-cfe9-46cb-948d-cbc8f3f63d00\";",
									"var password = \"Sma180119!\";",
									"var hotelcode = \"00543681\";",
									"var RoomTypeCode1 = \"974181\";",
									"var RoomTypeCode2 = \"974178\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"smarthotel\";",
									"var password = \"smarthotel\";",
									"var hotelcode = \"00063498\";",
									"var RoomTypeCode1 = \"312149\";",
									"var RoomTypeCode2 = \"398599\"; ",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "303427c2-df3a-47d0-aaa5-d563b661947f",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains message Success\", function () {",
									"var contains = false;",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test.skip(\"Contains attribute UniqueID\", function () {",
									"var contains = false;",
									"var expected = \"UniqueID\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test.skip(\"Contains attribute Type\", function () {",
									"var contains = false;",
									"var expected = \"Type\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelBookingRuleNotifRQ EchoToken=\"Example123\" PrimaryLangID=\"eng\" Target=\"Production\" TimeStamp=\"2018-07-29T07:38:54.729Z\" Version=\"1.0\">\n<POS>\n  <Source>\n    <RequestorID ID=\"{{username}}\" MessagePassword=\"{{password}}\"></RequestorID>\n  </Source>\n</POS>\n  <RuleMessages HotelCode=\"{{HotelCode}}\">\n    <RuleMessage>\n      <StatusApplicationControl InvTypeCode=\"{{RoomTypeCode1}}\"\nRatePlanCode=\"1\" RateTier=\"1\" Start=\"{{StartDate}}\" End=\"{{EndDate}}\" Mon=\"true\" Fri=\"true\" />\n      <BookingRules>\n        <BookingRule>\n          <RestrictionStatus Restriction=\"Master\" Status=\"Open\" />\n        </BookingRule>\n      </BookingRules>\n    </RuleMessage>\n  </RuleMessages>\n</OTA_HotelBookingRuleNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/smarthotel",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"smarthotel"
							]
						},
						"description": "Update Availability - Stop sale "
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6abc7683-1d3e-446f-b86f-d924ed88c90f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bfbe05dc-b84d-4ba9-b15f-68f62dba71ae",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Travelclick - OTA 2015A",
			"item": [
				{
					"name": "Get Rooms(HotelProductRQ)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains first Room Code: \"+RoomTypeCode1+\" in response body\" ",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains second Room Code: \"+RoomTypeCode2+\" in response body\" ",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode2;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dbd50052-c05b-427c-a94c-575be43b3506",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"console.log('Date', date);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"ckNqmY73qPNSCvdWxwRUqK2ZReQJ5k\";",
									"var hotelcode = \"00011163\";",
									"var RoomTypeCode1 = \"456365\";",
									"var RoomTypeCode2 = \"434354\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00145205\";",
									"var RoomTypeCode1 = \"328383\";",
									"var RoomTypeCode2 = \"334857\";",
									"}",
									"else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00145205\";",
									"var RoomTypeCode1 = \"328383\";",
									"var RoomTypeCode2 = \"463866\";",
									"}",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelProductRQ Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\" xmlns=\"http://www.opentravel.org/OTA/2003/05\">\n    <HotelProducts>\n        <HotelProduct HotelCode=\"{{HotelCode}}\" />\n    </HotelProducts>\n</OTA_HotelProductRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Get all rooms for this hotel"
					},
					"response": []
				},
				{
					"name": "Restrictions(HotelAvailNotifRQ)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fe864865-4c07-4cfe-9093-25400646ab04",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"console.log('Date : ', date1)",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"console.log('Date : ', date2)",
									"var month2 = date2.getMonth() + 1;",
									"if(month2 < 10)",
									"{",
									"month2 = \"0\" + month2;",
									"}",
									"var day2 = date2.getDate();",
									"if(day2 < 10)",
									"{",
									"    day2 = \"0\" + day2;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month2 + \"-\" + day2;",
									"console.log('Date formatted : ', enddate);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"ckNqmY73qPNSCvdWxwRUqK2ZReQJ5k\";",
									"var hotelcode = \"00011163\";",
									"var RoomTypeCode1 = \"456365\";",
									"var RoomTypeCode2 = \"434354\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00145205\";",
									"var RoomTypeCode1 = \"328383\";",
									"var RoomTypeCode2 = \"334857\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00145205\";",
									"var RoomTypeCode1 = \"328383\";",
									"var RoomTypeCode2 = \"463866\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelAvailNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <AvailStatusMessages HotelCode=\"{{HotelCode}}\">\n      <AvailStatusMessage>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" />\n         <LengthsOfStay ArrivalDateBased=\"true\">\n            <LengthOfStay MinMaxMessageType=\"MinLOS\" TimeUnit=\"Day\" Time=\"3\" />\n         </LengthsOfStay>\n      </AvailStatusMessage>\n        <AvailStatusMessage>\n            <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" />\n            <RestrictionStatus Restriction=\"Master\" Status=\"Close\" />\n        </AvailStatusMessage>\n      <AvailStatusMessage>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\" />\n         <RestrictionStatus Restriction=\"Master\" Status=\"Open\" />\n      </AvailStatusMessage>\n   </AvailStatusMessages>\n</OTA_HotelAvailNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Configure restrictions. It has no effect at Smartbox."
					},
					"response": []
				},
				{
					"name": "GetRestrictions(HotelAvailGetRQ)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"",
									"console.log(jsonData);",
									"console.log('RoomCode 1 : ',jsonData['OTA_HotelAvailGetRS']['AvailStatusMessages']['AvailStatusMessage']['0']['StatusApplicationControl']['$']['InvTypeCode']);",
									"console.log('RoomCode 2 : ',jsonData['OTA_HotelAvailGetRS']['AvailStatusMessages']['AvailStatusMessage']['20']['StatusApplicationControl']['$']['InvTypeCode']);",
									"console.log('Room code 1 Status : ',jsonData['OTA_HotelAvailGetRS']['AvailStatusMessages']['AvailStatusMessage']['0']['RestrictionStatus']['$']['Status']);",
									"console.log('Room code 2 Status : ',jsonData['OTA_HotelAvailGetRS']['AvailStatusMessages']['AvailStatusMessage']['20']['RestrictionStatus']['$']['Status']);",
									"",
									"var roomtype1 = jsonData['OTA_HotelAvailGetRS']['AvailStatusMessages']['AvailStatusMessage']['0']['StatusApplicationControl']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['OTA_HotelAvailGetRS']['AvailStatusMessages']['AvailStatusMessage']['20']['StatusApplicationControl']['$']['InvTypeCode'];",
									"var getstatus1 = jsonData['OTA_HotelAvailGetRS']['AvailStatusMessages']['AvailStatusMessage']['0']['RestrictionStatus']['$']['Status'];",
									"var getstatus2 = jsonData['OTA_HotelAvailGetRS']['AvailStatusMessages']['AvailStatusMessage']['20']['RestrictionStatus']['$']['Status']",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains HotelCode: \"+HotelCode+\" in response body\";",
									"pm.test(string, function () {",
									"expected = HotelCode;",
									"  pm.expect(pm.response.text()).to.include(expected);",
									"});",
									" ",
									"var string = \"Read restrictions - Contains first Roomtypecode: \"+RoomTypeCode1+\" as expected\";",
									"pm.test(string, function () {",
									"expected = RoomTypeCode1;",
									"pm.expect(roomtype1).to.include(expected);",
									"});",
									"",
									"var string = \"Read restrictions - Contains second Roomtypecode: \"+RoomTypeCode2+\" as expected\";",
									"pm.test(string, function () {",
									"expected = RoomTypeCode2;",
									"pm.expect(roomtype2).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties status for first Roomtypecode - Closed for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=0;i<20; i++)",
									"{",
									"if(getstatus1 == \"Close\" && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"    console.log(increment);",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties status for second Roomtypecode - Open for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=20;i<40; i++)",
									"{",
									"if(getstatus2 == \"Open\" && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"    console.log(increment);",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3b3baba6-a3e5-4b4e-8c74-ee4f3f25b3de",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"console.log('Date : ', date1)",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"console.log('Date : ', date2)",
									"var month2 = date2.getMonth() + 1;",
									"if(month2 < 10)",
									"{",
									"month2 = \"0\" + month2;",
									"}",
									"var day2 = date2.getDate();",
									"if(day2 < 10)",
									"{",
									"    day2 = \"0\" + day2;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month2 + \"-\" + day2;",
									"console.log('Date formatted : ', enddate);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"ckNqmY73qPNSCvdWxwRUqK2ZReQJ5k\";",
									"var hotelcode = \"00011163\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00145205\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"travelclick\";",
									"var password = \"password\";",
									"var hotelcode = \"00145205\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelAvailGetRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2016-05-26T11:11:50-04:00\" EchoToken=\"001-1466531393\">\n   <HotelAvailRequests>\n      <HotelAvailRequest>\n         <HotelRef HotelCode=\"{{HotelCode}}\" />\n         <DateRange Start=\"{{StartDate}}\" End=\"{{EndDate}}\" />\n         <RatePlanCandidates>\n            <RatePlanCandidate RatePlanCode=\"SBX\" />\n         </RatePlanCandidates>\n      </HotelAvailRequest>\n   </HotelAvailRequests>\n</OTA_HotelAvailGetRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "API call to Get all Restrictions on a partner\n"
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelInvCountNotif)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5ae07df2-03ad-4f30-a8ec-15fe12225b2e",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if (month < 10) {",
									"    month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if (day < 10) {",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if (hours < 10) {",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if (min < 10) {",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if (sec < 10) {",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day + \"T\" + hours + \":\" + min + \":\" + sec + \".\" + milli + \"Z\";",
									"postman.setEnvironmentVariable(\"Date\", date);",
									"console.log('Date', date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"console.log('Date : ', date1)",
									"var month1 = date1.getMonth() + 1;",
									"if (month1 < 10) {",
									"    month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if (day1 < 10) {",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"console.log('Date : ', date2)",
									"var month2 = date2.getMonth() + 1;",
									"if (month2 < 10) {",
									"    month2 = \"0\" + month2;",
									"}",
									"var day2 = date2.getDate();",
									"if (day2 < 10) {",
									"    day2 = \"0\" + day2;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month2 + \"-\" + day2;",
									"console.log('Date formatted : ', enddate);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									"var Count1 = \"20\";",
									"var Count2 = \"10\";",
									"",
									"if (pm.environment.name == \"SANDBOX_ENV\") {",
									"    var username = \"travelclick\";",
									"    var password = \"ckNqmY73qPNSCvdWxwRUqK2ZReQJ5k\";",
									"    var hotelcode = \"00011163\";",
									"    var RoomTypeCode1 = \"456365\";",
									"    var RoomTypeCode2 = \"434354\";",
									"} else if (pm.environment.name == \"PREPROD\") {",
									"    var username = \"travelclick\";",
									"    var password = \"password\";",
									"    var hotelcode = \"00145205\";",
									"    var RoomTypeCode1 = \"328383\";",
									"    var RoomTypeCode2 = \"334857\";",
									"} else if (pm.environment.name == \"DEVINT\") {",
									"    var username = \"travelclick\";",
									"    var password = \"password\";",
									"    var hotelcode = \"00145205\";",
									"    var RoomTypeCode1 = \"328383\";",
									"    var RoomTypeCode2 = \"463866\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"postman.setEnvironmentVariable(\"Count1\", Count1);",
									"postman.setEnvironmentVariable(\"Count2\", Count2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelInvCountNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <Inventories HotelCode=\"{{HotelCode}}\">\n      <Inventory>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" />\n         <InvCounts>\n            <InvCount Count=\"{{Count1}}\" CountType=\"2\" />\n         </InvCounts>\n      </Inventory>\n      <Inventory>\n         <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\" />\n         <InvCounts>\n            <InvCount Count=\"{{Count2}}\" CountType=\"2\" />\n         </InvCounts>\n      </Inventory>\n   </Inventories>\n</OTA_HotelInvCountNotifRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "Update availability"
					},
					"response": []
				},
				{
					"name": "Get Availabilities(HotelInvCountRQ)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var count2 = postman.getEnvironmentVariable('Count2');",
									"",
									"console.log(jsonData);",
									"console.log('RoomTypeCode2',RoomTypeCode2)",
									"console.log('Count1 : ',jsonData['OTA_HotelInvCountRS']['Inventories']['Inventory']['0']['InvCounts']['InvCount']['$']['Count']);",
									"console.log('Count2 : ',jsonData['OTA_HotelInvCountRS']['Inventories']['Inventory']['20']['InvCounts']['InvCount']['$']['Count']);",
									"",
									"var roomtype1 = jsonData['OTA_HotelInvCountRS']['Inventories']['Inventory']['0']['StatusApplicationControl']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['OTA_HotelInvCountRS']['Inventories']['Inventory']['20']['StatusApplicationControl']['$']['InvTypeCode'];",
									"var getcount1 = jsonData['OTA_HotelInvCountRS']['Inventories']['Inventory']['0']['InvCounts']['InvCount']['$']['Count'];",
									"var getcount2 = jsonData['OTA_HotelInvCountRS']['Inventories']['Inventory']['20']['InvCounts']['InvCount']['$']['Count'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains HoteCode value\", function () {",
									"expected = HotelCode;",
									"  pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains first Room Code as expected\", function () {",
									"expected = RoomTypeCode1;",
									"pm.expect(roomtype1).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains second Room Code as expected\", function () {",
									"expected = RoomTypeCode2;",
									"pm.expect(roomtype2).to.include(expected);",
									"});",
									"",
									"var string = \"Read availabilties for first Room Code: \"+RoomTypeCode1+\", Available for consecutive 20 days as expected\"",
									"pm.test(string, function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=0;i<20; i++)",
									"{",
									"if(getcount1 == 0 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"    console.log(increment);",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"var string = \"Read availabilties for first Room Code: \"+RoomTypeCode2+\", Available for consecutive 20 days as expected\"",
									"pm.test(string, function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=20;i<40; i++)",
									"{",
									"if(getcount2 == count2 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"    console.log(increment);",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e5e36db4-3723-498f-8243-df5a77cdf580",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if (month < 10) {",
									"    month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if (day < 10) {",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if (hours < 10) {",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if (min < 10) {",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if (sec < 10) {",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day + \"T\" + hours + \":\" + min + \":\" + sec + \".\" + milli + \"Z\";",
									"postman.setEnvironmentVariable(\"Date\", date);",
									"console.log('Date', date);",
									"",
									"if (pm.environment.name == \"SANDBOX_ENV\") {",
									"    var username = \"travelclick\";",
									"    var password = \"ckNqmY73qPNSCvdWxwRUqK2ZReQJ5k\";",
									"    var hotelcode = \"00011163\";",
									"    var RoomTypeCode1 = \"456365\";",
									"    var RoomTypeCode2 = \"434354\";",
									"} else if (pm.environment.name == \"PREPROD\") {",
									"    var username = \"travelclick\";",
									"    var password = \"password\";",
									"    var hotelcode = \"00145205\";",
									"    var RoomTypeCode1 = \"328383\";",
									"    var RoomTypeCode2 = \"334857\";",
									"} else if (pm.environment.name == \"DEVINT\") {",
									"    var username = \"travelclick\";",
									"    var password = \"password\";",
									"    var hotelcode = \"00145205\";",
									"    var RoomTypeCode1 = \"328383\";",
									"    var RoomTypeCode2 = \"463866\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<OTA_HotelInvCountRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"{{Date}}\" EchoToken=\"001-1466531393\">\n   <HotelInvCountRequests>\n      <HotelInvCountRequest>\n         <HotelRef HotelCode=\"{{HotelCode}}\" />\n         <DateRange Start=\"{{StartDate}}\" End=\"{{EndDate}}\" />\n         <RoomTypeCandidates>\n            <RoomTypeCandidate RoomTypeCode=\"{{RoomTypeCode1}}\" />\n            <RoomTypeCandidate RoomTypeCode=\"{{RoomTypeCode2}}\" />\n         </RoomTypeCandidates>\n      </HotelInvCountRequest>\n   </HotelInvCountRequests>\n</OTA_HotelInvCountRQ>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/travelclick",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"travelclick"
							]
						},
						"description": "API call to get all availabilities\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Siteminder - OTA 2007B",
			"item": [
				{
					"name": "Update availabilities(HotelAvailNotifRQ)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "621ec7e0-0f19-4236-8632-604796e420c9",
								"exec": [
									"console.log('From the pre-request script - Update Room availabilties');",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate);",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"00289062\";",
									"var password = \"123456\";",
									"var hotelcode = \"00289062\";",
									"var RoomTypeCode1 = \"722691\";",
									"var RoomTypeCode2 = \"722692\";",
									"var BookingLimit = 20;",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"siteminder\";",
									"var password = \"RkDu2d6Ku3sJHxYj\";",
									"var hotelcode = \"00043775\";",
									"var RoomTypeCode1 = \"246768\";",
									"var RoomTypeCode2 = \"245892\";",
									"var BookingLimit = 20;",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"siteminder\";",
									"var password = \"password\";",
									"var hotelcode = \"00145012\";",
									"var RoomTypeCode1 = \"528090\";",
									"var RoomTypeCode2 = \"307869\";",
									"var BookingLimit = 40;",
									"}",
									"",
									"var count1 = BookingLimit;",
									"var count2 = BookingLimit;",
									"",
									"postman.setEnvironmentVariable(\"count1\", count1);",
									"postman.setEnvironmentVariable(\"count2\", count2);",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\",RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\",RoomTypeCode2);",
									"postman.setEnvironmentVariable(\"BookingLimit\", BookingLimit);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa2475ad-16e0-4b76-adb7-5f4704c038ad",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string in reponse if update is successful: Success\", function () {",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "text/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <SOAP-ENV:Header>\n      <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">\n         <wsse:UsernameToken>\n            <wsse:Username>{{username}}</wsse:Username>\n            <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{{password}}</wsse:Password>\n         </wsse:UsernameToken>\n      </wsse:Security>\n   </SOAP-ENV:Header>\n<SOAP-ENV:Body>\n\n<OTA_HotelAvailNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2019-07-16T09:30:47+08:00\" EchoToken=\"abc123\">\n  <AvailStatusMessages HotelCode=\"{{HotelCode}}\">\n    <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n      <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\"/>\n      <RestrictionStatus Status=\"Open\" />\n    </AvailStatusMessage>\n    <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n      <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\"/>\n      <RestrictionStatus Status=\"Open\" />\n    </AvailStatusMessage>\n  </AvailStatusMessages>\n</OTA_HotelAvailNotifRQ>\n   </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/siteminder",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"siteminder"
							]
						},
						"description": "Update availability\n"
					},
					"response": []
				},
				{
					"name": "Get Availabilities(HotelInvCountRQ)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "598c606d-c9c5-436a-b8c5-40ddeae1a1b4",
								"exec": [
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c5ee397-460b-4d7e-b249-02f3a250410a",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var count1 = postman.getEnvironmentVariable('count1');",
									"var count2 = postman.getEnvironmentVariable('count2');",
									"",
									"console.log(jsonData);",
									"console.log('RoomTypeCode2',RoomTypeCode2)",
									"console.log('Count1 : ', jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:InvCounts']['ns2:InvCount']['$']['Count']);",
									"console.log('Count2 : ',jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:InvCounts']['ns2:InvCount']['$']['Count']);",
									"console.log(jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:StatusApplicationControl']['$']['InvTypeCode']);",
									"console.log(jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:StatusApplicationControl']['$']['InvTypeCode']);",
									"",
									"var roomtype1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var getcount1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"var getcount2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains HoteCode value\", function () {",
									"expected = HotelCode;",
									"  pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains first Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode1;",
									"pm.expect(roomtype1).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains second Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode2;",
									"pm.expect(roomtype2).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties for first Roomtypecode - Available for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=0;i<20; i++)",
									"{",
									"if(getcount1 == count1 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"    console.log(increment);",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties for second Roomtypecode - Available for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=20;i<40; i++)",
									"{",
									"if(getcount2 == count2 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"    console.log(increment);",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelInvCountRQ>\n\t\t<ota:HotelInvCountRequests>\n\t\t\t<ota:HotelInvCountRequest>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\" />\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/>\n\t\t\t\t<ota:RoomTypeCandidates>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode1}}\"/>\n                    <ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode2}}\"/>\n\t\t\t\t</ota:RoomTypeCandidates>\n\t\t\t</ota:HotelInvCountRequest>\n\t\t</ota:HotelInvCountRequests>\n\t</ota:OTA_HotelInvCountRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get availability data for a given partner and rooms between start and end date."
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelAvailNotifRQ) - Miminum Stay attributes",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "621ec7e0-0f19-4236-8632-604796e420c9",
								"exec": [
									"console.log('From the pre-request script - Update Room availabilties');",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 159);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 178);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate);",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"00289062\";",
									"var password = \"123456\";",
									"var hotelcode = \"00289062\";",
									"var RoomTypeCode1 = \"722691\";",
									"var RoomTypeCode2 = \"722692\";",
									"var BookingLimit = 20;",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"siteminder\";",
									"var password = \"RkDu2d6Ku3sJHxYj\";",
									"var hotelcode = \"00043775\";",
									"var RoomTypeCode1 = \"246768\";",
									"var RoomTypeCode2 = \"245892\";",
									"var BookingLimit = 20;",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"siteminder\";",
									"var password = \"password\";",
									"var hotelcode = \"00145012\";",
									"var RoomTypeCode1 = \"528090\";",
									"var RoomTypeCode2 = \"307869\";",
									"var BookingLimit = 40;",
									"}",
									"",
									"var count1 = BookingLimit;",
									"var count2 = BookingLimit;",
									"",
									"postman.setEnvironmentVariable(\"count1\", count1);",
									"postman.setEnvironmentVariable(\"count2\", count2);",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\",RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\",RoomTypeCode2);",
									"postman.setEnvironmentVariable(\"BookingLimit\", BookingLimit);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa2475ad-16e0-4b76-adb7-5f4704c038ad",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string in reponse if update is successful: Success\", function () {",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "text/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <SOAP-ENV:Header>\n      <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">\n         <wsse:UsernameToken>\n            <wsse:Username>{{username}}</wsse:Username>\n            <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{{password}}</wsse:Password>\n         </wsse:UsernameToken>\n      </wsse:Security>\n   </SOAP-ENV:Header>\n<SOAP-ENV:Body>\n\n<OTA_HotelAvailNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2019-07-16T09:30:47+08:00\" EchoToken=\"abc123\">\n  <AvailStatusMessages HotelCode=\"{{HotelCode}}\">\n    <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n      <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\"/>\n      <RestrictionStatus Status=\"Open\" />\n    </AvailStatusMessage>\n            <AvailStatusMessage>\n               <StatusApplicationControl End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" Start=\"{{StartDate}}\" />\n               <LengthsOfStay>\n                  <LengthOfStay MinMaxMessageType=\"SetMinLOS\" Time=\"1\" />\n               </LengthsOfStay>\n            </AvailStatusMessage>\n    <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n      <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\"/>\n      <RestrictionStatus Status=\"Open\" />\n    </AvailStatusMessage>\n            <AvailStatusMessage>\n               <StatusApplicationControl End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\" Start=\"{{StartDate}}\" />\n               <LengthsOfStay>\n                  <LengthOfStay MinMaxMessageType=\"SetMinLOS\" Time=\"1\" />\n               </LengthsOfStay>\n            </AvailStatusMessage>\n  </AvailStatusMessages>\n</OTA_HotelAvailNotifRQ>\n   </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/siteminder",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"siteminder"
							]
						},
						"description": "Update availability with minimum stay attributes included\n"
					},
					"response": []
				},
				{
					"name": "Get Availabilities(HotelInvCountRQ)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "598c606d-c9c5-436a-b8c5-40ddeae1a1b4",
								"exec": [
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 159);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 178);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c5ee397-460b-4d7e-b249-02f3a250410a",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var count1 = postman.getEnvironmentVariable('count1');",
									"var count2 = postman.getEnvironmentVariable('count2');",
									"",
									"console.log(jsonData);",
									"console.log('RoomTypeCode2',RoomTypeCode2)",
									"console.log('Count1 : ', jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:InvCounts']['ns2:InvCount']['$']['Count']);",
									"console.log('Count2 : ',jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:InvCounts']['ns2:InvCount']['$']['Count']);",
									"console.log(jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:StatusApplicationControl']['$']['InvTypeCode']);",
									"console.log(jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:StatusApplicationControl']['$']['InvTypeCode']);",
									"",
									"var roomtype1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var getcount1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"var getcount2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains HoteCode value\", function () {",
									"expected = HotelCode;",
									"  pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains first Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode1;",
									"pm.expect(roomtype1).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains second Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode2;",
									"pm.expect(roomtype2).to.include(expected);",
									"});",
									"",
									"if((pm.environment.name == \"DEVINT\") || (pm.environment.name = \"PREPROD\"))",
									"{",
									"pm.test(\"Read availabilties for first Roomtypecode - Available for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=0;i<20; i++)",
									"{",
									"if(getcount1 == count1 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"    console.log(increment);",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties for second Roomtypecode - Available for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=20;i<40; i++)",
									"{",
									"if(getcount2 == count2 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"    console.log(increment);",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"}",
									"else if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"pm.test.skip(\"Read availabilties for first Roomtypecode - Available for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=0;i<20; i++)",
									"{",
									"if(getcount1 == count1 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"    console.log(increment);",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test.skip(\"Read availabilties for second Roomtypecode - Available for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=20;i<40; i++)",
									"{",
									"if(getcount2 == count2 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"    console.log(increment);",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelInvCountRQ>\n\t\t<ota:HotelInvCountRequests>\n\t\t\t<ota:HotelInvCountRequest>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\" />\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/>\n\t\t\t\t<ota:RoomTypeCandidates>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode1}}\"/>\n                    <ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode2}}\"/>\n\t\t\t\t</ota:RoomTypeCandidates>\n\t\t\t</ota:HotelInvCountRequest>\n\t\t</ota:HotelInvCountRequests>\n\t</ota:OTA_HotelInvCountRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get availability data for a given partner and rooms between start and end date."
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelAvailNotifRQ- Stopsale) - Miminum Stay attributes",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "621ec7e0-0f19-4236-8632-604796e420c9",
								"exec": [
									"console.log('From the pre-request script - Update Room availabilties');",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 159);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 178);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate);",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"00289062\";",
									"var password = \"123456\";",
									"var hotelcode = \"00289062\";",
									"var RoomTypeCode1 = \"722691\";",
									"var RoomTypeCode2 = \"722692\";",
									"var BookingLimit = 20;",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"siteminder\";",
									"var password = \"RkDu2d6Ku3sJHxYj\";",
									"var hotelcode = \"00043775\";",
									"var RoomTypeCode1 = \"246768\";",
									"var RoomTypeCode2 = \"245892\";",
									"var BookingLimit = 20;",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"siteminder\";",
									"var password = \"password\";",
									"var hotelcode = \"00145012\";",
									"var RoomTypeCode1 = \"528090\";",
									"var RoomTypeCode2 = \"307869\";",
									"var BookingLimit = 40;",
									"}",
									"",
									"var count1 = BookingLimit;",
									"var count2 = BookingLimit;",
									"",
									"postman.setEnvironmentVariable(\"count1\", count1);",
									"postman.setEnvironmentVariable(\"count2\", count2);",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\",RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\",RoomTypeCode2);",
									"postman.setEnvironmentVariable(\"BookingLimit\", BookingLimit);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa2475ad-16e0-4b76-adb7-5f4704c038ad",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string in reponse if update is successful: Success\", function () {",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "text/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <SOAP-ENV:Header>\n        <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">\n            <wsse:UsernameToken>\n                <wsse:Username>{{username}}</wsse:Username>\n                <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{{password}}</wsse:Password>\n            </wsse:UsernameToken>\n        </wsse:Security>\n    </SOAP-ENV:Header>\n    <SOAP-ENV:Body>\n        <OTA_HotelAvailNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2019-07-16T09:30:47+08:00\" EchoToken=\"abc123\">\n            <AvailStatusMessages HotelCode=\"{{HotelCode}}\">\n                <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n                    <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\"/>\n                    <RestrictionStatus Status=\"Close\" />\n                </AvailStatusMessage>\n                <AvailStatusMessage>\n                    <StatusApplicationControl End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\" Start=\"{{StartDate}}\" />\n                    <LengthsOfStay>\n                        <LengthOfStay MinMaxMessageType=\"SetMinLOS\" Time=\"1\" />\n                    </LengthsOfStay>\n                </AvailStatusMessage>\n                <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n                    <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\"/>\n                    <RestrictionStatus Status=\"Open\" />\n                </AvailStatusMessage>\n                <AvailStatusMessage>\n                    <StatusApplicationControl End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\" Start=\"{{StartDate}}\" />\n                    <LengthsOfStay>\n                        <LengthOfStay MinMaxMessageType=\"SetMinLOS\" Time=\"1\" />\n                    </LengthsOfStay>\n                </AvailStatusMessage>\n            </AvailStatusMessages>\n        </OTA_HotelAvailNotifRQ>\n    </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/siteminder",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"siteminder"
							]
						},
						"description": "Update availability with minimum stay attributes included\n"
					},
					"response": []
				},
				{
					"name": "Get Availabilities(HotelInvCountRQ)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "598c606d-c9c5-436a-b8c5-40ddeae1a1b4",
								"exec": [
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 159);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 178);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c5ee397-460b-4d7e-b249-02f3a250410a",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var count2 = postman.getEnvironmentVariable('count2');",
									"",
									"console.log(jsonData);",
									"console.log('RoomTypeCode2',RoomTypeCode2)",
									"console.log('Count1 : ', jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:InvCounts']['ns2:InvCount']['$']['Count']);",
									"console.log('Count2 : ',jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:InvCounts']['ns2:InvCount']['$']['Count']);",
									"console.log(jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:StatusApplicationControl']['$']['InvTypeCode']);",
									"console.log(jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:StatusApplicationControl']['$']['InvTypeCode']);",
									"",
									"var roomtype1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var getcount1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"var getcount2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains HoteCode value\", function () {",
									"expected = HotelCode;",
									"  pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains first Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode1;",
									"pm.expect(roomtype1).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains second Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode2;",
									"pm.expect(roomtype2).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties for first Roomtypecode - Available for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=0;i<20; i++)",
									"{",
									"if(getcount1 == 0 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"    console.log(increment);",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties for second Roomtypecode - Available for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=20;i<40; i++)",
									"{",
									"if(getcount2 == count2 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"    console.log(increment);",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelInvCountRQ>\n\t\t<ota:HotelInvCountRequests>\n\t\t\t<ota:HotelInvCountRequest>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\" />\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/>\n\t\t\t\t<ota:RoomTypeCandidates>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode1}}\"/>\n                    <ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode2}}\"/>\n\t\t\t\t</ota:RoomTypeCandidates>\n\t\t\t</ota:HotelInvCountRequest>\n\t\t</ota:HotelInvCountRequests>\n\t</ota:OTA_HotelInvCountRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get availability data for a given partner and rooms between start and end date."
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelAvailNotifRQ) - Stop sale",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "621ec7e0-0f19-4236-8632-604796e420c9",
								"exec": [
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 40);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 59);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"00289062\";",
									"var password = \"123456\";",
									"var hotelcode = \"00289062\";",
									"var RoomTypeCode1 = \"722691\";",
									"var RoomTypeCode2 = \"722692\";",
									"var BookingLimit = 20;",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\",RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\",RoomTypeCode2);",
									"postman.setEnvironmentVariable(\"BookingLimit\", BookingLimit);",
									"",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"siteminder\";",
									"var password = \"RkDu2d6Ku3sJHxYj\";",
									"var hotelcode = \"00043775\";",
									"var RoomTypeCode1 = \"246768\";",
									"var RoomTypeCode2 = \"245892\";",
									"var BookingLimit = 20;",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\",RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\",RoomTypeCode2);",
									"postman.setEnvironmentVariable(\"BookingLimit\", BookingLimit);",
									"",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"siteminder\";",
									"var password = \"password\";",
									"var hotelcode = \"00145012\";",
									"var RoomTypeCode1 = \"528090\";",
									"var RoomTypeCode2 = \"307869\";",
									"var BookingLimit = 40;",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\",RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\",RoomTypeCode2);",
									"postman.setEnvironmentVariable(\"BookingLimit\", BookingLimit);",
									"}",
									"",
									"var count1 = BookingLimit;",
									"var count2 = BookingLimit;",
									"",
									"postman.setEnvironmentVariable(\"count1\", count1);",
									"postman.setEnvironmentVariable(\"count2\", count2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fa2475ad-16e0-4b76-adb7-5f4704c038ad",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string in reponse if update is successful: Success\", function () {",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "text/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">\n   <SOAP-ENV:Header>\n      <wsse:Security xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">\n         <wsse:UsernameToken>\n            <wsse:Username>{{username}}</wsse:Username>\n            <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{{password}}</wsse:Password>\n         </wsse:UsernameToken>\n      </wsse:Security>\n   </SOAP-ENV:Header>\n<SOAP-ENV:Body>\n\n<OTA_HotelAvailNotifRQ xmlns=\"http://www.opentravel.org/OTA/2003/05\" Version=\"1.0\" TimeStamp=\"2019-07-16T09:30:47+08:00\" EchoToken=\"abc123\">\n  <AvailStatusMessages HotelCode=\"{{HotelCode}}\">\n    <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n      <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode1}}\" RatePlanCode=\"SBX\"/>\n      <RestrictionStatus Status=\"Open\" />\n    </AvailStatusMessage>\n    <AvailStatusMessage BookingLimit=\"{{BookingLimit}}\">\n      <StatusApplicationControl Start=\"{{StartDate}}\" End=\"{{EndDate}}\" InvTypeCode=\"{{RoomTypeCode2}}\" RatePlanCode=\"SBX\"/>\n      <RestrictionStatus Status=\"Close\" />\n    </AvailStatusMessage>\n  </AvailStatusMessages>\n</OTA_HotelAvailNotifRQ>\n   </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/siteminder",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"siteminder"
							]
						},
						"description": "Update availability\n"
					},
					"response": []
				},
				{
					"name": "Get Availabilities(HotelInvCountRQ)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "598c606d-c9c5-436a-b8c5-40ddeae1a1b4",
								"exec": [
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 40);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 59);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c5ee397-460b-4d7e-b249-02f3a250410a",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var count1 = postman.getEnvironmentVariable('count1');",
									"var count2 = postman.getEnvironmentVariable('count2');",
									"",
									"console.log(jsonData);",
									"console.log('RoomTypeCode2',RoomTypeCode2)",
									"console.log('Count1 : ', jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:InvCounts']['ns2:InvCount']['$']['Count']);",
									"console.log('Count2 : ',jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:InvCounts']['ns2:InvCount']['$']['Count']);",
									"console.log(jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:StatusApplicationControl']['$']['InvTypeCode']);",
									"console.log(jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:StatusApplicationControl']['$']['InvTypeCode']);",
									"",
									"var roomtype1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var getcount1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"var getcount2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains HoteCode value\", function () {",
									"expected = HotelCode;",
									"  pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains first Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode1;",
									"pm.expect(roomtype1).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains second Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode2;",
									"pm.expect(roomtype2).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties for first Roomtypecode - Available for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=0;i<20; i++)",
									"{",
									"if(getcount1 == count1 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"    console.log(increment);",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties for second Roomtypecode - Available for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=20;i<40; i++)",
									"{",
									"if(getcount2 == 0 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"    console.log(increment);",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelInvCountRQ>\n\t\t<ota:HotelInvCountRequests>\n\t\t\t<ota:HotelInvCountRequest>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\" />\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/>\n\t\t\t\t<ota:RoomTypeCandidates>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode1}}\"/>\n                    <ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode2}}\"/>\n\t\t\t\t</ota:RoomTypeCandidates>\n\t\t\t</ota:HotelInvCountRequest>\n\t\t</ota:HotelInvCountRequests>\n\t</ota:OTA_HotelInvCountRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get availability data for a given partner and rooms between start and end date."
					},
					"response": []
				}
			]
		},
		{
			"name": "Wubook - JSON API",
			"item": [
				{
					"name": "Get rooms",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "101ca060-6299-4fa0-9c43-f9391b5e008e",
								"exec": [
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"wubook\";",
									"var password = \"password\";",
									"var hotelcode = \"2435077\";",
									"var RoomTypeCode1 = \"100230\";",
									"",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"wubook\";",
									"var password = \"password\";",
									"var hotelcode = \"00279256\";",
									"var RoomTypeCode1 = \"694490\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"wubook\";",
									"var password = \"password\";",
									"var hotelcode = \"00145577\";",
									"var RoomTypeCode1 = \"320080\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "11eb27aa-7453-4229-a8fa-548b84a74993",
								"exec": [
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"",
									"pm.test(\"Response is success - 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains room_id: 100230\", function () {",
									"var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"cm_auth\":{\n      \"username\":\"{{username}}\",\n      \"password\":\"{{password}}\"\n   },\n   \"hotel_auth\":{\n      \"hotel_id\":\"{{HotelCode}}\"\n   },\n   \"action\":\"get_rooms\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/wubook",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"wubook"
							]
						},
						"description": "Get rooms for a given partner"
					},
					"response": []
				},
				{
					"name": "Get rates plans",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6001065e-1a2c-4489-b66d-3d40e4a35d91",
								"exec": [
									"var username = \"wubook\";",
									"postman.setEnvironmentVariable(\"username\", username);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1874dbb3-b677-4198-b8de-263549667392",
								"exec": [
									"pm.test(\"Response is success - 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"cm_auth\":{\n      \"username\":\"{{username}}\",\n      \"password\":\"{{password}}\"\n   },\n   \"hotel_auth\":{\n      \"hotel_id\":\"{{HotelCode}}\"\n   },\n   \"action\":\"get_rates\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/wubook",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"wubook"
							]
						},
						"description": "List rate plans for a given partner"
					},
					"response": []
				},
				{
					"name": "Update availability & rates data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "129b7200-3e49-4d90-9615-6f291b01d718",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"console.log('Date : ', date1)",
									"var month1 = date1.getMonth() + 1;",
									"if(month1 < 10)",
									"{",
									"   month1 = \"0\" + month1;",
									"}",
									"var day1 = date1.getDate();",
									"if(day1 < 10)",
									"{",
									"    day1 = \"0\" + day1;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month1 + \"-\" + day1;",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"console.log('Date : ', date2)",
									"var month2 = date2.getMonth() + 1;",
									"if(month2 < 10)",
									"{",
									"month2 = \"0\" + month2;",
									"}",
									"var day2 = date2.getDate();",
									"if(day2 < 10)",
									"{",
									"    day2 = \"0\" + day2;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month2 + \"-\" + day2;",
									"console.log('Date formatted : ', enddate);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);",
									"",
									"var Count1 = 5;",
									"postman.setEnvironmentVariable(\"Count1\", Count1);",
									"var Price1 = 90.50;",
									"postman.setEnvironmentVariable(\"Price1\", Price1);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"wubook\";",
									"var password = \"password\";",
									"var hotelcode = \"2435077\";",
									"var RoomTypeCode1 = \"100230\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"wubook\";",
									"var password = \"password\";",
									"var hotelcode = \"00279256\";",
									"var RoomTypeCode1 = \"694490\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"wubook\";",
									"var password = \"password\";",
									"var hotelcode = \"00145577\"; ",
									"var RoomTypeCode1 = \"320080\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "904b5cbc-8bb8-4fe5-bdf2-83c42a3881cc",
								"exec": [
									"pm.test(\"Response is success - 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains success code string: 200\", function () {",
									"var contains = false;",
									"var expected = \"200\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"cm_auth\":{\n      \"username\":\"{{username}}\",\n      \"password\":\"{{password}}\"\n   },\n   \"hotel_auth\":{\n      \"hotel_id\":\"{{HotelCode}}\"\n   },\n   \"action\":\"update_data\",\n   \"data\":{\n      \"availability\":[\n         {\n            \"dfrom\":\"{{StartDate}}\",\n            \"dto\":\"{{EndDate}}\",\n            \"room_id\":\"{{RoomTypeCode1}}\",\n            \"avail\":\"{{Count1}}\"\n         }\n      ],\n      \"prices\":[\n         {\n            \"dfrom\":\"{{StartDate}}\",\n            \"dto\":\"{{EndDate}}\",\n            \"room_id\":\"{{RoomTypeCode1}}\",\n            \"rate_id\":\"SBX\",\n            \"occupancy\":\"\",\n            \"price\":{{Price1}}\n         }\n      ],\n      \"restrictions\":[\n         {\n            \"dfrom\":\"YYYY-MM-DD\",\n            \"dto\":\"YYYY-MM-DD\",\n            \"room_id\":\"2\",\n            \"rate_id\":\"1\",\n            \"closed\":false,\n            \"cta\":true,\n            \"ctd\":false,\n            \"minstay\":1,\n            \"maxstay\":0,\n            \"minstayarr\":1\n         }\n      ]\n   }\n}"
						},
						"url": {
							"raw": "{{host}}/api/wubook",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"wubook"
							]
						},
						"description": "Update availability & rates data for a given partner"
					},
					"response": []
				},
				{
					"name": "Get availability & rates data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1d5a562b-0282-4f7e-b8c2-b2687cc3187d",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day;",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day;",
									"console.log('Date formatted : ', enddate);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2131523d-cfc1-4574-9e6c-4c3bb998fd25",
								"exec": [
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"",
									"var count1 = postman.getEnvironmentVariable(\"Count1\");",
									"var price1 = postman.getEnvironmentVariable(\"Price1\");",
									"",
									"var response = JSON.parse(responseBody);",
									"console.log(\"response\", response);",
									"",
									"var stock1 = response.data.rooms[0].days;",
									"stock1 = stock1[Object.keys(stock1)[0]].availability",
									"stock1 = stock1.toString();",
									"",
									"var stock2 = response.data.rooms[0].days;",
									"var stock2 = stock2[Object.keys(stock2)[19]].availability",
									"stock2 = stock2.toString();",
									"",
									"var getPrice1 = response.data.rooms[0].days;",
									"getPrice1 = getPrice1[Object.keys(getPrice1)[0]].rates[0].price;",
									"getPrice1 = getPrice1.toString();",
									"",
									"var getPrice2 = response.data.rooms[0].days;",
									"getPrice2 = getPrice2[Object.keys(getPrice2)[19]].rates[0].price;",
									"getPrice2 = getPrice2.toString();",
									"",
									"var roomcode1 = response.data.rooms[0].room_id;",
									"",
									"pm.test(\"Response is success - 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function() {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains success code string: 200\", function() {",
									"    var contains = false;",
									"    var expected = \"200\";",
									"    pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Read availabilities - Contains first Roomtypecode: \" + RoomTypeCode1 + \" as expected\";",
									"pm.test(string, function() {",
									"    expected = RoomTypeCode1;",
									"    pm.expect(roomcode1).to.include(expected);",
									"});",
									"",
									"var string = \"Contains availabilities: \" + count1 + \" for Roomtypecode: \" + RoomTypeCode1 + \" as expected on Date: \" + StartDate;",
									"pm.test(string, function() {",
									"    expected = count1;",
									"    pm.expect(stock1).to.include(expected);",
									"});",
									"",
									"var string = \"Contains availabilities: \" + count1 + \" for Roomtypecode: \" + RoomTypeCode1 + \" as expected on Date: \" + EndDate;",
									"pm.test(string, function() {",
									"    expected = count1;",
									"    pm.expect(stock2).to.include(expected);",
									"});",
									"",
									"var string = \"Contains price: \" + price1 + \"  for Roomtypecode: \" + RoomTypeCode1 + \" as expected on Date: \" + StartDate;",
									"pm.test(string, function() {",
									"    expected = price1;",
									"    pm.expect(getPrice1).to.include(expected);",
									"});",
									"",
									"var string = \"Contains price: \" + price1 + \" for Roomtypecode: \" + RoomTypeCode1 + \" as expected on Date: \" + EndDate;",
									"pm.test(string, function() {",
									"    expected = price1;",
									"    pm.expect(getPrice2).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"cm_auth\":{\n      \"username\":\"{{username}}\",\n      \"password\":\"{{password}}\"\n   },\n   \"hotel_auth\":{\n      \"hotel_id\":\"{{HotelCode}}\"\n   },\n   \"action\":\"get_data\",\n   \"data\":{\n      \"start_date\":\"{{StartDate}}\",\n      \"end_date\":\"{{EndDate}}\"\n   }\n}"
						},
						"url": {
							"raw": "{{host}}/api/wubook",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"wubook"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Availpro - XML API",
			"item": [
				{
					"name": "Update availability and rates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7905d3e1-b8fc-485e-88f4-02b5cb8bc034",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d1059c0b-b03a-413d-a492-e8bce0f8a06c",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 40);",
									"var month = date1.getMonth() + 1;",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate1);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 42);",
									"var month = date2.getMonth() + 1;",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate1);",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 43);",
									"var month = date3.getMonth() + 1;",
									"var startdate2 = date3.getFullYear() + \"-\" + month + \"-\" + date3.getDate();",
									"console.log('Date formatted : ', startdate2);",
									"",
									"var date4 = new Date();",
									"date4.setDate(date4.getDate() + 45);",
									"var month = date4.getMonth() + 1;",
									"var enddate2 = date4.getFullYear() + \"-\" + month + \"-\" + date4.getDate();",
									"console.log('Date formatted : ', enddate2);",
									"",
									"var date5 = new Date();",
									"date5.setDate(date5.getDate() + 46);",
									"var month = date5.getMonth() + 1;",
									"var startdate3 = date5.getFullYear() + \"-\" + month + \"-\" + date5.getDate();",
									"console.log('Date formatted : ', startdate3);",
									"",
									"var date6 = new Date();",
									"date6.setDate(date6.getDate() + 48);",
									"var month = date6.getMonth() + 1;",
									"var enddate3 = date6.getFullYear() + \"-\" + month + \"-\" + date6.getDate();",
									"console.log('Date formatted : ', enddate3);",
									"",
									"var date7 = new Date();",
									"date7.setDate(date7.getDate() + 49);",
									"var month = date7.getMonth() + 1;",
									"var startdate4 = date7.getFullYear() + \"-\" + month + \"-\" + date7.getDate();",
									"console.log('Date formatted : ', startdate4);",
									"",
									"var date8 = new Date();",
									"date8.setDate(date8.getDate() + 51);",
									"var month = date8.getMonth() + 1;",
									"var enddate4 = date8.getFullYear() + \"-\" + month + \"-\" + date8.getDate();",
									"console.log('Date formatted : ', enddate4);",
									"",
									"var date9 = new Date();",
									"date9.setDate(date9.getDate() + 52);",
									"var month = date9.getMonth() + 1;",
									"var startdate5 = date9.getFullYear() + \"-\" + month + \"-\" + date9.getDate();",
									"console.log('Date formatted : ', startdate5);",
									"",
									"var date10 = new Date();",
									"date10.setDate(date10.getDate() + 54);",
									"var month = date10.getMonth() + 1;",
									"var enddate5 = date10.getFullYear() + \"-\" + month + \"-\" + date10.getDate();",
									"console.log('Date formatted : ', enddate5);",
									"",
									"postman.setEnvironmentVariable(\"StartDate1\", startdate1);",
									"postman.setEnvironmentVariable(\"EndDate1\", enddate1);",
									"postman.setEnvironmentVariable(\"StartDate2\", startdate2);",
									"postman.setEnvironmentVariable(\"EndDate2\", enddate2);",
									"postman.setEnvironmentVariable(\"StartDate3\", startdate3);",
									"postman.setEnvironmentVariable(\"EndDate3\", enddate3);",
									"postman.setEnvironmentVariable(\"StartDate4\", startdate4);",
									"postman.setEnvironmentVariable(\"EndDate4\", enddate4);",
									"postman.setEnvironmentVariable(\"StartDate5\", startdate5);",
									"postman.setEnvironmentVariable(\"EndDate5\", enddate5);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"availpro\";",
									"var password = \"password\";",
									"var hotelcode = \"12345678\";",
									"var RoomTypeCode1 = \"250419\";",
									"var RoomTypeCode2 = \"260419\";",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"availpro\";",
									"var password = \"bgZrMq778W\";",
									"var hotelcode = \"00028216\";",
									"var RoomTypeCode1 = \"CP000000585\";",
									"var RoomTypeCode2 = \"242429\";",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"availpro\";",
									"var password = \"password\";",
									"var hotelcode = \"00028216\";",
									"var RoomTypeCode1 = \"CP000000585\";",
									"var RoomTypeCode2 = \"242429\";",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							},
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<message xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n   <authentication login=\"{{username}}\" password=\"{{password}}\" />\n   <inventoryUpdate hotelId=\"{{HotelCode}}\">\n      <room id=\"{{RoomTypeCode1}}\">\n         <inventory>\n            <availability from=\"{{StartDate1}}\" to=\"{{EndDate1}}\" quantity=\"5\" />\n            <availability from=\"{{StartDate2}}\" to=\"{{EndDate2}}\" quantity=\"10\" />\n            <availability from=\"{{StartDate3}}\" to=\"{{EndDate3}}\" quantity=\"15\" />\n            <availability from=\"{{StartDate4}}\" to=\"{{EndDate4}}\" quantity=\"20\" />\n            <availability from=\"{{StartDate5}}\" to=\"{{EndDate5}}\" quantity=\"25\" />\n         </inventory>\n         <rate currency=\"EUR\" rateCode=\"SBX\" rateName=\"API AVailPro Standard room\">\n            <planning from=\"{{StartDate1}}\" to=\"{{EndDate1}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"210\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate2}}\" to=\"{{EndDate2}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"273\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate3}}\" to=\"{{EndDate3}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"340.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate4}}\" to=\"{{EndDate4}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"294\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate5}}\" to=\"{{EndDate5}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"340.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n         </rate>\n      </room>\n      <room id=\"{{RoomTypeCode2}}\">\n         <inventory>\n            <availability from=\"{{StartDate1}}\" to=\"{{EndDate1}}\" quantity=\"3\" />\n            <availability from=\"{{StartDate2}}\" to=\"{{EndDate2}}\" quantity=\"8\" />\n            <availability from=\"{{StartDate3}}\" to=\"{{EndDate3}}\" quantity=\"13\" />\n            <availability from=\"{{StartDate4}}\" to=\"{{EndDate4}}\" quantity=\"18\" />\n            <availability from=\"{{StartDate5}}\" to=\"{{EndDate5}}\" quantity=\"23\" />\n         </inventory>\n         <rate currency=\"EUR\" rateCode=\"SBX\" rateName=\"API AvialPro Single room\">\n            <planning from=\"{{StartDate1}}\" to=\"{{EndDate1}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"190\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate2}}\" to=\"{{EndDate2}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"220\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate3}}\" to=\"{{EndDate3}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"300.0000\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate4}}\" to=\"{{EndDate4}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"250\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n            <planning from=\"{{StartDate5}}\" to=\"{{EndDate5}}\" minimumStay=\"1\" maximumStay=\"1\" unitPrice=\"310.50\" noArrival=\"false\" noDeparture=\"false\" isClosed=\"false\" />\n         </rate>\n      </room>\n   </inventoryUpdate>\n</message>"
						},
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/UpdateAvailabilitiesAndRates",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"UpdateAvailabilitiesAndRates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Bookings (date)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "844ae724-58f2-4681-9cbc-018795cafb56",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: HotelId\", function () {",
									"var expected = \"hotelId\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "159ac436-7ee1-4b0a-bd01-79e364fd64a0",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date1.getMilliseconds();",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date2.getMilliseconds();",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"console.log('Date formatted : ', enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"availpro\";",
									"var password = \"password\";",
									"var hotelcode = \"12345678\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"availpro\";",
									"var password = \"bgZrMq778W\";",
									"var hotelcode = \"00028216\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"availpro\";",
									"var password = \"password\";",
									"var hotelcode = \"00028216\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);",
									"postman.setEnvironmentVariable(\"EndDate\", enddate);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/GetBookings?login={{username}}&password={{password}}&from={{StartDate}}&to={{EndDate}}&hotelId={{HotelCode}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"GetBookings"
							],
							"query": [
								{
									"key": "login",
									"value": "{{username}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								},
								{
									"key": "from",
									"value": "{{StartDate}}"
								},
								{
									"key": "to",
									"value": "{{EndDate}}"
								},
								{
									"key": "hotelId",
									"value": "{{HotelCode}}"
								}
							]
						},
						"description": "Get bookings by start-end date."
					},
					"response": []
				},
				{
					"name": "Get Bookings (date) - All Partners",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "844ae724-58f2-4681-9cbc-018795cafb56",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "92eb7705-aae7-48d0-b4b5-324b94356bbd",
								"exec": [
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var password = \"password\";",
									"",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var password = \"bgZrMq778W\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var password = \"password\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"StartDate\", startdate);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/GetBookings?login={{username}}&password={{password}}&from={{StartDate}}&to={{EndDate}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"GetBookings"
							],
							"query": [
								{
									"key": "login",
									"value": "{{username}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								},
								{
									"key": "from",
									"value": "{{StartDate}}"
								},
								{
									"key": "to",
									"value": "{{EndDate}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Get bookings by start-end date."
					},
					"response": []
				},
				{
					"name": "Get bookings (duration)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "844ae724-58f2-4681-9cbc-018795cafb56",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: HotelId\", function () {",
									"var expected = \"hotelId\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "76193828-bf08-4a13-8327-1acd3b413bea",
								"exec": [
									"var duration = \"5\";",
									"postman.setEnvironmentVariable(\"duration\", duration);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"availpro\";",
									"var password = \"password\";",
									"var hotelcode = \"12345678\";",
									"",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"availpro\";",
									"var password = \"bgZrMq778W\";",
									"var hotelcode = \"00028216\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"availpro\";",
									"var password = \"password\";",
									"var hotelcode = \"00028216\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{host}}/api/ext/xml/availpro/v1/GetBookings?login={{username}}&password={{password}}&duration={{duration}}&hotelId={{HotelCode}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"xml",
								"availpro",
								"v1",
								"GetBookings"
							],
							"query": [
								{
									"key": "login",
									"value": "{{username}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								},
								{
									"key": "duration",
									"value": "{{duration}}"
								},
								{
									"key": "hotelId",
									"value": "{{HotelCode}}"
								}
							]
						},
						"description": "Get bookings in the past X hours for the given partner"
					},
					"response": []
				}
			]
		},
		{
			"name": "EAI Data flows",
			"item": [
				{
					"name": "Broadcast Availability",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "70ffd558-bb64-436e-95d5-48bef436aa58",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"UpdatedDate\",date);",
									"console.log('Date', date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date1.getMilliseconds();",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"console.log('Date formatted : ', startdate1);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date2.getMilliseconds();",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"console.log('Date formatted : ', enddate1);",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 139);",
									"console.log('Date : ', date3)",
									"var month = date3.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date3.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date3.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date3.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date3.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date3.getMilliseconds();",
									"var startdate2 = date3.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"console.log('Date formatted : ', startdate2);",
									"",
									"var date4 = new Date();",
									"date4.setDate(date4.getDate() + 158);",
									"console.log('Date : ', date4)",
									"var month = date4.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date4.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date4.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date4.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date4.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date4.getMilliseconds();",
									"var enddate2 = date4.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"console.log('Date formatted : ', enddate2);",
									"",
									"var count1 = \"15\";",
									"var count2 = \"20\";",
									"postman.setEnvironmentVariable(\"Count1\", count1);",
									"postman.setEnvironmentVariable(\"Count2\", count2);",
									"postman.setEnvironmentVariable(\"StartDate1\",startdate1);",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate1);",
									"postman.setEnvironmentVariable(\"StartDate2\",startdate2);",
									"postman.setEnvironmentVariable(\"EndDate2\",enddate2);",
									"",
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"var hotelcode = \"76876876\";",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"09868\";",
									"var authusername = \"cmh\";",
									"var authpassword = \"B3vxi5uGTb\";",
									"postman.setEnvironmentVariable(\"authusername\", authusername);",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"} ",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"var hotelcode = \"00142835\";",
									"var RoomTypeCode1 = \"283023\";",
									"var RoomTypeCode2 = \"321942\";",
									"var authusername = \"cmh\";",
									"var authpassword = \";Z@5<XIg%dDciNT$^yn+\";",
									"postman.setEnvironmentVariable(\"authusername\", authusername);",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00019091\";",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"393333\";",
									"var authusername = \"cmh\";",
									"var authpassword = \"cmh\";",
									"postman.setEnvironmentVariable(\"authusername\", authusername);",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "74835da6-84ca-448a-8b3d-618c33115f39",
								"exec": [
									"pm.test(\"Response is 202 Accepted - Accepted (Will be performed asynchronously)\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"X-Transaction-Id\"), function () {",
									"    pm.expect(pm.response.to.have.headers(\"X-Transaction-Id\"));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{authpassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{authusername}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Basic Y21oOkIzdnhpNXVHVGI=",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"rateBand\": {\n            \"code\": \"SBX\",\n            \"partner\": {\n                \"id\": \"{{HotelCode}}\"\n            }\n        },\n        \"product\": {\n            \"id\": \"{{RoomTypeCode1}}\"\n        },\n        \"dateFrom\": \"{{StartDate1}}\",\n        \"dateTo\": \"{{EndDate1}}\",\n        \"updatedAt\": \"{{UpdatedDate}}\",\n        \"quantity\": {{Count1}}\n    },\n    {\n        \"rateBand\": {\n            \"code\": \"SBX\",\n            \"partner\": {\n                \"id\": \"{{HotelCode}}\"\n            }\n        },\n        \"product\": {\n            \"id\": \"{{RoomTypeCode2}}\"\n        },\n        \"dateFrom\": \"{{StartDate1}}\",\n        \"dateTo\": \"{{EndDate1}}\",\n        \"updatedAt\": \"{{UpdatedDate}}\",\n        \"quantity\": {{Count2}}\n    }\n]"
						},
						"url": {
							"raw": "{{eai_api}}/api/rest/eai/v0/broadcast/channel_room_availability",
							"host": [
								"{{eai_api}}"
							],
							"path": [
								"api",
								"rest",
								"eai",
								"v0",
								"broadcast",
								"channel_room_availability"
							]
						},
						"description": "EAI Update product endpoint"
					},
					"response": []
				},
				{
					"name": "Broadcast Price",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "060dac6a-7863-4e87-8d03-acc4bc09e08c",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"postman.setEnvironmentVariable(\"UpdatedDate\",date);",
									"console.log('Date', date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 119);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date1.getMilliseconds();",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"console.log('Date formatted : ', startdate1);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 138);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date2.getMilliseconds();",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"console.log('Date formatted : ', enddate1);",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 139);",
									"console.log('Date : ', date3)",
									"var month = date3.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date3.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date3.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date3.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date3.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date3.getMilliseconds();",
									"var startdate2 = date3.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"console.log('Date formatted : ', startdate2);",
									"",
									"var date4 = new Date();",
									"date4.setDate(date4.getDate() + 158);",
									"console.log('Date : ', date4)",
									"var month = date4.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date4.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date4.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date4.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date4.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date4.getMilliseconds();",
									"var enddate2 = date4.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"console.log('Date formatted : ', enddate2);",
									"",
									"var Price1 = \"75\";",
									"var Price2 = \"85\";",
									"var Price3 = \"90\";",
									"var Price4 = \"110\";",
									"postman.setEnvironmentVariable(\"Price1\", Price1);",
									"postman.setEnvironmentVariable(\"Price2\", Price2);",
									"postman.setEnvironmentVariable(\"Price3\", Price3);",
									"postman.setEnvironmentVariable(\"Price4\", Price4);",
									"postman.setEnvironmentVariable(\"StartDate1\",startdate1);",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate1);",
									"postman.setEnvironmentVariable(\"StartDate2\",startdate2);",
									"postman.setEnvironmentVariable(\"EndDate2\",enddate2);",
									"",
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"var hotelcode = \"76876876\";",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"09868\";",
									"var authusername = \"cmh\";",
									"var authpassword = \"B3vxi5uGTb\";",
									"postman.setEnvironmentVariable(\"authusername\", authusername);",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"} ",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"var hotelcode = \"00142835\";",
									"var RoomTypeCode1 = \"283023\";",
									"var RoomTypeCode2 = \"321942\";",
									"var authusername = \"cmh\";",
									"var authpassword = \";Z@5<XIg%dDciNT$^yn+\";",
									"postman.setEnvironmentVariable(\"authusername\", authusername);",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00019091\";",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"393333\";",
									"var authusername = \"cmh\";",
									"var authpassword = \"cmh\";",
									"postman.setEnvironmentVariable(\"authusername\", authusername);",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7800c0f1-5341-423c-b1fd-a24ed4af6b2b",
								"exec": [
									"pm.test(\"Response is 202 Accepted - Accepted (Will be performed asynchronously)\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"X-Transaction-Id\"), function () {",
									"    pm.expect(pm.response.to.have.headers(\"X-Transaction-Id\"));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{authusername}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{authpassword}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic Y21oOkIzdnhpNXVHVGI="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"rateBand\": {\n            \"code\": \"SBX\",\n            \"partner\": {\n                \"id\": \"{{HotelCode}}\"\n            }\n        },\n        \"product\": {\n            \"id\": \"{{RoomTypeCode1}}\"\n        },\n        \"dateFrom\": \"{{StartDate1}}\",\n        \"dateTo\": \"{{EndDate1}}\",\n        \"updatedAt\": \"{{UpdatedDate}}\",\n        \"price\": {\n            \"amount\": {{Price1}},\n            \"currencyCode\": \"EUR\"\n        }\n    },\n    {\n        \"rateBand\": {\n            \"code\": \"SBX\",\n            \"partner\": {\n                \"id\": \"{{HotelCode}}\"\n            }\n        },\n        \"product\": {\n            \"id\": \"{{RoomTypeCode1}}\"\n        },\n        \"dateFrom\": \"{{StartDate2}}\",\n        \"dateTo\": \"{{EndDate2}}\",\n        \"updatedAt\": \"{{UpdatedDate}}\",\n        \"price\": {\n            \"amount\": {{Price2}},\n            \"currencyCode\": \"EUR\"\n        }\n    },\n    {\n        \"rateBand\": {\n            \"code\": \"SBX\",\n            \"partner\": {\n                \"id\": \"{{HotelCode}}\"\n            }\n        },\n        \"product\": {\n            \"id\": \"{{RoomTypeCode2}}\"\n        },\n        \"dateFrom\": \"{{StartDate1}}\",\n        \"dateTo\": \"{{EndDate1}}\",\n        \"updatedAt\": \"{{UpdatedDate}}\",\n        \"price\": {\n            \"amount\": {{Price3}},\n            \"currencyCode\": \"EUR\"\n        }\n    },\n    {\n        \"rateBand\": {\n            \"code\": \"SBX\",\n            \"partner\": {\n                \"id\": \"{{HotelCode}}\"\n            }\n        },\n        \"product\": {\n            \"id\": \"{{RoomTypeCode2}}\"\n        },\n        \"dateFrom\": \"{{StartDate2}}\",\n        \"dateTo\": \"{{EndDate2}}\",\n        \"updatedAt\": \"{{UpdatedDate}}\",\n        \"price\": {\n            \"amount\": {{Price4}},\n            \"currencyCode\": \"EUR\"\n        }\n    }\n]"
						},
						"url": {
							"raw": "{{eai_api}}/api/rest/eai/v0/broadcast/channel_room_price",
							"host": [
								"{{eai_api}}"
							],
							"path": [
								"api",
								"rest",
								"eai",
								"v0",
								"broadcast",
								"channel_room_price"
							]
						},
						"description": "EAI Update product endpoint"
					},
					"response": []
				}
			]
		},
		{
			"name": "iResa API",
			"item": [
				{
					"name": "UpdateAvailabilities",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "88b81ef1-48ce-4a05-940f-5ea96e7e97a4",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 71);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate);",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									"",
									"",
									"var count1 = Math.floor(Math.random() * 20);",
									"var count2 = Math.floor(Math.random() * 20);",
									"",
									"if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00142835\";",
									"var RoomTypeCode1 = \"283023\";",
									"var RoomTypeCode2 = \"321942\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00019091\";",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"393333\";",
									"}",
									"else if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00019091\";",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"393333\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"Count1\", count1);",
									"postman.setEnvironmentVariable(\"Count2\", count2);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\",RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0da75ad4-e947-4d08-bbdb-369fa5f7c5fa",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ssoQ\":\"CM-API\",\r\n\t\"ssoP\":\"06c6a93c696029c2da48be5f58b44755\",\r\n    \"data\":{\r\n        \"partnerCode\":\"{{HotelCode}}\",\r\n        \"availabilities\":[\r\n            {\r\n                \"roomTypeCode\":\"{{RoomTypeCode1}}\",\r\n                \"roomTypes\":[\r\n                    {\r\n                        \"dateStart\":\"{{StartDate}}\",\r\n        \t\t\t\t\"dateEnd\":\"{{EndDate}}\",\r\n                        \"stock\":{{Count1}}\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"roomTypeCode\":\"{{RoomTypeCode2}}\",\r\n                \"roomTypes\":[\r\n                    {\r\n                        \"dateStart\":\"{{StartDate}}\",\r\n        \t\t\t\t\"dateEnd\":\"{{EndDate}}\",\r\n                        \"stock\":{{Count2}}\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    \"tokenUtilisateurSession\":\"\"\r\n}"
						},
						"url": {
							"raw": "{{iresa_host}}/apipro/UpdateAvailabilities/2",
							"host": [
								"{{iresa_host}}"
							],
							"path": [
								"apipro",
								"UpdateAvailabilities",
								"2"
							]
						},
						"description": "Update Availabilities API call from CMHUB. Its a direct call from CMHUB to iResa without EAI"
					},
					"response": []
				},
				{
					"name": "UpdateAvailabilities(EAI -> iResa Call)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "88b81ef1-48ce-4a05-940f-5ea96e7e97a4",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 71);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate);",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									"",
									"var count1 = Math.floor(Math.random() * 20);",
									"var count2 = Math.floor(Math.random() * 20);",
									"",
									"if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00142835\";",
									"var RoomTypeCode1 = \"283023\";",
									"var RoomTypeCode2 = \"321942\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00019091\";",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"393333\";",
									"}",
									"else if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00019091\";",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"393333\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"Count1\", count1);",
									"postman.setEnvironmentVariable(\"Count2\", count2);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\",RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0da75ad4-e947-4d08-bbdb-369fa5f7c5fa",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ssoQ\":\"eai\",\r\n\t\"ssoP\":\"d75028d9b0c5bc1ecf14265b732e198b\",\r\n    \"data\":{\r\n        \"partnerCode\":\"{{HotelCode}}\",\r\n        \"availabilities\":[\r\n            {\r\n                \"roomTypeCode\":\"{{RoomTypeCode1}}\",\r\n                \"roomTypes\":[\r\n                    {\r\n                        \"dateStart\":\"{{StartDate}}\",\r\n        \t\t\t\t\"dateEnd\":\"{{EndDate}}\",\r\n                        \"stock\":{{Count1}}\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"roomTypeCode\":\"{{RoomTypeCode2}}\",\r\n                \"roomTypes\":[\r\n                    {\r\n                        \"dateStart\":\"{{StartDate}}\",\r\n        \t\t\t\t\"dateEnd\":\"{{EndDate}}\",\r\n                        \"stock\":{{Count2}}\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    \"tokenUtilisateurSession\":\"\"\r\n}"
						},
						"url": {
							"raw": "{{iresa_host}}/apipro/UpdateAvailabilities/2",
							"host": [
								"{{iresa_host}}"
							],
							"path": [
								"apipro",
								"UpdateAvailabilities",
								"2"
							]
						},
						"description": "Update availabilities call from EAI to iResa\n"
					},
					"response": []
				},
				{
					"name": "UpdateRates",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6683faa0-310c-49c4-bf5c-b14dd66f83e7",
								"exec": [
									"var Price1 = 100;",
									"var Price2 = 150;",
									"",
									"postman.setEnvironmentVariable(\"Price1\", Price1);",
									"postman.setEnvironmentVariable(\"Price2\", Price2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "acc97c67-8997-484e-ae0d-5744e9b4e08e",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ssoQ\":\"CM-API\",\r\n\t\"ssoP\":\"06c6a93c696029c2da48be5f58b44755\",\r\n    \"data\":{\r\n        \"partnerCode\":\"{{HotelCode}}\",\r\n        \"rates\":[\r\n            {\r\n                \"roomTypeCode\":\"{{RoomTypeCode1}}\",\r\n                \"currency\":\"EUR\",\r\n                \"roomTypes\":[\r\n                    {\r\n                        \"dateStart\":\"{{StartDate}}\",\r\n        \t\t\t\t\"dateEnd\":\"{{EndDate}}\",\r\n                        \"amount\":{{Price1}}\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"roomTypeCode\":\"{{RoomTypeCode2}}\",\r\n                \"currency\":\"EUR\",\r\n                \"roomTypes\":[\r\n                    {\r\n                        \"dateStart\":\"{{StartDate}}\",\r\n        \t\t\t\t\"dateEnd\":\"{{EndDate}}\",\r\n                        \"amount\":{{Price2}}\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    \"tokenUtilisateurSession\":\"\"\r\n}"
						},
						"url": {
							"raw": "{{iresa_host}}/apipro/UpdateRates/2",
							"host": [
								"{{iresa_host}}"
							],
							"path": [
								"apipro",
								"UpdateRates",
								"2"
							]
						},
						"description": "Update Room Rates API call from CMHUB. Its a direct call from CMHUB to iResa without EAI"
					},
					"response": []
				},
				{
					"name": "UpdateRates(EAI -> iResa Call)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6683faa0-310c-49c4-bf5c-b14dd66f83e7",
								"exec": [
									"var Price1 = 100;",
									"var Price2 = 150;",
									"",
									"postman.setEnvironmentVariable(\"Price1\", Price1);",
									"postman.setEnvironmentVariable(\"Price2\", Price2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "acc97c67-8997-484e-ae0d-5744e9b4e08e",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ssoQ\":\"CM-API\",\r\n\t\"ssoP\":\"06c6a93c696029c2da48be5f58b44755\",\r\n    \"data\":{\r\n        \"partnerCode\":\"{{HotelCode}}\",\r\n        \"rates\":[\r\n            {\r\n                \"roomTypeCode\":\"{{RoomTypeCode1}}\",\r\n                \"currency\":\"EUR\",\r\n                \"roomTypes\":[\r\n                    {\r\n                        \"dateStart\":\"{{StartDate}}\",\r\n        \t\t\t\t\"dateEnd\":\"{{EndDate}}\",\r\n                        \"amount\":{{Price1}}\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"roomTypeCode\":\"{{RoomTypeCode2}}\",\r\n                \"currency\":\"EUR\",\r\n                \"roomTypes\":[\r\n                    {\r\n                        \"dateStart\":\"{{StartDate}}\",\r\n        \t\t\t\t\"dateEnd\":\"{{EndDate}}\",\r\n                        \"amount\":{{Price2}}\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    \"tokenUtilisateurSession\":\"\"\r\n}"
						},
						"url": {
							"raw": "{{iresa_host}}/apipro/UpdateRates/2",
							"host": [
								"{{iresa_host}}"
							],
							"path": [
								"apipro",
								"UpdateRates",
								"2"
							]
						},
						"description": "Update Room Rates API call from EAI to iResa\n"
					},
					"response": []
				}
			],
			"description": "This API is used by CMHUB to update availability and rates in iResa, to get rooms for a partner from iResa and to get bookings.\n"
		},
		{
			"name": "SBX API - Integration",
			"item": [
				{
					"name": "PIng",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n  <soap:Body>\n  \t\n\t<ota:OTA_PingRQ EchoToken=\"123\" Version=\"1.0\" TimeStamp=\"2016-05-26T11:11:50-04:00\" xmlns=\"http://www.opentravel.org/OTA/2003/05\">\n      <ota:EchoData>Are you there?</ota:EchoData>\n\t</ota:OTA_PingRQ>\n\t\n  </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "HotelAvailRQ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5da26ced-ce04-42da-8990-85b91cfa04e2",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "15600f50-796a-478d-bd1e-7dc0e31a8009",
								"exec": [
									"console.log('From the pre-request script');",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"var hotelcode = \"76876876\";",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"var hotelcode = \"00142835\";",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"var hotelcode = \"00019091\";",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelAvailRQ>\n\t\t<ota:AvailRequestSegments>\n\t\t\t<ota:AvailRequestSegment AvailReqType = \"Room\">\n\t\t\t\t<ota:HotelSearchCriteria>\n\t\t\t\t\t<ota:Criterion>\n\t\t\t\t\t\t<ota:HotelRef HotelCode=\"{{HotelCode}}\" />\n\t\t\t\t\t</ota:Criterion>\n\t\t\t\t</ota:HotelSearchCriteria>\n\t\t\t</ota:AvailRequestSegment>\n\t\t</ota:AvailRequestSegments>\n\t</ota:OTA_HotelAvailRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "HotelRateAmountNotif",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e771bb7a-5f41-4fd2-a1ad-a96e97ed44b8",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "effb7fac-8a81-4954-923a-9b41a5d78ebe",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate1);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate1);",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 71);",
									"console.log('Date : ', date3)",
									"var month = date3.getMonth() + 1;",
									"var startdate2 = date3.getFullYear() + \"-\" + month + \"-\" + date3.getDate();",
									"console.log('Date formatted : ', startdate2);",
									"",
									"var date4 = new Date();",
									"date4.setDate(date4.getDate() + 90);",
									"console.log('Date : ', date4)",
									"var month = date4.getMonth() + 1;",
									"var enddate2 = date4.getFullYear() + \"-\" + month + \"-\" + date4.getDate();",
									"console.log('Date formatted : ', enddate2);",
									"",
									"var Price1 = \"120\";",
									"var Price2 = \"130\";",
									"var Price3 = \"90\";",
									"var Price4 = \"95\";",
									"postman.setEnvironmentVariable(\"Price1\", Price1);",
									"postman.setEnvironmentVariable(\"Price2\", Price2);",
									"postman.setEnvironmentVariable(\"Price3\", Price3);",
									"postman.setEnvironmentVariable(\"Price4\", Price4);",
									"postman.setEnvironmentVariable(\"StartDate1\",startdate1);",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate1);",
									"postman.setEnvironmentVariable(\"StartDate2\",startdate2);",
									"postman.setEnvironmentVariable(\"EndDate2\",enddate2);",
									"",
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var RoomTypeCode1 = \"09836\";",
									"var RoomTypeCode2 = \"09868\";",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"} ",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var RoomTypeCode1 = \"321942\";",
									"var RoomTypeCode2 = \"283023\";",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var RoomTypeCode1 = \"235854\";",
									"var RoomTypeCode2 = \"393333\";",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n         <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelRateAmountNotifRQ>\n\t  <ota:RateAmountMessages HotelCode = \"{{HotelCode}}\">\n\t    <ota:RateAmountMessage>\n\t      <ota:StatusApplicationControl RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode1}}\" IsRoom = \"true\"/>\n\t      <ota:Rates>\n\t        <ota:Rate Start = \"{{StartDate1}}\" End = \"{{EndDate1}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"{{Price1}}\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t        <ota:Rate Start = \"{{StartDate2}}\" End = \"{{EndDate2}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"{{Price2}}\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t      </ota:Rates>\n\t    </ota:RateAmountMessage>\n\t    <ota:RateAmountMessage>\n\t      <ota:StatusApplicationControl RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode2}}\" IsRoom = \"true\"/>\n\t      <ota:Rates>\n\t        <ota:Rate Start = \"{{StartDate1}}\" End = \"{{EndDate1}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"{{Price3}}\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t        <ota:Rate Start = \"{{StartDate2}}\" End = \"{{EndDate2}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"{{Price4}}\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t      </ota:Rates>\n\t    </ota:RateAmountMessage>\n\t  </ota:RateAmountMessages>\n\t</ota:OTA_HotelRateAmountNotifRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Update rates for a room"
					},
					"response": []
				},
				{
					"name": "HotelRatePlanRQ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9766c4eb-37d2-4cbb-b655-a27072593f93",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 90);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6675d827-404e-4838-8dae-2ad642239f65",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var price1 = postman.getEnvironmentVariable('Price1');",
									"var price2 = postman.getEnvironmentVariable('Price2');",
									"var price3 = postman.getEnvironmentVariable('Price3');",
									"var price4 = postman.getEnvironmentVariable('Price4');",
									"",
									"console.log(jsonData);",
									"",
									"console.log('Price1 : ',jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['0']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax']);",
									"console.log('Price2 : ',jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['20']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax']);",
									"console.log('Price3 : ',jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['40']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax']);",
									"console.log('Price4 : ',jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['60']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax']);",
									"console.log('RoomTypeCode1 : ',jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['0']['$']['InvTypeCode']);",
									"console.log('RoomTypeCode2 : ',jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['40']['$']['InvTypeCode']);",
									"",
									"var roomtype1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['0']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['40']['$']['InvTypeCode'];",
									"var getprice1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['0']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax'];",
									"var getprice2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['20']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax'];",
									"var getprice3 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['40']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax'];",
									"var getprice4 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['60']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Read availabilties - Contains first Roomtypecode: \"+RoomTypeCode1+\" as expected\";",
									"pm.test(string, function () {",
									"expected = RoomTypeCode1;",
									"pm.expect(roomtype1).to.include(expected);",
									"});",
									"",
									"string = \"Read availabilties - Contains second Roomtypecode: \"+RoomTypeCode2+\" as expected\"",
									"pm.test(string, function () {",
									"expected = RoomTypeCode2;",
									"pm.expect(roomtype2).to.include(expected);",
									"});",
									"",
									"string = \"Read room rates for first Roomtypecode: \"+RoomTypeCode1+\" - Same for first 20 consecutive days as expected\";",
									"pm.test(string, function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=0;i<20; i++)",
									"{",
									"if(getprice1 == price1 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"string = \"Read room rates for first Roomtypecode: \"+RoomTypeCode1+\" - Same for 21 to 40 days as expected\"",
									"pm.test(string, function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=20;i<40; i++)",
									"{",
									"if(getprice2 == price2 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"string = \"Read room rates for second Roomtypecode: \"+RoomTypeCode2+\" - Same for first 20 consecutive days as expected\"",
									"pm.test(string, function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=40;i<60; i++)",
									"{",
									"if(getprice3 == price3 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"string = \"Read room rates for second Roomtypecode: \"+RoomTypeCode2+\" - Same for 21 to 40 days as expected\";",
									"pm.test(string, function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=60;i<80; i++)",
									"{",
									"if(getprice4 == price4 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelRatePlanRQ EchoToken=\"echo\"> \n\t\t<ota:RatePlans>\n\t\t\t<ota:RatePlan>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\"/>\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/> \n\t\t\t\t<ota:RatePlanCandidates>\n\t\t\t\t\t<ota:RatePlanCandidate RatePlanCode = \"SBX\"/> \n\t\t\t\t</ota:RatePlanCandidates>\n\t\t\t</ota:RatePlan>\n\t\t</ota:RatePlans>\n\t</ota:OTA_HotelRatePlanRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get rates for the given partner between a start and end date"
					},
					"response": []
				},
				{
					"name": "HotelInvCountNotif",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99da692b-ca4a-43da-ac4f-68a244d563f3",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8e968c46-a238-4ef9-a89b-4c87c9760aa6",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate);",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									"",
									"var count1 = 20;",
									"var count2 = 15;",
									"",
									"postman.setEnvironmentVariable(\"count1\", count1);",
									"postman.setEnvironmentVariable(\"count2\", count2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n          <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n<soap:Body>\n\n<ota:OTA_HotelInvCountNotifRQ>\n  <ota:Inventories HotelCode = \"{{HotelCode}}\">\n  \n    <ota:Inventory>\n      <ota:StatusApplicationControl Start = \"{{StartDate}}\" End = \"{{EndDate}}\" RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode1}}\" IsRoom = \"true\"/>\n      <ota:InvCounts>\n        <ota:InvCount CountType = \"2\" Count = \"{{count1}}\"/>\n      </ota:InvCounts>\n    </ota:Inventory>\n    \n    <ota:Inventory>\n      <ota:StatusApplicationControl Start = \"{{StartDate}}\" End = \"{{EndDate}}\" RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode2}}\" IsRoom = \"true\"/>\n      <ota:InvCounts>\n        <ota:InvCount CountType = \"2\" Count = \"{{count2}}\"/>\n      </ota:InvCounts>\n    </ota:Inventory>\n    \n  </ota:Inventories>\n</ota:OTA_HotelInvCountNotifRQ>\n\n</soap:Body>\n</soap:Envelope>\n"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Update availability"
					},
					"response": []
				},
				{
					"name": "HotelInvCountRQ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "598c606d-c9c5-436a-b8c5-40ddeae1a1b4",
								"exec": [
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate);",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c5ee397-460b-4d7e-b249-02f3a250410a",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var count1 = postman.getEnvironmentVariable('count1');",
									"var count2 = postman.getEnvironmentVariable('count2');",
									"",
									"console.log(jsonData);",
									"console.log('RoomTypeCode2',RoomTypeCode2)",
									"console.log('Count1 : ', jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:InvCounts']['ns2:InvCount']['$']['Count']);",
									"console.log('Count2 : ',jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:InvCounts']['ns2:InvCount']['$']['Count']);",
									"console.log(jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:StatusApplicationControl']['$']['InvTypeCode']);",
									"console.log(jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:StatusApplicationControl']['$']['InvTypeCode']);",
									"",
									"var roomtype1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var getcount1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"var getcount2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains HoteCode value\", function () {",
									"expected = HotelCode;",
									"  pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains first Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode1;",
									"pm.expect(roomtype1).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains second Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode2;",
									"pm.expect(roomtype2).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties for first Roomtypecode - Available for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=0;i<20; i++)",
									"{",
									"if(getcount1 == count1 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"    console.log(increment);",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties for second Roomtypecode - Available for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=20;i<40; i++)",
									"{",
									"if(getcount2 == count2 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"    console.log(increment);",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelInvCountRQ>\n\t\t<ota:HotelInvCountRequests>\n\t\t\t<ota:HotelInvCountRequest>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\" />\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/>\n\t\t\t\t<ota:RoomTypeCandidates>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode1}}\"/>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode2}}\"/>\n\t\t\t\t</ota:RoomTypeCandidates>\n\t\t\t</ota:HotelInvCountRequest>\n\t\t</ota:HotelInvCountRequests>\n\t</ota:OTA_HotelInvCountRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get availability data for a given partner and rooms between start and end date."
					},
					"response": []
				},
				{
					"name": "Push booking - Commit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "240dc66d-4e6c-4965-adbe-7e14cf184e2c",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains status : success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Doesn't contain validation info error message\", function () {",
									"var expected = \"This form should not contain extra fields.\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									"",
									"pm.test(\"Doesn't contain date info error message\", function () {",
									"var expected = \"This value is not valid.\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "82015cff-f2e8-4851-99e5-26675f90be51",
								"exec": [
									"var randomId1 = Math.floor(Math.random() * 200000000);",
									"postman.setEnvironmentVariable(\"randomId1\", randomId1)",
									"",
									"var voucherNumber = Math.floor(Math.random() * 20000000);",
									"postman.setEnvironmentVariable(\"voucherNumber\", voucherNumber)",
									"",
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"console.log('Date', date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 53);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"console.log('Date formatted : ', enddate);",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 54);",
									"console.log('Date : ', date3)",
									"var month = date3.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date3.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date3.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date3.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date3.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate1 = date3.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"console.log('Date formatted : ', enddate1);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate);",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate1);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"TTDNpD3ujbxVSpycMLy3bgJGcPrXCZTRdmcZzmK4\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"wjrhqYajKs6M5ug7ygFDymnLwxc5f97ryhmq9FE7\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"QexP2eYZRwPcyB5x5LjpnqzNw2U4mWDPzat5Fds7\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\",username);",
									"postman.setEnvironmentVariable(\"password\",password);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "QexP2eYZRwPcyB5x5LjpnqzNw2U4mWDPzat5Fds7",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"booking\":{\n      \"partnerCode\":\"{{HotelCode}}\",\n      \"status\":\"Commit\",\n      \"reservationId\":\"RESA-{{randomId1}}\",\n      \"voucherNumber\": \"{{voucherNumber}}\",\n      \"createDate\":\"{{Date}}\",\n      \"lastModifyDate\":\"{{Date}}\",\n      \"dateStart\":\"{{StartDate}}\",\n      \"dateEnd\":\"{{EndDate1}}\",\n      \"totalAmount\":200,\n      \"currency\":\"EUR\",\n      \"requests\":\"Something i want to request\",\n      \"comments\":\"Something i need to comment about me and disabilities\",\n      \"roomTypes\":[\n         {\n            \"roomTypeCode\":\"{{RoomTypeCode1}}\",\n            \"totalAmount\":200,\n            \"currency\":\"EUR\",\n            \"rates\":[\n               {\n                  \"date\":\"{{StartDate}}\",\n                  \"amount\":0,\n                  \"currency\":\"EUR\"\n               },\n               {\n                  \"date\":\"{{EndDate}}\",\n                  \"amount\":100,\n                  \"currency\":\"EUR\"\n               }\n            ],\n            \"guests\":[\n               {\n                  \"isMain\":true,\n                  \"age\":23,\n                  \"name\":\"Carles\",\n                  \"surname\":\"Puigdemont\",\n                  \"email\":\"carles.puigdemont@brussels.com\",\n                  \"phone\":\"454325454\",\n                  \"address\":\"Brussels\",\n                  \"city\":\"Brussels\",\n                  \"zip\":\"R9R6+QX\",\n                  \"state\":\"Brussels\",\n                  \"country\":\"be\",\n                  \"countryCode\":\"Belgium\"\n               },\n               {\n                  \"isMain\":false,\n                  \"age\":36,\n                  \"name\":\"Pepito\",\n                  \"surname\":\"Palotes\",\n                  \"email\":\"pepito.palotes@brussels.com\",\n                  \"phone\":\"454325454\",\n                  \"address\":\"Brussels\",\n                  \"city\":\"Brussels\",\n                  \"zip\":\"R9R6+QX\",\n                  \"state\":\"Brussels\",\n                  \"country\":\"be\",\n                  \"countryCode\":\"Belgium\"\n               }\n            ]\n         }\n      ]\n   }\n}"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/PushBookings",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"PushBookings"
							]
						},
						"description": "Get booking data for a given partner between start & end date."
					},
					"response": []
				},
				{
					"name": "ReadRQ - Bookings(DataType - LastUpdateDate)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "240dc66d-4e6c-4965-adbe-7e14cf184e2c",
								"exec": [
									"var randomId1 = postman.getEnvironmentVariable(\"randomId1\");",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: Success\", function () {",
									"var expected = \"Success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: ReservationsList\", function () {",
									"var expected = \"ReservationsList\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains recent Commit booking with Reservation ID in Response body: RESA-\"+randomId1;",
									"pm.test(string, function(){",
									"var expected = \"RESA-\"+randomId1;",
									"pm.expect(pm.response.text()).to.include(expected);   ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "82015cff-f2e8-4851-99e5-26675f90be51",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() - 3);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\"+01:00\";",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 1);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\"+01:00\";",
									"console.log('Date formatted : ', enddate);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_ReadRQ>\n\t\t<ota:ReadRequests>\n\t\t\t<ota:HotelReadRequest HotelCode = \"{{HotelCode}}\">\n\t\t\t\t<ota:SelectionCriteria Start = \"{{StartDate}}\" End = \"{{EndDate}}\" DateType = \"LastUpdateDate\"/>\n\t\t\t</ota:HotelReadRequest>\n\t\t</ota:ReadRequests>\n\t</ota:OTA_ReadRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get booking data for a given partner between start & end date based on 'LastUpdateDate'"
					},
					"response": []
				}
			]
		},
		{
			"name": "BB8 - JSON API",
			"item": [
				{
					"name": "PIng",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c4495ea-5f24-4b9a-850e-6525fd10e7c7",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5acf3c06-22db-408b-a4a6-ca232c2a3234",
								"exec": [
									"if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"bb8\";",
									"var password = \"w25atrJV9uGugu6e6by6yJdx5rvzJZVJF9z5nTAZ\";",
									"}",
									"else if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var username = \"bb8\";",
									"var password = \"45nfg94zneqzmnwTtgtnjQU3xsH7H4WT9g6vdDmd\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"bb8\";",
									"var password = \"r3p8DjykAqFQ8HeYvVWvSsvL3gg94sMUsPJEJ5vP\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\",username);",
									"postman.setEnvironmentVariable(\"password\",password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/external/_ping",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"_ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Availability",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var hotelcode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"",
									"pm.test(\"Status : 200 - Response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains Partner ID in response body\", function () {",
									"var expected = hotelcode;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains Room Code-1 in response body\", function () {",
									"var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains Room Code-2 in response body\", function () {",
									"var expected = RoomTypeCode2;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains date of availability in response body\", function () {",
									"var expected = StartDate;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d69e1a8-5992-4f76-bbf8-bccbec34eb15",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 62);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date1.getMilliseconds();",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + day;",
									"console.log('Date formatted : ', startdate1);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 63);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date2.getMilliseconds();",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + day;",
									"console.log('Date formatted : ', enddate1);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate1);",
									"postman.setEnvironmentVariable(\"EndDate\",enddate1);",
									"",
									"var Count1 = 5;",
									"var Count2 = 10;",
									"postman.setEnvironmentVariable(\"Count1\",Count1);",
									"postman.setEnvironmentVariable(\"Count2\",Count2);",
									"",
									"if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00028216\";",
									"var RoomTypeCode1 = \"CP000000585\";",
									"var RoomTypeCode2 = \"CP000000589\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}",
									"else if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00011158\";",
									"var RoomTypeCode1 = \"5465478\";",
									"var RoomTypeCode2 = \"467568\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00532636\";",
									"var RoomTypeCode1 = \"980386\";",
									"var RoomTypeCode2 = \"980392\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "45nfg94zneqzmnwTtgtnjQU3xsH7H4WT9g6vdDmd",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"date\": \"{{StartDate}}\",\n    \"quantity\": {{Count1}},\n    \"type\": \"instant\",\n    \"rateBandCode\": \"SBX\",\n    \"externalPartnerId\": \"{{HotelCode}}\",\n    \"externalRoomId\": \"{{RoomTypeCode1}}\",\n    \"externalCreatedAt\": \"{{Date}}\",\n    \"externalUpdatedAt\": \"{{Date}}\"\n  },\n  {\n    \"date\": \"{{StartDate}}\",\n    \"quantity\": {{Count2}},\n    \"type\": \"instant\",\n    \"rateBandCode\": \"SBX\",\n    \"externalPartnerId\": \"{{HotelCode}}\",\n    \"externalRoomId\": \"{{RoomTypeCode2}}\",\n    \"externalCreatedAt\": \"{{Date}}\",\n    \"externalUpdatedAt\": \"{{Date}}\"\n  }\n]"
						},
						"url": {
							"raw": "{{host}}/api/external/availabilities?",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"availabilities"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Availability - Missing ExtenalPartnerID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"pm.test(\"Status : 400 - Bad request response\", function () {",
									"    pm.response.to.have.status(400)",
									"});",
									"",
									"pm.test(\"Contains error string with description : Missing `externalPartnerId`\", function () {",
									"var expected = \"Missing `externalPartnerId`\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d69e1a8-5992-4f76-bbf8-bccbec34eb15",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "45nfg94zneqzmnwTtgtnjQU3xsH7H4WT9g6vdDmd",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"date\": \"{{StartDate}}\",\n    \"quantity\": 3,\n    \"type\": \"instant\",\n    \"rateBandCode\": \"SBX\",\n    \"externalRoomId\": \"{{RoomTypeCode1}}\",\n    \"externalCreatedAt\": \"{{Date}}\",\n    \"externalUpdatedAt\": \"{{Date}}\"\n  },\n  {\n    \"date\": \"{{StartDate}}\",\n    \"quantity\": 5,\n    \"type\": \"instant\",\n    \"rateBandCode\": \"SBX\",\n    \"externalPartnerId\": \"{{HotelCode}}\",\n    \"externalRoomId\": \"{{RoomTypeCode2}}\",\n    \"externalCreatedAt\": \"{{Date}}\",\n    \"externalUpdatedAt\": \"{{Date}}\"\n  }\n]"
						},
						"url": {
							"raw": "{{host}}/api/external/availabilities?",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"availabilities"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Availability - No PartnerID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var hotelcode = postman.getEnvironmentVariable(\"HotelCode\");",
									"",
									"pm.test(\"Status : 400 - Bad request response\", function () {",
									"    pm.response.to.have.status(400)",
									"});",
									"",
									"pm.test(\"Contains error string with description\", function () {",
									"var expected = \"The partner with code `\"+hotelcode+\"`  has not been found\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d69e1a8-5992-4f76-bbf8-bccbec34eb15",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"console.log('Date : ', date)",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date.getMilliseconds();",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"console.log('Date formatted : ', date);",
									"",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"",
									"",
									"var hotelcode = \"000282161\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"date\": \"{{StartDate}}\",\n    \"quantity\": 3,\n    \"type\": \"instant\",\n    \"rateBandCode\": \"SBX\",\n    \"externalPartnerId\": \"{{HotelCode}}\",\n    \"externalRoomId\": \"{{RoomTypeCode1}}\",\n    \"externalCreatedAt\": \"{{Date}}\",\n    \"externalUpdatedAt\": \"{{Date}}\"\n  },\n  {\n    \"date\": \"{{StartDate}}\",\n    \"quantity\": 5,\n    \"type\": \"instant\",\n    \"rateBandCode\": \"SBX\",\n    \"externalPartnerId\": \"{{HotelCode}}\",\n    \"externalRoomId\": \"{{RoomTypeCode2}}\",\n    \"externalCreatedAt\": \"{{Date}}\",\n    \"externalUpdatedAt\": \"{{Date}}\"\n  }\n]"
						},
						"url": {
							"raw": "{{host}}/api/external/availabilities?",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"availabilities"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Availability - No Product Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var hotelcode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"",
									"pm.test(\"Status : 400 - Bad request response\", function () {",
									"    pm.response.to.have.status(400)",
									"});",
									"",
									"pm.test(\"Contains error string with description\", function () {",
									"var expected = \"The product code `\"+RoomTypeCode2+\"` for Partner `\"+hotelcode+\"` is not registered in SBX Channel Manager.\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d69e1a8-5992-4f76-bbf8-bccbec34eb15",
								"exec": [
									"if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00028216\";",
									"var RoomTypeCode1 = \"CP000000585\";",
									"var RoomTypeCode2 = \"CP00000058\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}",
									"else if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00011158\";",
									"var RoomTypeCode1 = \"467568\";",
									"var RoomTypeCode2 = \"546547\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00532636\";",
									"var RoomTypeCode1 = \"980386\";",
									"var RoomTypeCode2 = \"98039\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"date\": \"{{StartDate}}\",\n    \"quantity\": 3,\n    \"type\": \"instant\",\n    \"rateBandCode\": \"SBX\",\n    \"externalPartnerId\": \"{{HotelCode}}\",\n    \"externalRoomId\": \"{{RoomTypeCode1}}\",\n    \"externalCreatedAt\": \"{{Date}}\",\n    \"externalUpdatedAt\": \"{{Date}}\"\n  },\n  {\n    \"date\": \"{{StartDate}}\",\n    \"quantity\": 5,\n    \"type\": \"instant\",\n    \"rateBandCode\": \"SBX\",\n    \"externalPartnerId\": \"{{HotelCode}}\",\n    \"externalRoomId\": \"{{RoomTypeCode2}}\",\n    \"externalCreatedAt\": \"{{Date}}\",\n    \"externalUpdatedAt\": \"{{Date}}\"\n  }\n]"
						},
						"url": {
							"raw": "{{host}}/api/external/availabilities?",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"availabilities"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Availability",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var data = JSON.parse(responseBody);",
									"var Count1 = postman.getEnvironmentVariable(\"Count1\");",
									"var Count2 = postman.getEnvironmentVariable(\"Count2\");",
									"var getPrice1 = data[0].quantity;",
									"getPrice1 = getPrice1.toString();",
									"var getPrice2 = data[2].quantity;",
									"getPrice2 = getPrice2.toString();",
									"",
									"console.log('Price1 : ',data[0].quantity);",
									"console.log('Price2 : ',data[2].quantity )",
									"console.log('Count1 :'  ,Count1);",
									"",
									"pm.test(\"Status : 200 - Response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains Partner ID in Response body\", function () {",
									"var expected = HotelCode;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Room 1 :\"+RoomTypeCode1+\" in Response body\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Room 2 :\"+RoomTypeCode2+\" in Response body\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode2;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Room 1 :\"+RoomTypeCode1+\" and quantity is :\"+Count1;",
									"pm.test(string, function () {",
									"var expected = Count1;",
									"pm.expect(getPrice1).to.be.eql(expected);",
									"});",
									"",
									"var string = \"Room 2 :\"+RoomTypeCode2+\" and quantity is :\"+Count2;",
									"pm.test(string, function () {",
									"var expected = Count2;",
									"pm.expect(getPrice2).to.be.eql(expected);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "40504db4-6bd6-4d32-9266-6531d7b86c07",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 62);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date1.getMilliseconds();",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"console.log('Date formatted : ', startdate1);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 63);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var milli = date2.getMilliseconds();",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec+\".\"+milli+\"Z\";",
									"console.log('Date formatted : ', enddate1);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate1);",
									"postman.setEnvironmentVariable(\"EndDate\",enddate1);",
									"",
									"if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00028216\";",
									"var RoomTypeCode1 = \"CP000000585\";",
									"var RoomTypeCode2 = \"CP000000589\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}",
									"else if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00011158\";",
									"var RoomTypeCode1 = \"467568\";",
									"var RoomTypeCode2 = \"5465478\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00532636\";",
									"var RoomTypeCode1 = \"980386\";",
									"var RoomTypeCode2 = \"980392\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/external/availabilities?startDate={{StartDate}}&endDate={{EndDate}}&externalPartnerIds={{HotelCode}}&rateBandCodes[]=SBX&externalRoomIds={{RoomTypeCode1}},{{RoomTypeCode2}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"availabilities"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{StartDate}}"
								},
								{
									"key": "endDate",
									"value": "{{EndDate}}"
								},
								{
									"key": "externalPartnerIds",
									"value": "{{HotelCode}}"
								},
								{
									"key": "rateBandCodes[]",
									"value": "SBX"
								},
								{
									"key": "externalRoomIds",
									"value": "{{RoomTypeCode1}},{{RoomTypeCode2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Availability - No Partner ID in API call",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"pm.test(\"Status : 500 - Internal Server error\", function () {",
									"    pm.response.to.have.status(500)",
									"});",
									"",
									"pm.test(\"Contains error string : Parameter 'externalPartnerIds' is mandatory.\", function () {",
									"var expected = \"externalPartnerIds\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "40504db4-6bd6-4d32-9266-6531d7b86c07",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/external/availabilities?startDate={{StartDate}}&endDate={{EndDate}}&externalRoomIds[]={{RoomTypeCode1}}&rateBandCodes[]=SBX",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"availabilities"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{StartDate}}"
								},
								{
									"key": "endDate",
									"value": "{{EndDate}}"
								},
								{
									"key": "externalRoomIds[]",
									"value": "{{RoomTypeCode1}}"
								},
								{
									"key": "rateBandCodes[]",
									"value": "SBX"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Rooms",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"",
									"pm.test(\"Status : 200 - Response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains Partner ID in response body\", function () {",
									"var expected = HotelCode;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Room 1 :\"+RoomTypeCode1+\" in Response body\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Room 2 :\"+RoomTypeCode2+\" in Response body\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode2;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d69e1a8-5992-4f76-bbf8-bccbec34eb15",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"console.log('Date : ', date)",
									"var month = date.getMonth() + 1;",
									"date = date.getFullYear() + \"-\" + month + \"-\" + date.getDate();",
									"console.log('Date formatted : ', date);",
									"",
									"var startdate = new Date();",
									"startdate.setDate(startdate.getDate() + 62);",
									"console.log('Date : ', startdate);",
									"",
									"var enddate = new Date();",
									"enddate.setDate(enddate.getDate() + 63);",
									"console.log('Date : ', enddate);",
									"",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"postman.setEnvironmentVariable(\"StartDate\",startdate);",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									"",
									"if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00028216\";",
									"var RoomTypeCode1 = \"CP000000585\";",
									"var RoomTypeCode2 = \"CP000000589\";",
									"}",
									"else if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var hotelcode = \"00011158\";",
									"var RoomTypeCode1 = \"467568\";",
									"var RoomTypeCode2 = \"5465478\";",
									"}",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00532636\";",
									"var RoomTypeCode1 = \"980386\";",
									"var RoomTypeCode2 = \"980392\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/external/rooms?externalPartnerIds={{HotelCode}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"rooms"
							],
							"query": [
								{
									"key": "externalPartnerIds",
									"value": "{{HotelCode}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Rooms - No Partner ID in API call",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"pm.test(\"Status : 400 - Bad request response\", function () {",
									"    pm.response.to.have.status(400)",
									"});",
									"",
									"pm.test(\"Contains error string with description : externalPartnerIds is mandatory\", function () {",
									"var expected = \"externalPartnerIds is mandatory\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d69e1a8-5992-4f76-bbf8-bccbec34eb15",
								"exec": [
									"",
									"var hotelcode = \"\";",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}/api/external/rooms?",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"external",
								"rooms"
							],
							"query": [
								{
									"key": "externalPartnerIds[]",
									"value": "{{HotelCode}}",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Push booking - From iResa API - Commit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "240dc66d-4e6c-4965-adbe-7e14cf184e2c",
								"exec": [
									"if(pm.environment.name ==\"PREPROD\")",
									"{",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains status : success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Not in Output : Partner Code is not valid\", function () {",
									"var expected = \"This value should not be null.\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									"",
									"pm.test(\"Not in Output : Partner Code is not valid\", function () {",
									"var expected = \"Product is not valid\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									"",
									"pm.test(\"Contains transaction ID in output\", function () {",
									"var expected = \"transaction\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"}",
									"else",
									"{",
									"    pm.test.skip(\"Doesnt exists in SANDBOX\", function(){",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "82015cff-f2e8-4851-99e5-26675f90be51",
								"exec": [
									"var randomId1 = Math.floor(Math.random() * 200000000);",
									"postman.setEnvironmentVariable(\"randomId1\", randomId1)",
									"",
									"var voucherNumber = Math.floor(Math.random() * 20000000);",
									"postman.setEnvironmentVariable(\"voucherNumber\", voucherNumber)",
									"",
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"console.log('Date', date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 62);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 63);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"console.log('Date formatted : ', enddate);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"TTDNpD3ujbxVSpycMLy3bgJGcPrXCZTRdmcZzmK4\";",
									"var hotelcode = \"00538271\";",
									"postman.setNextRequest(null);",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var hotelcode = \"00532636\";",
									"var username = \"iresa\";",
									"var password = \"wjrhqYajKs6M5ug7ygFDymnLwxc5f97ryhmq9FE7\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var hotelcode = \"00028216\";",
									"var username = \"iresa\";",
									"var password = \"QexP2eYZRwPcyB5x5LjpnqzNw2U4mWDPzat5Fds7\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);",
									"postman.setEnvironmentVariable(\"username\",username);",
									"postman.setEnvironmentVariable(\"password\",password);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "QexP2eYZRwPcyB5x5LjpnqzNw2U4mWDPzat5Fds7",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"booking\": {\n        \"partnerCode\": \"{{HotelCode}}\",\n        \"status\": \"Commit\",\n        \"reservationId\": \"RESA-{{randomId1}}\",\n        \"voucherNumber\": \"{{voucherNumber}}\",\n        \"createDate\": \"{{Date}}\",\n        \"lastModifyDate\": \"{{Date}}\",\n        \"dateStart\": \"{{StartDate}}\",\n        \"dateEnd\": \"{{EndDate}}\",\n        \"totalAmount\": 200,\n        \"currency\": \"EUR\",\n        \"requests\": \"Something i want to request\",\n        \"comments\": \"Something i need to comment about me and disabilities\",\n        \"roomTypes\": [\n            {\n                \"roomTypeCode\": \"{{RoomTypeCode1}}\",\n                \"totalAmount\": 200,\n                \"currency\": \"EUR\",\n                \"rates\": [\n                    {\n                        \"date\": \"{{StartDate}}\",\n                        \"amount\": 0,\n                        \"currency\": \"EUR\"\n                    }\n                ],\n                \"guests\": [\n                    {\n                        \"isMain\": true,\n                        \"age\": 23,\n                        \"name\": \"Carles\",\n                        \"surname\": \"Puigdemont\",\n                        \"email\": \"carles.puigdemont@brussels.com\",\n                        \"phone\": \"454325454\",\n                        \"address\": \"Brussels\",\n                        \"city\": \"Brussels\",\n                        \"zip\": \"R9R6+QX\",\n                        \"state\": \"Brussels\",\n                        \"country\": \"be\",\n                        \"countryCode\": \"Belgium\"\n                    },\n                    {\n                        \"isMain\": false,\n                        \"age\": 36,\n                        \"name\": \"Pepito\",\n                        \"surname\": \"Palotes\",\n                        \"email\": \"pepito.palotes@brussels.com\",\n                        \"phone\": \"454325454\",\n                        \"address\": \"Brussels\",\n                        \"city\": \"Brussels\",\n                        \"zip\": \"R9R6+QX\",\n                        \"state\": \"Brussels\",\n                        \"country\": \"be\",\n                        \"countryCode\": \"Belgium\"\n                    }\n                ]\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/PushBookings",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"PushBookings"
							]
						},
						"description": "Do booking from iResa API"
					},
					"response": []
				},
				{
					"name": "GET Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var hotelcode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var randomId = postman.getEnvironmentVariable(\"randomId1\");",
									"randomId = \"RESA-\"+randomId;",
									"",
									"if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"var string = \"Contains Partner ID: \"+hotelcode+\" in response body\";",
									"pm.test(string, function () {",
									"var expected = hotelcode;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Reference id: \"+randomId+\" as externalId in response body\";",
									"pm.test(string, function () {",
									"var expected = randomId;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"}",
									"else {",
									"    pm.test.skip(\"Doesnt exists in SANDBOX\", function(){",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d69e1a8-5992-4f76-bbf8-bccbec34eb15",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 61);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 66);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate);",
									"postman.setEnvironmentVariable(\"EndDate\",enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"cmhub\";",
									"var password = \"admin123\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"cmhub\";",
									"var password = \"admin123\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"cmhub\";",
									"var password = \"admin123\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\",username);",
									"postman.setEnvironmentVariable(\"password\",password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{bb8_host}}/api/external/bookings?startDate={{StartDate}}&endDate={{EndDate}}",
							"host": [
								"{{bb8_host}}"
							],
							"path": [
								"api",
								"external",
								"bookings"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{StartDate}}"
								},
								{
									"key": "endDate",
									"value": "{{EndDate}}"
								}
							]
						},
						"description": "Must show booking made through iResa API"
					},
					"response": []
				},
				{
					"name": "Push booking - From iResa API - Cancel ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "240dc66d-4e6c-4965-adbe-7e14cf184e2c",
								"exec": [
									"if(pm.environment.name ==\"PREPROD\")",
									"{",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains status : success\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Not in Output : Partner Code is not valid\", function () {",
									"var expected = \"This value should not be null.\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									"",
									"pm.test(\"Not in Output : Partner Code is not valid\", function () {",
									"var expected = \"Product is not valid\";",
									"pm.expect(pm.response.text()).to.not.include(expected);",
									"});",
									"",
									"pm.test(\"Contains transaction ID in output\", function () {",
									"var expected = \"transaction\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"}",
									"else",
									"{",
									"    pm.test.skip(\"Doesnt exists in SANDBOX\", function(){",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "82015cff-f2e8-4851-99e5-26675f90be51",
								"exec": [
									"var date = new Date();",
									"date.setDate(date.getDate());",
									"var month = date.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var date = date.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"postman.setEnvironmentVariable(\"Date\",date);",
									"console.log('Date', date);",
									"",
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 62);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date1.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date1.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date1.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date1.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 63);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date2.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date2.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date2.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date2.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"console.log('Date formatted : ', enddate);",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 64);",
									"console.log('Date : ', date3)",
									"var month = date2.getMonth() + 1;",
									"if(month < 10)",
									"{",
									"   month = \"0\" + month;",
									"}",
									"var day = date3.getDate();",
									"if(day < 10)",
									"{",
									"    day = \"0\" + day;",
									"}",
									"var hours = date3.getHours();",
									"if(hours < 10)",
									"{",
									"    hours = \"0\" + hours;",
									"}",
									"var min = date3.getMinutes();",
									"if(min < 10)",
									"{",
									"    min = \"0\" + min;",
									"}",
									"var sec = date3.getSeconds();",
									"if(sec < 10)",
									"{",
									"    sec = \"0\" + sec;",
									"}",
									"var enddate1 = date3.getFullYear() + \"-\" + month + \"-\" + day+\"T\"+hours+ \":\"+min +\":\"+sec;",
									"console.log('Date formatted : ', enddate1);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate);",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate1);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"TTDNpD3ujbxVSpycMLy3bgJGcPrXCZTRdmcZzmK4\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"wjrhqYajKs6M5ug7ygFDymnLwxc5f97ryhmq9FE7\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"iresa\";",
									"var password = \"QexP2eYZRwPcyB5x5LjpnqzNw2U4mWDPzat5Fds7\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\",username);",
									"postman.setEnvironmentVariable(\"password\",password);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "QexP2eYZRwPcyB5x5LjpnqzNw2U4mWDPzat5Fds7",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"booking\": {\n        \"partnerCode\": \"{{HotelCode}}\",\n        \"status\": \"Cancel\",\n        \"reservationId\": \"RESA-{{randomId1}}\",\n        \"voucherNumber\": \"{{voucherNumber}}\",\n        \"createDate\": \"{{Date}}\",\n        \"lastModifyDate\": \"{{Date}}\",\n        \"dateStart\": \"{{StartDate}}\",\n        \"dateEnd\": \"{{EndDate}}\",\n        \"totalAmount\": 200,\n        \"currency\": \"EUR\",\n        \"requests\": \"Something i want to request\",\n        \"comments\": \"Something i need to comment about me and disabilities\",\n        \"roomTypes\": [\n            {\n                \"roomTypeCode\": \"{{RoomTypeCode1}}\",\n                \"totalAmount\": 200,\n                \"currency\": \"EUR\",\n                \"rates\": [\n                    {\n                        \"date\": \"{{StartDate}}\",\n                        \"amount\": 0,\n                        \"currency\": \"EUR\"\n                    }\n                ],\n                \"guests\": [\n                    {\n                        \"isMain\": true,\n                        \"age\": 23,\n                        \"name\": \"Carles\",\n                        \"surname\": \"Puigdemont\",\n                        \"email\": \"carles.puigdemont@brussels.com\",\n                        \"phone\": \"454325454\",\n                        \"address\": \"Brussels\",\n                        \"city\": \"Brussels\",\n                        \"zip\": \"R9R6+QX\",\n                        \"state\": \"Brussels\",\n                        \"country\": \"be\",\n                        \"countryCode\": \"Belgium\"\n                    },\n                    {\n                        \"isMain\": false,\n                        \"age\": 36,\n                        \"name\": \"Pepito\",\n                        \"surname\": \"Palotes\",\n                        \"email\": \"pepito.palotes@brussels.com\",\n                        \"phone\": \"454325454\",\n                        \"address\": \"Brussels\",\n                        \"city\": \"Brussels\",\n                        \"zip\": \"R9R6+QX\",\n                        \"state\": \"Brussels\",\n                        \"country\": \"be\",\n                        \"countryCode\": \"Belgium\"\n                    }\n                ]\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/PushBookings",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"PushBookings"
							]
						},
						"description": "Do booking from iResa API"
					},
					"response": []
				},
				{
					"name": "GET Booking ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b80a58-95b2-4472-b704-d4743ab60cb2",
								"exec": [
									"var hotelcode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var randomId = postman.getEnvironmentVariable(\"randomId1\");",
									"randomId = \"RESA-\"+randomId;",
									"",
									"if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"var string = \"Contains Partner ID: \"+hotelcode+\" in response body\";",
									"pm.test(string, function () {",
									"var expected = hotelcode;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"var string = \"Contains Reference id: \"+randomId+\" as externalId in response body\";",
									"pm.test(string, function () {",
									"var expected = randomId;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"}",
									"else {",
									"    pm.test.skip(\"Doesnt exists in SANDBOX\", function(){",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d69e1a8-5992-4f76-bbf8-bccbec34eb15",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 61);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 66);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate);",
									"postman.setEnvironmentVariable(\"EndDate\",enddate);",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"cmhub\";",
									"var password = \"admin123\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"cmhub\";",
									"var password = \"admin123\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"cmhub\";",
									"var password = \"admin123\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\",username);",
									"postman.setEnvironmentVariable(\"password\",password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{bb8_host}}/api/external/bookings?startDate={{StartDate}}&endDate={{EndDate}}",
							"host": [
								"{{bb8_host}}"
							],
							"path": [
								"api",
								"external",
								"bookings"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{StartDate}}"
								},
								{
									"key": "endDate",
									"value": "{{EndDate}}"
								}
							]
						},
						"description": "Must show Cancel booking from iResa API"
					},
					"response": []
				}
			]
		},
		{
			"name": "EAI Partner & Room creation and Smartbox API Validation",
			"item": [
				{
					"name": "Partner Data - YieldPlanet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "db33f0b3-bd0d-48d2-8b5f-2fa2f69f8956",
								"exec": [
									"var randomId = Math.floor(Math.random() * 20000000);",
									"postman.setEnvironmentVariable(\"randomId\", randomId)",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"eai\";",
									"var password = \"17s8msLXKkMVy0mP0BlT0BN7bRsMNEEE\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"eai\";",
									"var password = \"ggn35xLM7r5pxB6cD4bWjEWPPnktm6\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"eai\";",
									"var password = \"17s8msLXKkMVy0mP0BlT0BN7bRsMNEEE\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "27e1f7fc-3654-427b-b8c3-91dd31fe455a",
								"exec": [
									"pm.test(\"Status : 200 - Response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains success in response body\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Basic ZWFpOjE3czhtc0xYS2tNVnkwbVAwQmxUMEJON2JSc01ORUVF",
								"disabled": true
							},
							{
								"key": "password",
								"value": "17s8msLXKkMVy0mP0BlT0BN7bRsMNEEE",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\t\n\t\"id\": \"{{randomId}}\",\n\t\"displayName\": \"Yield Planet\",\n\t\"description\": \"description\",\n\t\"status\": \"partner\",\n\t\"channelManagerHubApiKey\": \"sadsadsadsa\",\n\t\"isChannelManagerEnabled\": true,\n\t\"channelManagerCode\": \"yieldplanet\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/UpdatePartner",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"UpdatePartner"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product data - Room1 Creation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4103da45-3217-4c11-84f1-849d192f53fa",
								"exec": [
									"var roomcode1 = Math.floor(Math.random() * 200000);",
									"postman.setEnvironmentVariable(\"RoomCode1\", roomcode1)",
									"",
									"var hotelcode = postman.getEnvironmentVariable(\"randomId\");",
									"postman.setEnvironmentVariable(\"HotelCode\", hotelcode);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8edaab2e-2bbe-4b35-bdba-4372b5850632",
								"exec": [
									"pm.test(\"Status : 200 - Response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains success in response body\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"productCode\": \"{{RoomCode1}}\",\n\t\"productName\": \"Standard room\",\n\t\"productBrief\": \"Standard room\",\n\t\"isSellable\": false,\n\t\"isReservable\": false,\n\t\"partnerCode\": \"{{HotelCode}}\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/UpdateProduct",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"UpdateProduct"
							]
						},
						"description": "EAI Update product endpoint"
					},
					"response": []
				},
				{
					"name": "Product data - Room2 Creation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4103da45-3217-4c11-84f1-849d192f53fa",
								"exec": [
									"var roomcode2 = Math.floor(Math.random() * 200000);",
									"postman.setEnvironmentVariable(\"RoomCode2\", roomcode2)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9628ce79-f27f-4ed6-8c7c-e7c9159a33b3",
								"exec": [
									"pm.test(\"Status : 200 - Response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains success in response body\", function () {",
									"var expected = \"success\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"productCode\": \"{{RoomCode2}}\",\n\t\"productName\": \"Standard room\",\n\t\"productBrief\": \"Standard room\",\n\t\"isSellable\": false,\n\t\"isReservable\": false,\n\t\"partnerCode\": \"{{HotelCode}}\"\n}\n"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/UpdateProduct",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"UpdateProduct"
							]
						},
						"description": "EAI Update product endpoint"
					},
					"response": []
				},
				{
					"name": "Get Rooms(HotelAvailRQ)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5da26ced-ce04-42da-8990-85b91cfa04e2",
								"exec": [
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomCode2\");",
									"",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"string = \"Contains Room 1 : \"+RoomTypeCode1+\" as expected\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode1;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"string = \"Contains Room 2 : \"+RoomTypeCode2+\" as expected\";",
									"pm.test(string, function () {",
									"var expected = RoomTypeCode2;",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "15600f50-796a-478d-bd1e-7dc0e31a8009",
								"exec": [
									"var username = postman.getEnvironmentVariable(\"HotelCode\");",
									"",
									"",
									"if(pm.environment.name == \"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"}else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = username;",
									"var password = \"password\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelAvailRQ>\n\t\t<ota:AvailRequestSegments>\n\t\t\t<ota:AvailRequestSegment AvailReqType = \"Room\">\n\t\t\t\t<ota:HotelSearchCriteria>\n\t\t\t\t\t<ota:Criterion>\n\t\t\t\t\t\t<ota:HotelRef HotelCode=\"{{HotelCode}}\" />\n\t\t\t\t\t</ota:Criterion>\n\t\t\t\t</ota:HotelSearchCriteria>\n\t\t\t</ota:AvailRequestSegment>\n\t\t</ota:AvailRequestSegments>\n\t</ota:OTA_HotelAvailRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Room Rates(HotelRateAmountNotif)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e771bb7a-5f41-4fd2-a1ad-a96e97ed44b8",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "effb7fac-8a81-4954-923a-9b41a5d78ebe",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate1);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate1);",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 71);",
									"console.log('Date : ', date3)",
									"var month = date3.getMonth() + 1;",
									"var startdate2 = date3.getFullYear() + \"-\" + month + \"-\" + date3.getDate();",
									"console.log('Date formatted : ', startdate2);",
									"",
									"var date4 = new Date();",
									"date4.setDate(date4.getDate() + 90);",
									"console.log('Date : ', date4)",
									"var month = date4.getMonth() + 1;",
									"var enddate2 = date4.getFullYear() + \"-\" + month + \"-\" + date4.getDate();",
									"console.log('Date formatted : ', enddate2);",
									"",
									"var Price1 = \"120\";",
									"var Price2 = \"130\";",
									"var Price3 = \"90\";",
									"var Price4 = \"95\";",
									"postman.setEnvironmentVariable(\"Price1\", Price1);",
									"postman.setEnvironmentVariable(\"Price2\", Price2);",
									"postman.setEnvironmentVariable(\"Price3\", Price3);",
									"postman.setEnvironmentVariable(\"Price4\", Price4);",
									"postman.setEnvironmentVariable(\"StartDate1\",startdate1);",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate1);",
									"postman.setEnvironmentVariable(\"StartDate2\",startdate2);",
									"postman.setEnvironmentVariable(\"EndDate2\",enddate2);",
									"",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomCode2\");",
									"",
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"} ",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n         <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelRateAmountNotifRQ>\n\t  <ota:RateAmountMessages HotelCode = \"{{HotelCode}}\">\n\t    <ota:RateAmountMessage>\n\t      <ota:StatusApplicationControl RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode1}}\" IsRoom = \"true\"/>\n\t      <ota:Rates>\n\t        <ota:Rate Start = \"{{StartDate1}}\" End = \"{{EndDate1}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"{{Price1}}\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t        <ota:Rate Start = \"{{StartDate2}}\" End = \"{{EndDate2}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"{{Price2}}\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t      </ota:Rates>\n\t    </ota:RateAmountMessage>\n\t    <ota:RateAmountMessage>\n\t      <ota:StatusApplicationControl RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode2}}\" IsRoom = \"true\"/>\n\t      <ota:Rates>\n\t        <ota:Rate Start = \"{{StartDate1}}\" End = \"{{EndDate1}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"{{Price3}}\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t        <ota:Rate Start = \"{{StartDate2}}\" End = \"{{EndDate2}}\" CurrencyCode = \"EUR\">\n\t          <ota:BaseByGuestAmts>\n\t            <ota:BaseByGuestAmt AmountAfterTax = \"{{Price4}}\"/>\n\t          </ota:BaseByGuestAmts>\n\t        </ota:Rate>\n\t      </ota:Rates>\n\t    </ota:RateAmountMessage>\n\t  </ota:RateAmountMessages>\n\t</ota:OTA_HotelRateAmountNotifRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Update rates for a room"
					},
					"response": []
				},
				{
					"name": "Update Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e771bb7a-5f41-4fd2-a1ad-a96e97ed44b8",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "effb7fac-8a81-4954-923a-9b41a5d78ebe",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate1);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate1);",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 71);",
									"console.log('Date : ', date3)",
									"var month = date3.getMonth() + 1;",
									"var startdate2 = date3.getFullYear() + \"-\" + month + \"-\" + date3.getDate();",
									"console.log('Date formatted : ', startdate2);",
									"",
									"var date4 = new Date();",
									"date4.setDate(date4.getDate() + 90);",
									"console.log('Date : ', date4)",
									"var month = date4.getMonth() + 1;",
									"var enddate2 = date4.getFullYear() + \"-\" + month + \"-\" + date4.getDate();",
									"console.log('Date formatted : ', enddate2);",
									"",
									"var Price1 = \"120\";",
									"var Price2 = \"130\";",
									"var Price3 = \"90\";",
									"var Price4 = \"95\";",
									"postman.setEnvironmentVariable(\"Price1\", Price1);",
									"postman.setEnvironmentVariable(\"Price2\", Price2);",
									"postman.setEnvironmentVariable(\"Price3\", Price3);",
									"postman.setEnvironmentVariable(\"Price4\", Price4);",
									"postman.setEnvironmentVariable(\"StartDate1\",startdate1);",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate1);",
									"postman.setEnvironmentVariable(\"StartDate2\",startdate2);",
									"postman.setEnvironmentVariable(\"EndDate2\",enddate2);",
									"",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomCode2\");",
									"",
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"} ",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "17s8msLXKkMVy0mP0BlT0BN7bRsMNEEE",
									"type": "string"
								},
								{
									"key": "username",
									"value": "eai",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"identifier\":\"1234532\", \n   \"price\":123.5, \n   \"commission\":10,\n   \"commission_type\":\"amount\"\n}"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/UpdateProduct",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"UpdateProduct"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						},
						"description": "Update rates for a room"
					},
					"response": []
				},
				{
					"name": "Update Room Rates(HotelRateAmountNotif) Copy Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e771bb7a-5f41-4fd2-a1ad-a96e97ed44b8",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "effb7fac-8a81-4954-923a-9b41a5d78ebe",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate1 = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate1);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate1 = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate1);",
									"",
									"var date3 = new Date();",
									"date3.setDate(date3.getDate() + 71);",
									"console.log('Date : ', date3)",
									"var month = date3.getMonth() + 1;",
									"var startdate2 = date3.getFullYear() + \"-\" + month + \"-\" + date3.getDate();",
									"console.log('Date formatted : ', startdate2);",
									"",
									"var date4 = new Date();",
									"date4.setDate(date4.getDate() + 90);",
									"console.log('Date : ', date4)",
									"var month = date4.getMonth() + 1;",
									"var enddate2 = date4.getFullYear() + \"-\" + month + \"-\" + date4.getDate();",
									"console.log('Date formatted : ', enddate2);",
									"",
									"var Price1 = \"120\";",
									"var Price2 = \"130\";",
									"var Price3 = \"90\";",
									"var Price4 = \"95\";",
									"postman.setEnvironmentVariable(\"Price1\", Price1);",
									"postman.setEnvironmentVariable(\"Price2\", Price2);",
									"postman.setEnvironmentVariable(\"Price3\", Price3);",
									"postman.setEnvironmentVariable(\"Price4\", Price4);",
									"postman.setEnvironmentVariable(\"StartDate1\",startdate1);",
									"postman.setEnvironmentVariable(\"EndDate1\",enddate1);",
									"postman.setEnvironmentVariable(\"StartDate2\",startdate2);",
									"postman.setEnvironmentVariable(\"EndDate2\",enddate2);",
									"",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomCode2\");",
									"",
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var username = \"qa\";",
									"var password = \"qa\";",
									"} ",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var username = \"00142835\";",
									"var password = \"password\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var username = \"yieldplanet\";",
									"var password = \"password\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"username\", username);",
									"postman.setEnvironmentVariable(\"password\", password);",
									"postman.setEnvironmentVariable(\"RoomTypeCode1\", RoomTypeCode1);",
									"postman.setEnvironmentVariable(\"RoomTypeCode2\", RoomTypeCode2);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "17s8msLXKkMVy0mP0BlT0BN7bRsMNEEE",
									"type": "string"
								},
								{
									"key": "username",
									"value": "eai",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"type\":\"experience\", \n   \"universe_id\":\"STA\", \n   \"identifier\":\"45675757\", \n   \"name\":\"Something great\", \n   \"price\":1234.23, \n   \"description\":\"A description\",\n   \"partner_code\":\"0009756756770\" \n   \n}"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/UpdateProduct",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"UpdateProduct"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						},
						"description": "Update rates for a room"
					},
					"response": []
				},
				{
					"name": "Read Room Rates(HotelRatePlanRQ)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9766c4eb-37d2-4cbb-b655-a27072593f93",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 90);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate);",
									"",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6675d827-404e-4838-8dae-2ad642239f65",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var price1 = postman.getEnvironmentVariable('Price1');",
									"var price2 = postman.getEnvironmentVariable('Price2');",
									"var price3 = postman.getEnvironmentVariable('Price3');",
									"var price4 = postman.getEnvironmentVariable('Price4');",
									"",
									"console.log(jsonData);",
									"",
									"console.log('Price1 : ',jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['0']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax']);",
									"console.log('Price2 : ',jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['20']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax']);",
									"console.log('Price3 : ',jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['40']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax']);",
									"console.log('Price4 : ',jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['60']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax']);",
									"console.log('RoomTypeCode1 : ',jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['0']['$']['InvTypeCode']);",
									"console.log('RoomTypeCode2 : ',jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['40']['$']['InvTypeCode']);",
									"",
									"var roomtype1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['0']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['40']['$']['InvTypeCode'];",
									"var getprice1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['0']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax'];",
									"var getprice2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['20']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax'];",
									"var getprice3 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['40']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax'];",
									"var getprice4 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelRatePlanRS']['ns2:RatePlans']['ns2:RatePlan']['ns2:Rates']['ns2:Rate']['60']['ns2:BaseByGuestAmts']['ns2:BaseByGuestAmt']['$']['AmountAfterTax'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains first Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode1;",
									"pm.expect(roomtype1).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains second Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode2;",
									"pm.expect(roomtype2).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read room rates for first Roomtypecode - Same for first 20 consecutive days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=0;i<20; i++)",
									"{",
									"if(getprice1 == price1 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read room rates for first Roomtypecode - Same for 21 to 40 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=20;i<40; i++)",
									"{",
									"if(getprice2 == price2 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read room rates for second Roomtypecode - Same for first 20 consecutive days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=40;i<60; i++)",
									"{",
									"if(getprice3 == price3 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read room rates for second Roomtypecode - Same for 21 to 40 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=60;i<80; i++)",
									"{",
									"if(getprice4 == price4 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelRatePlanRQ EchoToken=\"echo\"> \n\t\t<ota:RatePlans>\n\t\t\t<ota:RatePlan>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\"/>\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/> \n\t\t\t\t<ota:RatePlanCandidates>\n\t\t\t\t\t<ota:RatePlanCandidate RatePlanCode = \"SBX\"/> \n\t\t\t\t</ota:RatePlanCandidates>\n\t\t\t</ota:RatePlan>\n\t\t</ota:RatePlans>\n\t</ota:OTA_HotelRatePlanRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get rates for the given partner between a start and end date"
					},
					"response": []
				},
				{
					"name": "Update availabilities(HotelInvCountNotif)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99da692b-ca4a-43da-ac4f-68a244d563f3",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8e968c46-a238-4ef9-a89b-4c87c9760aa6",
								"exec": [
									"var date1 = new Date();",
									"date1.setDate(date1.getDate() + 51);",
									"console.log('Date : ', date1)",
									"var month = date1.getMonth() + 1;",
									"var startdate = date1.getFullYear() + \"-\" + month + \"-\" + date1.getDate();",
									"console.log('Date formatted : ', startdate);",
									"",
									"var date2 = new Date();",
									"date2.setDate(date2.getDate() + 70);",
									"console.log('Date : ', date2)",
									"var month = date2.getMonth() + 1;",
									"var enddate = date2.getFullYear() + \"-\" + month + \"-\" + date2.getDate();",
									"console.log('Date formatted : ', enddate);",
									"postman.setEnvironmentVariable(\"StartDate\",startdate );",
									"postman.setEnvironmentVariable(\"EndDate\",enddate );",
									"",
									"var count1 = 5;",
									"var count2 = 10",
									"",
									"postman.setEnvironmentVariable(\"count1\", count1);",
									"postman.setEnvironmentVariable(\"count2\", count2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n          <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n<soap:Body>\n\n<ota:OTA_HotelInvCountNotifRQ>\n  <ota:Inventories HotelCode = \"{{HotelCode}}\">\n  \n    <ota:Inventory>\n      <ota:StatusApplicationControl Start = \"{{StartDate}}\" End = \"{{EndDate}}\" RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode1}}\" IsRoom = \"true\"/>\n      <ota:InvCounts>\n        <ota:InvCount CountType = \"2\" Count = \"{{count1}}\"/>\n      </ota:InvCounts>\n    </ota:Inventory>\n    \n    <ota:Inventory>\n      <ota:StatusApplicationControl Start = \"{{StartDate}}\" End = \"{{EndDate}}\" RatePlanCode = \"SBX\" InvTypeCode = \"{{RoomTypeCode2}}\" IsRoom = \"true\"/>\n      <ota:InvCounts>\n        <ota:InvCount CountType = \"2\" Count = \"{{count2}}\"/>\n      </ota:InvCounts>\n    </ota:Inventory>\n    \n  </ota:Inventories>\n</ota:OTA_HotelInvCountNotifRQ>\n\n</soap:Body>\n</soap:Envelope>\n"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Update availability"
					},
					"response": []
				},
				{
					"name": "Get Availabilities(HotelInvCountRQ)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "598c606d-c9c5-436a-b8c5-40ddeae1a1b4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c5ee397-460b-4d7e-b249-02f3a250410a",
								"exec": [
									"var jsonData = xml2Json(responseBody);",
									"var HotelCode = postman.getEnvironmentVariable(\"HotelCode\");",
									"var StartDate = postman.getEnvironmentVariable(\"StartDate\");",
									"var EndDate = postman.getEnvironmentVariable(\"EndDate\");",
									"var RoomTypeCode1 = postman.getEnvironmentVariable(\"RoomTypeCode1\");",
									"var RoomTypeCode2 = postman.getEnvironmentVariable(\"RoomTypeCode2\");",
									"var count1 = postman.getEnvironmentVariable('count1');",
									"var count2 = postman.getEnvironmentVariable('count2');",
									"",
									"console.log(jsonData);",
									"console.log('RoomTypeCode2',RoomTypeCode2)",
									"console.log('Count1 : ', jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:InvCounts']['ns2:InvCount']['$']['Count']);",
									"console.log('Count2 : ',jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:InvCounts']['ns2:InvCount']['$']['Count']);",
									"console.log(jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:StatusApplicationControl']['$']['InvTypeCode']);",
									"console.log(jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:StatusApplicationControl']['$']['InvTypeCode']);",
									"",
									"var roomtype1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var roomtype2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:StatusApplicationControl']['$']['InvTypeCode'];",
									"var getcount1 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['0']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"var getcount2 = jsonData['env:Envelope']['env:Body']['ns2:OTA_HotelInvCountRS']['ns2:Inventories']['ns2:Inventory']['20']['ns2:InvCounts']['ns2:InvCount']['$']['Count'];",
									"",
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> text/xml; charset=utf-8\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/xml; charset=utf-8\")",
									"});",
									"",
									"pm.test(\"Contains string: EchoToken\", function () {",
									"var expected = \"EchoToken\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains string: TimeStamp\", function () {",
									"var expected = \"TimeStamp\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Contains HoteCode value\", function () {",
									"expected = HotelCode;",
									"  pm.expect(pm.response.text()).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains first Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode1;",
									"pm.expect(roomtype1).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties - Contains second Roomtypecode as expected\", function () {",
									"expected = RoomTypeCode2;",
									"pm.expect(roomtype2).to.include(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties for first Roomtypecode - Available for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=0;i<20; i++)",
									"{",
									"if(getcount1 == count1 && roomtype1 == RoomTypeCode1)",
									"{",
									"    increment++;",
									"    console.log(increment);",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"pm.test(\"Read availabilties for second Roomtypecode - Available for consecutive 20 days as expected\", function () {",
									"expected = 20;",
									"var increment = 0;",
									"for(var i=20;i<40; i++)",
									"{",
									"if(getcount2 == count2 && roomtype2 == RoomTypeCode2)",
									"{",
									"    increment++;",
									"    console.log(increment);",
									"}",
									"}",
									"pm.expect(increment).to.be.eql(expected);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<soap:Envelope\n  xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\"\n  xmlns:wss = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"\n  xmlns:ota = \"http://www.opentravel.org/OTA/2003/05\">\n\n  <soap:Header>\n    <wss:Security soap:mustUnderstand = \"1\">\n      <wss:UsernameToken>\n        <wss:Username>{{username}}</wss:Username>\n        <wss:Password>{{password}}</wss:Password>\n      </wss:UsernameToken>\n    </wss:Security>\n  </soap:Header>\n\n  <soap:Body>\n\t<ota:OTA_HotelInvCountRQ>\n\t\t<ota:HotelInvCountRequests>\n\t\t\t<ota:HotelInvCountRequest>\n\t\t\t\t<ota:HotelRef HotelCode = \"{{HotelCode}}\" />\n\t\t\t\t<ota:DateRange Start = \"{{StartDate}}\" End = \"{{EndDate}}\"/>\n\t\t\t\t<ota:RoomTypeCandidates>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode1}}\"/>\n\t\t\t\t\t<ota:RoomTypeCandidate RoomTypeCode = \"{{RoomTypeCode2}}\"/>\n\t\t\t\t</ota:RoomTypeCandidates>\n\t\t\t</ota:HotelInvCountRequest>\n\t\t</ota:HotelInvCountRequests>\n\t</ota:OTA_HotelInvCountRQ>\n  </soap:Body>\n\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{host}}/api/ext/soap/ota/v2/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"ext",
								"soap",
								"ota",
								"v2",
								""
							]
						},
						"description": "Get availability data for a given partner and rooms between start and end date."
					},
					"response": []
				},
				{
					"name": "Update status - Success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "70ffd558-bb64-436e-95d5-48bef436aa58",
								"exec": [
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var authusername = \"eai\";",
									"var authpassword = \"17s8msLXKkMVy0mP0BlT0BN7bRsMNEEE\";",
									"} ",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var authusername = \"eai\";",
									"var authpassword = \"ggn35xLM7r5pxB6cD4bWjEWPPnktm6\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var authusername = \"eai\";",
									"var authpassword = \"17s8msLXKkMVy0mP0BlT0BN7bRsMNEEE\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"authusername\", authusername);",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "74835da6-84ca-448a-8b3d-618c33115f39",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains status : ok in response body\", function () {",
									"var expected = \"ok\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{authpassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{authusername}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Basic Y21oOkIzdnhpNXVHVGI=",
								"type": "text",
								"disabled": true
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"transaction_id\": \"5cd96dfea328e7.88914853\",\r\n    \"status\": \"success\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/UpdateStatus",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"UpdateStatus"
							]
						},
						"description": "EAI Update status of transaction. This is send back to CMHUB from EAI"
					},
					"response": []
				},
				{
					"name": "Update status - Failed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "70ffd558-bb64-436e-95d5-48bef436aa58",
								"exec": [
									"if(pm.environment.name ==\"SANDBOX_ENV\")",
									"{",
									"var authusername = \"eai\";",
									"var authpassword = \"17s8msLXKkMVy0mP0BlT0BN7bRsMNEEE\";",
									"} ",
									"else if(pm.environment.name ==\"PREPROD\")",
									"{",
									"var authusername = \"eai\";",
									"var authpassword = \"ggn35xLM7r5pxB6cD4bWjEWPPnktm6\";",
									"}else if(pm.environment.name ==\"DEVINT\")",
									"{",
									"var authusername = \"eai\";",
									"var authpassword = \"17s8msLXKkMVy0mP0BlT0BN7bRsMNEEE\";",
									"}",
									"",
									"postman.setEnvironmentVariable(\"authusername\", authusername);",
									"postman.setEnvironmentVariable(\"authpassword\", authpassword);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "74835da6-84ca-448a-8b3d-618c33115f39",
								"exec": [
									"pm.test(\"Response is 200 - success\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type -> application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Contains status : ok in response body\", function () {",
									"var expected = \"ok\";",
									"pm.expect(pm.response.text()).to.include(expected);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{authpassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{authusername}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic Y21oOkIzdnhpNXVHVGI=",
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"disabled": true
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"transaction_id\": \"5d42e4acebc8d6.50961970\",\r\n    \"status\": \"failed\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/int/rest/v1/UpdateStatus",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"int",
								"rest",
								"v1",
								"UpdateStatus"
							]
						},
						"description": "EAI Update status of transaction. This is send back to CMHUB from EAI"
					},
					"response": []
				}
			],
			"description": "This API calls will create Partner and Rooms first for YieldPlanet CM. Then it will use same Partner and Rooms for updating availabilities and room rates\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e83b4ec7-00b0-4329-b84f-b1e3eb4e4b28",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "08e9537b-959f-4404-8040-a44299bf8fbb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "248fd19d-69c6-48c2-9ce9-a86a7d4bfa54",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "200146a4-0428-495a-8ca9-111e2e4f21fc",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}